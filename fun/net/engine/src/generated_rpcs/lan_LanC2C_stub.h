/**
 * Auto-generated by IDL Compiler (2.1.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#pragma once

#include "FUN.h"
#include "lan_defs.h"
#include "lan_types.h"

namespace fun {
namespace LanC2C
{
  struct Stub : public fun::RpcStub
  {
    fun::int32 GetDeclaredRpcCount() const override { return LanC2C::NumRpcFunctions; }
    const fun::RpcId* GetDeclaredRpcIds() const override { return LanC2C::RpcIds::RpcIdList(); }
    const char** GetDeclaredRpcNames() const override { return LanC2C::RpcNames::RpcNameList(); }

    // Foo
    virtual bool Foo(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) { return false; }
    #define DECLARE_RPCSTUB_LanC2C_Foo bool Foo(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) override;
    #define IMPLEMENT_RPCSTUB_LanC2C_Foo(TClass) bool TClass::Foo(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)> FooFunctionType;
    FooFunctionType OnFoo;

    // RpcStub interface
    bool ProcessReceivedMessage(fun::ReceivedMessage& received_msg, void* host_tag) override;
  };

} // end of namespace LanC2C

} // end of namespace fun
