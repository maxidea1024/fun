/**
 * Auto-generated by IDL Compiler (2.1.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#pragma once

#include "FUN.h"

#define IDL_BEGIN_GLOBAL_NAMESPACE }
#define IDL_END_GLOBAL_NAMESPACE namespace fun {

namespace fun {

struct EngineTypes_UserTypeHandlers
{
  // FrameNumber
  // is_value_type = yes
  inline static void Write(fun::IMessageOut& Output__, const fun::FrameNumber& Value)
  {
    fun::MessageFieldTypeTraits<fun::FrameNumber>::Write(Output__, Value);
  }

  inline static bool Read(fun::IMessageIn& Input__, fun::FrameNumber& out_value)
  {
    #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }

    DO_CHECKED__(fun::MessageFieldTypeTraits<fun::FrameNumber>::Read(Input__, out_value));
    return true;
    #undef DO_CHECKED__
  }

  inline static fun::int32 GetByteLength(const fun::FrameNumber& Value)
  {
    return GetContentByteLength(Value);
  }

  inline static fun::int32 GetContentByteLength(const fun::FrameNumber& Value)
  {
    fun::MessageByteCounter Counter;
    fun::MessageFieldTypeTraits<fun::FrameNumber>::Write(Counter, Value);
    return Counter.GetLength();
  }

  inline static fun::String ToString(const fun::FrameNumber& Value)
  {
    return fun::ToString(Value);
  }

  // host_id
  // is_value_type = yes
  inline static void Write(fun::IMessageOut& Output__, const fun::HostId& Value)
  {
    fun::MessageFieldTypeTraits<fun::HostId>::Write(Output__, Value);
  }

  inline static bool Read(fun::IMessageIn& Input__, fun::HostId& out_value)
  {
    #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }

    DO_CHECKED__(fun::MessageFieldTypeTraits<fun::HostId>::Read(Input__, out_value));
    return true;
    #undef DO_CHECKED__
  }

  inline static fun::int32 GetByteLength(const fun::HostId& Value)
  {
    return GetContentByteLength(Value);
  }

  inline static fun::int32 GetContentByteLength(const fun::HostId& Value)
  {
    fun::MessageByteCounter Counter;
    fun::MessageFieldTypeTraits<fun::HostId>::Write(Counter, Value);
    return Counter.GetLength();
  }

  inline static fun::String ToString(const fun::HostId& Value)
  {
    return fun::ToString(Value);
  }

  // HostIdArray
  // is_value_type = no
  inline static void Write(fun::IMessageOut& Output__, const fun::HostIdArray& Value)
  {
    fun::MessageFormat::WriteCounter(Output__, GetContentByteLength(Value)); // content-length
    fun::MessageFieldTypeTraits<fun::HostIdArray>::Write(Output__, Value);
  }

  inline static bool Read(fun::IMessageIn& Input__, fun::HostIdArray& out_value)
  {
    #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }

    fun::ScopedMessageInRecursionGuard recursion_guard(Input__);
    fun::ScopedMessageInViewGuard view_guard(Input__);

    fun::int32 Length;
    DO_CHECKED__(fun::MessageFormat::ReadCounter(Input__, Length));

    // Adjust view.
    Input__.AdjustView(Length);

    DO_CHECKED__(fun::MessageFieldTypeTraits<fun::HostIdArray>::Read(Input__, out_value));
    return true;
    #undef DO_CHECKED__
  }

  inline static fun::int32 GetByteLength(const fun::HostIdArray& Value)
  {
    return fun::MessageFormat::GetByteLength_LengthPrefixed(GetContentByteLength(Value));
  }

  inline static fun::int32 GetContentByteLength(const fun::HostIdArray& Value)
  {
    fun::MessageByteCounter Counter;
    fun::MessageFieldTypeTraits<fun::HostIdArray>::Write(Counter, Value);
    return Counter.GetLength();
  }

  inline static fun::String ToString(const fun::HostIdArray& Value)
  {
    return fun::ToString(Value);
  }

  // LogCategory
  // is_value_type = yes
  inline static void Write(fun::IMessageOut& Output__, const fun::LogCategory& Value)
  {
    fun::MessageFieldTypeTraits<fun::LogCategory>::Write(Output__, Value);
  }

  inline static bool Read(fun::IMessageIn& Input__, fun::LogCategory& out_value)
  {
    #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }

    DO_CHECKED__(fun::MessageFieldTypeTraits<fun::LogCategory>::Read(Input__, out_value));
    return true;
    #undef DO_CHECKED__
  }

  inline static fun::int32 GetByteLength(const fun::LogCategory& Value)
  {
    return 1;
  }

  inline static fun::int32 GetContentByteLength(const fun::LogCategory& Value)
  {
    return 1;
  }

  inline static fun::String ToString(const fun::LogCategory& Value)
  {
    return fun::ToString(Value);
  }

  // ConnectionState
  // is_value_type = yes
  inline static void Write(fun::IMessageOut& Output__, const fun::ConnectionState& Value)
  {
    fun::MessageFieldTypeTraits<fun::ConnectionState>::Write(Output__, Value);
  }

  inline static bool Read(fun::IMessageIn& Input__, fun::ConnectionState& out_value)
  {
    #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }

    DO_CHECKED__(fun::MessageFieldTypeTraits<fun::ConnectionState>::Read(Input__, out_value));
    return true;
    #undef DO_CHECKED__
  }

  inline static fun::int32 GetByteLength(const fun::ConnectionState& Value)
  {
    return 1;
  }

  inline static fun::int32 GetContentByteLength(const fun::ConnectionState& Value)
  {
    return 1;
  }

  inline static fun::String ToString(const fun::ConnectionState& Value)
  {
    return fun::ToString(Value);
  }

  // NamedInetAddress
  // is_value_type = yes
  inline static void Write(fun::IMessageOut& Output__, const fun::NamedInetAddress& Value)
  {
    fun::MessageFormat::WriteCounter(Output__, GetContentByteLength(Value)); // content-length
    fun::MessageFieldTypeTraits<fun::NamedInetAddress>::Write(Output__, Value);
  }

  inline static bool Read(fun::IMessageIn& Input__, fun::NamedInetAddress& out_value)
  {
    #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }

    fun::ScopedMessageInRecursionGuard recursion_guard(Input__);
    fun::ScopedMessageInViewGuard view_guard(Input__);

    fun::int32 Length;
    DO_CHECKED__(fun::MessageFormat::ReadCounter(Input__, Length));

    // Adjust view.
    Input__.AdjustView(Length);

    DO_CHECKED__(fun::MessageFieldTypeTraits<fun::NamedInetAddress>::Read(Input__, out_value));
    return true;
    #undef DO_CHECKED__
  }

  inline static fun::int32 GetByteLength(const fun::NamedInetAddress& Value)
  {
    return fun::MessageFormat::GetByteLength_LengthPrefixed(GetContentByteLength(Value));
  }

  inline static fun::int32 GetContentByteLength(const fun::NamedInetAddress& Value)
  {
    fun::MessageByteCounter Counter;
    fun::MessageFieldTypeTraits<fun::NamedInetAddress>::Write(Counter, Value);
    return Counter.GetLength();
  }

  inline static fun::String ToString(const fun::NamedInetAddress& Value)
  {
    return fun::ToString(Value);
  }

  // result_code
  // is_value_type = yes
  inline static void Write(fun::IMessageOut& Output__, const fun::ResultCode& Value)
  {
    fun::MessageFieldTypeTraits<fun::ResultCode>::Write(Output__, Value);
  }

  inline static bool Read(fun::IMessageIn& Input__, fun::ResultCode& out_value)
  {
    #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }

    DO_CHECKED__(fun::MessageFieldTypeTraits<fun::ResultCode>::Read(Input__, out_value));
    return true;
    #undef DO_CHECKED__
  }

  inline static fun::int32 GetByteLength(const fun::ResultCode& Value)
  {
    return GetContentByteLength(Value);
  }

  inline static fun::int32 GetContentByteLength(const fun::ResultCode& Value)
  {
    fun::MessageByteCounter Counter;
    fun::MessageFieldTypeTraits<fun::ResultCode>::Write(Counter, Value);
    return Counter.GetLength();
  }

  inline static fun::String ToString(const fun::ResultCode& Value)
  {
    return fun::ToString(Value);
  }

  // rpc_id
  // is_value_type = yes
  inline static void Write(fun::IMessageOut& Output__, const fun::RpcId& Value)
  {
    fun::MessageFieldTypeTraits<fun::RpcId>::Write(Output__, Value);
  }

  inline static bool Read(fun::IMessageIn& Input__, fun::RpcId& out_value)
  {
    #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }

    DO_CHECKED__(fun::MessageFieldTypeTraits<fun::RpcId>::Read(Input__, out_value));
    return true;
    #undef DO_CHECKED__
  }

  inline static fun::int32 GetByteLength(const fun::RpcId& Value)
  {
    return GetContentByteLength(Value);
  }

  inline static fun::int32 GetContentByteLength(const fun::RpcId& Value)
  {
    fun::MessageByteCounter Counter;
    fun::MessageFieldTypeTraits<fun::RpcId>::Write(Counter, Value);
    return Counter.GetLength();
  }

  inline static fun::String ToString(const fun::RpcId& Value)
  {
    return fun::ToString(Value);
  }

  // IpAddress
  // is_value_type = no
  inline static void Write(fun::IMessageOut& Output__, const fun::IpAddress& Value)
  {
    fun::MessageFormat::WriteCounter(Output__, GetContentByteLength(Value)); // content-length
    fun::MessageFieldTypeTraits<fun::IpAddress>::Write(Output__, Value);
  }

  inline static bool Read(fun::IMessageIn& Input__, fun::IpAddress& out_value)
  {
    #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }

    fun::ScopedMessageInRecursionGuard recursion_guard(Input__);
    fun::ScopedMessageInViewGuard view_guard(Input__);

    fun::int32 Length;
    DO_CHECKED__(fun::MessageFormat::ReadCounter(Input__, Length));

    // Adjust view.
    Input__.AdjustView(Length);

    DO_CHECKED__(fun::MessageFieldTypeTraits<fun::IpAddress>::Read(Input__, out_value));
    return true;
    #undef DO_CHECKED__
  }

  inline static fun::int32 GetByteLength(const fun::IpAddress& Value)
  {
    return fun::MessageFormat::GetByteLength_LengthPrefixed(GetContentByteLength(Value));
  }

  inline static fun::int32 GetContentByteLength(const fun::IpAddress& Value)
  {
    fun::MessageByteCounter Counter;
    fun::MessageFieldTypeTraits<fun::IpAddress>::Write(Counter, Value);
    return Counter.GetLength();
  }

  inline static fun::String ToString(const fun::IpAddress& Value)
  {
    return fun::ToString(Value);
  }

  // InetAddress
  // is_value_type = no
  inline static void Write(fun::IMessageOut& Output__, const fun::InetAddress& Value)
  {
    fun::MessageFormat::WriteCounter(Output__, GetContentByteLength(Value)); // content-length
    fun::MessageFieldTypeTraits<fun::InetAddress>::Write(Output__, Value);
  }

  inline static bool Read(fun::IMessageIn& Input__, fun::InetAddress& out_value)
  {
    #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }

    fun::ScopedMessageInRecursionGuard recursion_guard(Input__);
    fun::ScopedMessageInViewGuard view_guard(Input__);

    fun::int32 Length;
    DO_CHECKED__(fun::MessageFormat::ReadCounter(Input__, Length));

    // Adjust view.
    Input__.AdjustView(Length);

    DO_CHECKED__(fun::MessageFieldTypeTraits<fun::InetAddress>::Read(Input__, out_value));
    return true;
    #undef DO_CHECKED__
  }

  inline static fun::int32 GetByteLength(const fun::InetAddress& Value)
  {
    return fun::MessageFormat::GetByteLength_LengthPrefixed(GetContentByteLength(Value));
  }

  inline static fun::int32 GetContentByteLength(const fun::InetAddress& Value)
  {
    fun::MessageByteCounter Counter;
    fun::MessageFieldTypeTraits<fun::InetAddress>::Write(Counter, Value);
    return Counter.GetLength();
  }

  inline static fun::String ToString(const fun::InetAddress& Value)
  {
    return fun::ToString(Value);
  }

  #if FUN_BUILD_ENGINE
  // VizMessageSummary
  // is_value_type = no
  inline static void Write(fun::IMessageOut& Output__, const fun::VizMessageSummary& Value)
  {
    fun::MessageFormat::WriteCounter(Output__, GetContentByteLength(Value)); // content-length
    fun::MessageFieldTypeTraits<fun::VizMessageSummary>::Write(Output__, Value);
  }

  inline static bool Read(fun::IMessageIn& Input__, fun::VizMessageSummary& out_value)
  {
    #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }

    fun::ScopedMessageInRecursionGuard recursion_guard(Input__);
    fun::ScopedMessageInViewGuard view_guard(Input__);

    fun::int32 Length;
    DO_CHECKED__(fun::MessageFormat::ReadCounter(Input__, Length));

    // Adjust view.
    Input__.AdjustView(Length);

    DO_CHECKED__(fun::MessageFieldTypeTraits<fun::VizMessageSummary>::Read(Input__, out_value));
    return true;
    #undef DO_CHECKED__
  }

  inline static fun::int32 GetByteLength(const fun::VizMessageSummary& Value)
  {
    return fun::MessageFormat::GetByteLength_LengthPrefixed(GetContentByteLength(Value));
  }

  inline static fun::int32 GetContentByteLength(const fun::VizMessageSummary& Value)
  {
    fun::MessageByteCounter Counter;
    fun::MessageFieldTypeTraits<fun::VizMessageSummary>::Write(Counter, Value);
    return Counter.GetLength();
  }

  inline static fun::String ToString(const fun::VizMessageSummary& Value)
  {
    return fun::ToString(Value);
  }
  #endif // FUN_BUILD_ENGINE
}; // UserType handlers

} // end of namespace fun

#undef IDL_BEGIN_GLOBAL_NAMESPACE
#undef IDL_END_GLOBAL_NAMESPACE
