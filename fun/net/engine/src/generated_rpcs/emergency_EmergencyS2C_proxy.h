/**
 * Auto-generated by IDL Compiler (2.1.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#pragma once

#include "FUN.h"
#include "emergency_defs.h"
#include "emergency_types.h"

namespace fun {
namespace EmergencyS2C
{
  struct Proxy : public fun::RpcProxy
  {
    fun::int32 GetDeclaredRpcCount() const override { return EmergencyS2C::NumRpcFunctions; }
    const fun::RpcId* GetDeclaredRpcIds() const override { return EmergencyS2C::RpcIds::RpcIdList(); }
    const char** GetDeclaredRpcNames() const override { return EmergencyS2C::RpcNames::RpcNameList(); }

    inline bool EmergencyLogData_AckComplete(fun::HostId rpc_recvfrom) { return EmergencyLogData_AckComplete(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable); }
    inline bool EmergencyLogData_AckComplete(fun::HostId rpc_recvfrom, const fun::RpcCallOption& rpc_call_opt) { return EmergencyLogData_AckComplete(&rpc_recvfrom, 1, rpc_call_opt); }
    template <typename Allocator>
    inline bool EmergencyLogData_AckComplete(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds) { return EmergencyLogData_AckComplete(RpcRemoteIds, fun::RpcCallOption::Reliable); }
    template <typename Allocator>
    inline bool EmergencyLogData_AckComplete(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& rpc_call_opt) { return EmergencyLogData_AckComplete(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), rpc_call_opt); }
    inline bool EmergencyLogData_AckComplete(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount) { return EmergencyLogData_AckComplete(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable); }
    bool EmergencyLogData_AckComplete(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt);
  };
} // end of namespace EmergencyS2C

} // end of namespace fun
