/**
 * Auto-generated by IDL Compiler (2.1.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#pragma once

#include "FUN.h"
#include "lan_defs.h"
#include "lan_types.h"

namespace fun {
namespace LanS2C
{
  struct Proxy : public fun::RpcProxy
  {
    fun::int32 GetDeclaredRpcCount() const override { return LanS2C::NumRpcFunctions; }
    const fun::RpcId* GetDeclaredRpcIds() const override { return LanS2C::RpcIds::RpcIdList(); }
    const char** GetDeclaredRpcNames() const override { return LanS2C::RpcNames::RpcNameList(); }

    inline bool P2PGroup_MemberJoin(fun::HostId rpc_recvfrom, const fun::HostId& group_id, const fun::HostId& member_id, const fun::ByteArray& custom_field, const fun::uint32 event_id, const fun::ByteArray& P2PAESSessionKey, const fun::ByteArray& P2PRC4SessionKey, const fun::Uuid& ConnectionTag) { return P2PGroup_MemberJoin(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, group_id, member_id, custom_field, event_id, P2PAESSessionKey, P2PRC4SessionKey, ConnectionTag); }
    inline bool P2PGroup_MemberJoin(fun::HostId rpc_recvfrom, const fun::RpcCallOption& rpc_call_opt, const fun::HostId& group_id, const fun::HostId& member_id, const fun::ByteArray& custom_field, const fun::uint32 event_id, const fun::ByteArray& P2PAESSessionKey, const fun::ByteArray& P2PRC4SessionKey, const fun::Uuid& ConnectionTag) { return P2PGroup_MemberJoin(&rpc_recvfrom, 1, rpc_call_opt, group_id, member_id, custom_field, event_id, P2PAESSessionKey, P2PRC4SessionKey, ConnectionTag); }
    template <typename Allocator>
    inline bool P2PGroup_MemberJoin(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::HostId& group_id, const fun::HostId& member_id, const fun::ByteArray& custom_field, const fun::uint32 event_id, const fun::ByteArray& P2PAESSessionKey, const fun::ByteArray& P2PRC4SessionKey, const fun::Uuid& ConnectionTag) { return P2PGroup_MemberJoin(RpcRemoteIds, fun::RpcCallOption::Reliable, group_id, member_id, custom_field, event_id, P2PAESSessionKey, P2PRC4SessionKey, ConnectionTag); }
    template <typename Allocator>
    inline bool P2PGroup_MemberJoin(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& rpc_call_opt, const fun::HostId& group_id, const fun::HostId& member_id, const fun::ByteArray& custom_field, const fun::uint32 event_id, const fun::ByteArray& P2PAESSessionKey, const fun::ByteArray& P2PRC4SessionKey, const fun::Uuid& ConnectionTag) { return P2PGroup_MemberJoin(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), rpc_call_opt, group_id, member_id, custom_field, event_id, P2PAESSessionKey, P2PRC4SessionKey, ConnectionTag); }
    inline bool P2PGroup_MemberJoin(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::HostId& group_id, const fun::HostId& member_id, const fun::ByteArray& custom_field, const fun::uint32 event_id, const fun::ByteArray& P2PAESSessionKey, const fun::ByteArray& P2PRC4SessionKey, const fun::Uuid& ConnectionTag) { return P2PGroup_MemberJoin(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, group_id, member_id, custom_field, event_id, P2PAESSessionKey, P2PRC4SessionKey, ConnectionTag); }
    bool P2PGroup_MemberJoin(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt, const fun::HostId& group_id, const fun::HostId& member_id, const fun::ByteArray& custom_field, const fun::uint32 event_id, const fun::ByteArray& P2PAESSessionKey, const fun::ByteArray& P2PRC4SessionKey, const fun::Uuid& ConnectionTag);

    inline bool P2PGroup_MemberJoin_Unencrypted(fun::HostId rpc_recvfrom, const fun::HostId& group_id, const fun::HostId& member_id, const fun::ByteArray& custom_field, const fun::uint32 event_id, const fun::Uuid& ConnectionTag) { return P2PGroup_MemberJoin_Unencrypted(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, group_id, member_id, custom_field, event_id, ConnectionTag); }
    inline bool P2PGroup_MemberJoin_Unencrypted(fun::HostId rpc_recvfrom, const fun::RpcCallOption& rpc_call_opt, const fun::HostId& group_id, const fun::HostId& member_id, const fun::ByteArray& custom_field, const fun::uint32 event_id, const fun::Uuid& ConnectionTag) { return P2PGroup_MemberJoin_Unencrypted(&rpc_recvfrom, 1, rpc_call_opt, group_id, member_id, custom_field, event_id, ConnectionTag); }
    template <typename Allocator>
    inline bool P2PGroup_MemberJoin_Unencrypted(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::HostId& group_id, const fun::HostId& member_id, const fun::ByteArray& custom_field, const fun::uint32 event_id, const fun::Uuid& ConnectionTag) { return P2PGroup_MemberJoin_Unencrypted(RpcRemoteIds, fun::RpcCallOption::Reliable, group_id, member_id, custom_field, event_id, ConnectionTag); }
    template <typename Allocator>
    inline bool P2PGroup_MemberJoin_Unencrypted(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& rpc_call_opt, const fun::HostId& group_id, const fun::HostId& member_id, const fun::ByteArray& custom_field, const fun::uint32 event_id, const fun::Uuid& ConnectionTag) { return P2PGroup_MemberJoin_Unencrypted(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), rpc_call_opt, group_id, member_id, custom_field, event_id, ConnectionTag); }
    inline bool P2PGroup_MemberJoin_Unencrypted(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::HostId& group_id, const fun::HostId& member_id, const fun::ByteArray& custom_field, const fun::uint32 event_id, const fun::Uuid& ConnectionTag) { return P2PGroup_MemberJoin_Unencrypted(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, group_id, member_id, custom_field, event_id, ConnectionTag); }
    bool P2PGroup_MemberJoin_Unencrypted(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt, const fun::HostId& group_id, const fun::HostId& member_id, const fun::ByteArray& custom_field, const fun::uint32 event_id, const fun::Uuid& ConnectionTag);

    inline bool P2PGroup_MemberLeave(fun::HostId rpc_recvfrom, const fun::HostId& member_id, const fun::HostId& group_id) { return P2PGroup_MemberLeave(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, member_id, group_id); }
    inline bool P2PGroup_MemberLeave(fun::HostId rpc_recvfrom, const fun::RpcCallOption& rpc_call_opt, const fun::HostId& member_id, const fun::HostId& group_id) { return P2PGroup_MemberLeave(&rpc_recvfrom, 1, rpc_call_opt, member_id, group_id); }
    template <typename Allocator>
    inline bool P2PGroup_MemberLeave(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::HostId& member_id, const fun::HostId& group_id) { return P2PGroup_MemberLeave(RpcRemoteIds, fun::RpcCallOption::Reliable, member_id, group_id); }
    template <typename Allocator>
    inline bool P2PGroup_MemberLeave(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& rpc_call_opt, const fun::HostId& member_id, const fun::HostId& group_id) { return P2PGroup_MemberLeave(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), rpc_call_opt, member_id, group_id); }
    inline bool P2PGroup_MemberLeave(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::HostId& member_id, const fun::HostId& group_id) { return P2PGroup_MemberLeave(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, member_id, group_id); }
    bool P2PGroup_MemberLeave(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt, const fun::HostId& member_id, const fun::HostId& group_id);

    inline bool ReliablePong(fun::HostId rpc_recvfrom) { return ReliablePong(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable); }
    inline bool ReliablePong(fun::HostId rpc_recvfrom, const fun::RpcCallOption& rpc_call_opt) { return ReliablePong(&rpc_recvfrom, 1, rpc_call_opt); }
    template <typename Allocator>
    inline bool ReliablePong(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds) { return ReliablePong(RpcRemoteIds, fun::RpcCallOption::Reliable); }
    template <typename Allocator>
    inline bool ReliablePong(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& rpc_call_opt) { return ReliablePong(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), rpc_call_opt); }
    inline bool ReliablePong(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount) { return ReliablePong(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable); }
    bool ReliablePong(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt);

    inline bool P2PConnectStart(fun::HostId rpc_recvfrom, const fun::HostId& peer_id, const fun::InetAddress external_addr) { return P2PConnectStart(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, peer_id, external_addr); }
    inline bool P2PConnectStart(fun::HostId rpc_recvfrom, const fun::RpcCallOption& rpc_call_opt, const fun::HostId& peer_id, const fun::InetAddress external_addr) { return P2PConnectStart(&rpc_recvfrom, 1, rpc_call_opt, peer_id, external_addr); }
    template <typename Allocator>
    inline bool P2PConnectStart(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::HostId& peer_id, const fun::InetAddress external_addr) { return P2PConnectStart(RpcRemoteIds, fun::RpcCallOption::Reliable, peer_id, external_addr); }
    template <typename Allocator>
    inline bool P2PConnectStart(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& rpc_call_opt, const fun::HostId& peer_id, const fun::InetAddress external_addr) { return P2PConnectStart(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), rpc_call_opt, peer_id, external_addr); }
    inline bool P2PConnectStart(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::HostId& peer_id, const fun::InetAddress external_addr) { return P2PConnectStart(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, peer_id, external_addr); }
    bool P2PConnectStart(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt, const fun::HostId& peer_id, const fun::InetAddress external_addr);

    inline bool ShutdownTcpAck(fun::HostId rpc_recvfrom) { return ShutdownTcpAck(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable); }
    inline bool ShutdownTcpAck(fun::HostId rpc_recvfrom, const fun::RpcCallOption& rpc_call_opt) { return ShutdownTcpAck(&rpc_recvfrom, 1, rpc_call_opt); }
    template <typename Allocator>
    inline bool ShutdownTcpAck(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds) { return ShutdownTcpAck(RpcRemoteIds, fun::RpcCallOption::Reliable); }
    template <typename Allocator>
    inline bool ShutdownTcpAck(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& rpc_call_opt) { return ShutdownTcpAck(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), rpc_call_opt); }
    inline bool ShutdownTcpAck(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount) { return ShutdownTcpAck(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable); }
    bool ShutdownTcpAck(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt);

    inline bool RequestAutoPrune(fun::HostId rpc_recvfrom) { return RequestAutoPrune(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable); }
    inline bool RequestAutoPrune(fun::HostId rpc_recvfrom, const fun::RpcCallOption& rpc_call_opt) { return RequestAutoPrune(&rpc_recvfrom, 1, rpc_call_opt); }
    template <typename Allocator>
    inline bool RequestAutoPrune(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds) { return RequestAutoPrune(RpcRemoteIds, fun::RpcCallOption::Reliable); }
    template <typename Allocator>
    inline bool RequestAutoPrune(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& rpc_call_opt) { return RequestAutoPrune(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), rpc_call_opt); }
    inline bool RequestAutoPrune(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount) { return RequestAutoPrune(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable); }
    bool RequestAutoPrune(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt);

    inline bool GroupP2PConnectionComplete(fun::HostId rpc_recvfrom, const fun::HostId& group_id) { return GroupP2PConnectionComplete(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, group_id); }
    inline bool GroupP2PConnectionComplete(fun::HostId rpc_recvfrom, const fun::RpcCallOption& rpc_call_opt, const fun::HostId& group_id) { return GroupP2PConnectionComplete(&rpc_recvfrom, 1, rpc_call_opt, group_id); }
    template <typename Allocator>
    inline bool GroupP2PConnectionComplete(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::HostId& group_id) { return GroupP2PConnectionComplete(RpcRemoteIds, fun::RpcCallOption::Reliable, group_id); }
    template <typename Allocator>
    inline bool GroupP2PConnectionComplete(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& rpc_call_opt, const fun::HostId& group_id) { return GroupP2PConnectionComplete(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), rpc_call_opt, group_id); }
    inline bool GroupP2PConnectionComplete(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::HostId& group_id) { return GroupP2PConnectionComplete(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, group_id); }
    bool GroupP2PConnectionComplete(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt, const fun::HostId& group_id);
  };
} // end of namespace LanS2C

} // end of namespace fun
