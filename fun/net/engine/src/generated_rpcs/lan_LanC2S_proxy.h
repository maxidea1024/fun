/**
 * Auto-generated by IDL Compiler (2.1.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#pragma once

#include "FUN.h"
#include "lan_defs.h"
#include "lan_types.h"

namespace fun {
namespace LanC2S
{
  struct Proxy : public fun::RpcProxy
  {
    fun::int32 GetDeclaredRpcCount() const override { return LanC2S::NumRpcFunctions; }
    const fun::RpcId* GetDeclaredRpcIds() const override { return LanC2S::RpcIds::RpcIdList(); }
    const char** GetDeclaredRpcNames() const override { return LanC2S::RpcNames::RpcNameList(); }

    inline bool ReliablePing(fun::HostId rpc_recvfrom) { return ReliablePing(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable); }
    inline bool ReliablePing(fun::HostId rpc_recvfrom, const fun::RpcCallOption& rpc_call_opt) { return ReliablePing(&rpc_recvfrom, 1, rpc_call_opt); }
    template <typename Allocator>
    inline bool ReliablePing(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds) { return ReliablePing(RpcRemoteIds, fun::RpcCallOption::Reliable); }
    template <typename Allocator>
    inline bool ReliablePing(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& rpc_call_opt) { return ReliablePing(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), rpc_call_opt); }
    inline bool ReliablePing(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount) { return ReliablePing(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable); }
    bool ReliablePing(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt);

    inline bool P2PGroup_MemberJoin_Ack(fun::HostId rpc_recvfrom, const fun::HostId& group_id, const fun::HostId& added_member_id, const fun::uint32 event_id) { return P2PGroup_MemberJoin_Ack(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, group_id, added_member_id, event_id); }
    inline bool P2PGroup_MemberJoin_Ack(fun::HostId rpc_recvfrom, const fun::RpcCallOption& rpc_call_opt, const fun::HostId& group_id, const fun::HostId& added_member_id, const fun::uint32 event_id) { return P2PGroup_MemberJoin_Ack(&rpc_recvfrom, 1, rpc_call_opt, group_id, added_member_id, event_id); }
    template <typename Allocator>
    inline bool P2PGroup_MemberJoin_Ack(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::HostId& group_id, const fun::HostId& added_member_id, const fun::uint32 event_id) { return P2PGroup_MemberJoin_Ack(RpcRemoteIds, fun::RpcCallOption::Reliable, group_id, added_member_id, event_id); }
    template <typename Allocator>
    inline bool P2PGroup_MemberJoin_Ack(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& rpc_call_opt, const fun::HostId& group_id, const fun::HostId& added_member_id, const fun::uint32 event_id) { return P2PGroup_MemberJoin_Ack(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), rpc_call_opt, group_id, added_member_id, event_id); }
    inline bool P2PGroup_MemberJoin_Ack(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::HostId& group_id, const fun::HostId& added_member_id, const fun::uint32 event_id) { return P2PGroup_MemberJoin_Ack(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, group_id, added_member_id, event_id); }
    bool P2PGroup_MemberJoin_Ack(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt, const fun::HostId& group_id, const fun::HostId& added_member_id, const fun::uint32 event_id);

    inline bool ReportP2PPeerPing(fun::HostId rpc_recvfrom, const fun::HostId& peer_id, const fun::uint32 recent_ping) { return ReportP2PPeerPing(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, peer_id, recent_ping); }
    inline bool ReportP2PPeerPing(fun::HostId rpc_recvfrom, const fun::RpcCallOption& rpc_call_opt, const fun::HostId& peer_id, const fun::uint32 recent_ping) { return ReportP2PPeerPing(&rpc_recvfrom, 1, rpc_call_opt, peer_id, recent_ping); }
    template <typename Allocator>
    inline bool ReportP2PPeerPing(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::HostId& peer_id, const fun::uint32 recent_ping) { return ReportP2PPeerPing(RpcRemoteIds, fun::RpcCallOption::Reliable, peer_id, recent_ping); }
    template <typename Allocator>
    inline bool ReportP2PPeerPing(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& rpc_call_opt, const fun::HostId& peer_id, const fun::uint32 recent_ping) { return ReportP2PPeerPing(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), rpc_call_opt, peer_id, recent_ping); }
    inline bool ReportP2PPeerPing(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::HostId& peer_id, const fun::uint32 recent_ping) { return ReportP2PPeerPing(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, peer_id, recent_ping); }
    bool ReportP2PPeerPing(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt, const fun::HostId& peer_id, const fun::uint32 recent_ping);

    inline bool ShutdownTcp(fun::HostId rpc_recvfrom, const fun::ByteArray& comment) { return ShutdownTcp(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, comment); }
    inline bool ShutdownTcp(fun::HostId rpc_recvfrom, const fun::RpcCallOption& rpc_call_opt, const fun::ByteArray& comment) { return ShutdownTcp(&rpc_recvfrom, 1, rpc_call_opt, comment); }
    template <typename Allocator>
    inline bool ShutdownTcp(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::ByteArray& comment) { return ShutdownTcp(RpcRemoteIds, fun::RpcCallOption::Reliable, comment); }
    template <typename Allocator>
    inline bool ShutdownTcp(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& rpc_call_opt, const fun::ByteArray& comment) { return ShutdownTcp(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), rpc_call_opt, comment); }
    inline bool ShutdownTcp(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::ByteArray& comment) { return ShutdownTcp(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, comment); }
    bool ShutdownTcp(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt, const fun::ByteArray& comment);

    inline bool ShutdownTcpHandshake(fun::HostId rpc_recvfrom) { return ShutdownTcpHandshake(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable); }
    inline bool ShutdownTcpHandshake(fun::HostId rpc_recvfrom, const fun::RpcCallOption& rpc_call_opt) { return ShutdownTcpHandshake(&rpc_recvfrom, 1, rpc_call_opt); }
    template <typename Allocator>
    inline bool ShutdownTcpHandshake(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds) { return ShutdownTcpHandshake(RpcRemoteIds, fun::RpcCallOption::Reliable); }
    template <typename Allocator>
    inline bool ShutdownTcpHandshake(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& rpc_call_opt) { return ShutdownTcpHandshake(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), rpc_call_opt); }
    inline bool ShutdownTcpHandshake(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount) { return ShutdownTcpHandshake(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable); }
    bool ShutdownTcpHandshake(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt);
  };
} // end of namespace LanC2S

} // end of namespace fun
