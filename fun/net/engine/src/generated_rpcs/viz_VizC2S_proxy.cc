/**
 * Auto-generated by IDL Compiler (2.1.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "viz_VizC2S_proxy.h"
#include "viz.h" // _Args, _PArgs

namespace fun {
namespace VizC2S {

bool Proxy::RequestLogin(const fun::HostId* RpcRemoteIds, const fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt, const fun::String& AuthenticationKey, const fun::HostId& VizOwnerId) {
  fun::MessageOut RpcMessage__;

  // Write RPC function id.
  fun::LiteFormat::Write(RpcMessage__, RpcIds::RequestLogin);

  // Write RPC header.
  fun::RpcHeader::WriteOk(RpcMessage__);

  // Write RPC function arguments.
  fun::FlexFormat::WriteString(RpcMessage__, AuthenticationKey);
  EngineTypes_UserTypeHandlers::Write(RpcMessage__, VizOwnerId);

  if (notify_send_by_proxy_enabled_ && !engine_specific_only_) {
    fun::String ArgsStr__ = TEXT("{");
    ArgsStr__ << TEXT("\"AuthenticationKey\":") << fun::ToString(AuthenticationKey);
    ArgsStr__ << TEXT(",\"VizOwnerId\":") << fun::ToString(VizOwnerId);
    ArgsStr__ << TEXT("}");

    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::RequestLogin(), RpcIds::RequestLogin, *ArgsStr__);
  }
  else {
    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::RequestLogin(), RpcIds::RequestLogin, nullptr);
  }
}

bool Proxy::NotifyCommon_SendRpc(const fun::HostId* RpcRemoteIds, const fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt, const fun::HostIdArray send_to, const fun::VizMessageSummary summary) {
  fun::MessageOut RpcMessage__;

  // Write RPC function id.
  fun::LiteFormat::Write(RpcMessage__, RpcIds::NotifyCommon_SendRpc);

  // Write RPC header.
  fun::RpcHeader::WriteOk(RpcMessage__);

  // Write RPC function arguments.
  EngineTypes_UserTypeHandlers::Write(RpcMessage__, send_to);
  EngineTypes_UserTypeHandlers::Write(RpcMessage__, summary);

  if (notify_send_by_proxy_enabled_ && !engine_specific_only_) {
    fun::String ArgsStr__ = TEXT("{");
    ArgsStr__ << TEXT("\"send_to\":") << fun::ToString(send_to);
    ArgsStr__ << TEXT(",\"summary\":") << fun::ToString(summary);
    ArgsStr__ << TEXT("}");

    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::NotifyCommon_SendRpc(), RpcIds::NotifyCommon_SendRpc, *ArgsStr__);
  }
  else {
    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::NotifyCommon_SendRpc(), RpcIds::NotifyCommon_SendRpc, nullptr);
  }
}

bool Proxy::NotifyCommon_ReceiveRpc(const fun::HostId* RpcRemoteIds, const fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt, const fun::HostId& RecvFrom, const fun::String& rpc_name, const fun::RpcId& rpc_id) {
  fun::MessageOut RpcMessage__;

  // Write RPC function id.
  fun::LiteFormat::Write(RpcMessage__, RpcIds::NotifyCommon_ReceiveRpc);

  // Write RPC header.
  fun::RpcHeader::WriteOk(RpcMessage__);

  // Write RPC function arguments.
  EngineTypes_UserTypeHandlers::Write(RpcMessage__, RecvFrom);
  fun::FlexFormat::WriteString(RpcMessage__, rpc_name);
  EngineTypes_UserTypeHandlers::Write(RpcMessage__, rpc_id);

  if (notify_send_by_proxy_enabled_ && !engine_specific_only_) {
    fun::String ArgsStr__ = TEXT("{");
    ArgsStr__ << TEXT("\"RecvFrom\":") << fun::ToString(RecvFrom);
    ArgsStr__ << TEXT(",\"rpc_name\":") << fun::ToString(rpc_name);
    ArgsStr__ << TEXT(",\"rpc_id\":") << fun::ToString(rpc_id);
    ArgsStr__ << TEXT("}");

    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::NotifyCommon_ReceiveRpc(), RpcIds::NotifyCommon_ReceiveRpc, *ArgsStr__);
  }
  else {
    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::NotifyCommon_ReceiveRpc(), RpcIds::NotifyCommon_ReceiveRpc, nullptr);
  }
}

bool Proxy::NotifyCli_ConnectionState(const fun::HostId* RpcRemoteIds, const fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt, const fun::ConnectionState& ConnectionState) {
  fun::MessageOut RpcMessage__;

  // Write RPC function id.
  fun::LiteFormat::Write(RpcMessage__, RpcIds::NotifyCli_ConnectionState);

  // Write RPC header.
  fun::RpcHeader::WriteOk(RpcMessage__);

  // Write RPC function arguments.
  EngineTypes_UserTypeHandlers::Write(RpcMessage__, ConnectionState);

  if (notify_send_by_proxy_enabled_ && !engine_specific_only_) {
    fun::String ArgsStr__ = TEXT("{");
    ArgsStr__ << TEXT("\"ConnectionState\":") << fun::ToString(ConnectionState);
    ArgsStr__ << TEXT("}");

    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::NotifyCli_ConnectionState(), RpcIds::NotifyCli_ConnectionState, *ArgsStr__);
  }
  else {
    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::NotifyCli_ConnectionState(), RpcIds::NotifyCli_ConnectionState, nullptr);
  }
}

bool Proxy::NotifyCli_Peers_Clear(const fun::HostId* RpcRemoteIds, const fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt) {
  fun::MessageOut RpcMessage__;

  // Write RPC function id.
  fun::LiteFormat::Write(RpcMessage__, RpcIds::NotifyCli_Peers_Clear);

  // Write RPC header.
  fun::RpcHeader::WriteOk(RpcMessage__);

  // No RPC function arguments.

  if (notify_send_by_proxy_enabled_ && !engine_specific_only_) {
    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::NotifyCli_Peers_Clear(), RpcIds::NotifyCli_Peers_Clear, TEXT("{}"));
  }
  else {
    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::NotifyCli_Peers_Clear(), RpcIds::NotifyCli_Peers_Clear, nullptr);
  }
}

bool Proxy::NotifyCli_Peers_AddOrEdit(const fun::HostId* RpcRemoteIds,
                                      const fun::int32 RpcRemoteIdCount,
                                      const fun::RpcCallOption& rpc_call_opt,
                                      const fun::HostId& peer_id) {
  fun::MessageOut RpcMessage__;

  // Write RPC function id.
  fun::LiteFormat::Write(RpcMessage__, RpcIds::NotifyCli_Peers_AddOrEdit);

  // Write RPC header.
  fun::RpcHeader::WriteOk(RpcMessage__);

  // Write RPC function arguments.
  EngineTypes_UserTypeHandlers::Write(RpcMessage__, peer_id);

  if (notify_send_by_proxy_enabled_ && !engine_specific_only_) {
    fun::String ArgsStr__ = TEXT("{");
    ArgsStr__ << TEXT("\"peer_id\":") << fun::ToString(peer_id);
    ArgsStr__ << TEXT("}");

    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::NotifyCli_Peers_AddOrEdit(), RpcIds::NotifyCli_Peers_AddOrEdit, *ArgsStr__);
  }
  else {
    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::NotifyCli_Peers_AddOrEdit(), RpcIds::NotifyCli_Peers_AddOrEdit, nullptr);
  }
}

bool Proxy::NotifySrv_ClientEmpty(const fun::HostId* RpcRemoteIds,
                                  const fun::int32 RpcRemoteIdCount,
                                  const fun::RpcCallOption& rpc_call_opt) {
  fun::MessageOut RpcMessage__;

  // Write RPC function id.
  fun::LiteFormat::Write(RpcMessage__, RpcIds::NotifySrv_ClientEmpty);

  // Write RPC header.
  fun::RpcHeader::WriteOk(RpcMessage__);

  // No RPC function arguments.

  if (notify_send_by_proxy_enabled_ && !engine_specific_only_) {
    return RpcCall( RpcRemoteIds,
                    RpcRemoteIdCount,
                    rpc_call_opt,
                    RpcMessage__,
                    RpcNames::NotifySrv_ClientEmpty(),
                    RpcIds::NotifySrv_ClientEmpty,
                    TEXT("{}"));
  }
  else {
    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::NotifySrv_ClientEmpty(), RpcIds::NotifySrv_ClientEmpty, nullptr);
  }
}

bool Proxy::NotifySrv_Clients_AddOrEdit(const fun::HostId* RpcRemoteIds,
                                        const fun::int32 RpcRemoteIdCount,
                                        const fun::RpcCallOption& rpc_call_opt,
                                        const fun::HostId& client_id) {
  fun::MessageOut RpcMessage__;

  // Write RPC function id.
  fun::LiteFormat::Write(RpcMessage__, RpcIds::NotifySrv_Clients_AddOrEdit);

  // Write RPC header.
  fun::RpcHeader::WriteOk(RpcMessage__);

  // Write RPC function arguments.
  EngineTypes_UserTypeHandlers::Write(RpcMessage__, client_id);

  if (notify_send_by_proxy_enabled_ && !engine_specific_only_) {
    fun::String ArgsStr__ = TEXT("{");
    ArgsStr__ << TEXT("\"client_id\":") << fun::ToString(client_id);
    ArgsStr__ << TEXT("}");

    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::NotifySrv_Clients_AddOrEdit(), RpcIds::NotifySrv_Clients_AddOrEdit, *ArgsStr__);
  }
  else {
    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::NotifySrv_Clients_AddOrEdit(), RpcIds::NotifySrv_Clients_AddOrEdit, nullptr);
  }
}

bool Proxy::NotifySrv_Clients_Remove( const fun::HostId* RpcRemoteIds,
                                      const fun::int32 RpcRemoteIdCount,
                                      const fun::RpcCallOption& rpc_call_opt,
                                      const fun::HostId& client_id) {
  fun::MessageOut RpcMessage__;

  // Write RPC function id.
  fun::LiteFormat::Write(RpcMessage__, RpcIds::NotifySrv_Clients_Remove);

  // Write RPC header.
  fun::RpcHeader::WriteOk(RpcMessage__);

  // Write RPC function arguments.
  EngineTypes_UserTypeHandlers::Write(RpcMessage__, client_id);

  if (notify_send_by_proxy_enabled_ && !engine_specific_only_) {
    fun::String ArgsStr__ = TEXT("{");
    ArgsStr__ << TEXT("\"client_id\":") << fun::ToString(client_id);
    ArgsStr__ << TEXT("}");

    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::NotifySrv_Clients_Remove(), RpcIds::NotifySrv_Clients_Remove, *ArgsStr__);
  }
  else {
    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::NotifySrv_Clients_Remove(), RpcIds::NotifySrv_Clients_Remove, nullptr);
  }
}

} // end of namespace VizC2S
} // end of namespace fun
