/**
 * Auto-generated by IDL Compiler (2.1.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#pragma once

#include "FUN.h"
#include "lan_defs.h"
#include "lan_types.h"

namespace fun {
namespace LanC2S
{
  struct Stub : public fun::RpcStub
  {
    fun::int32 GetDeclaredRpcCount() const override { return LanC2S::NumRpcFunctions; }
    const fun::RpcId* GetDeclaredRpcIds() const override { return LanC2S::RpcIds::RpcIdList(); }
    const char** GetDeclaredRpcNames() const override { return LanC2S::RpcNames::RpcNameList(); }

    // ReliablePing
    virtual bool ReliablePing(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) { return false; }
    #define DECLARE_RPCSTUB_LanC2S_ReliablePing bool ReliablePing(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) override;
    #define IMPLEMENT_RPCSTUB_LanC2S_ReliablePing(TClass) bool TClass::ReliablePing(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)> ReliablePingFunctionType;
    ReliablePingFunctionType OnReliablePing;

    // P2PGroup_MemberJoin_Ack
    virtual bool P2PGroup_MemberJoin_Ack(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& group_id, const fun::HostId& added_member_id, const fun::uint32 event_id) { return false; }
    #define DECLARE_RPCSTUB_LanC2S_P2PGroup_MemberJoin_Ack bool P2PGroup_MemberJoin_Ack(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& group_id, const fun::HostId& added_member_id, const fun::uint32 event_id) override;
    #define IMPLEMENT_RPCSTUB_LanC2S_P2PGroup_MemberJoin_Ack(TClass) bool TClass::P2PGroup_MemberJoin_Ack(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& group_id, const fun::HostId& added_member_id, const fun::uint32 event_id)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& /* group_id */, const fun::HostId& /* added_member_id */, const fun::uint32 /* event_id */)> P2PGroup_MemberJoin_AckFunctionType;
    P2PGroup_MemberJoin_AckFunctionType OnP2PGroup_MemberJoin_Ack;

    // ReportP2PPeerPing
    virtual bool ReportP2PPeerPing(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& peer_id, const fun::uint32 recent_ping) { return false; }
    #define DECLARE_RPCSTUB_LanC2S_ReportP2PPeerPing bool ReportP2PPeerPing(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& peer_id, const fun::uint32 recent_ping) override;
    #define IMPLEMENT_RPCSTUB_LanC2S_ReportP2PPeerPing(TClass) bool TClass::ReportP2PPeerPing(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& peer_id, const fun::uint32 recent_ping)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& /* peer_id */, const fun::uint32 /* recent_ping */)> ReportP2PPeerPingFunctionType;
    ReportP2PPeerPingFunctionType OnReportP2PPeerPing;

    // ShutdownTcp
    virtual bool ShutdownTcp(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::ByteArray& comment) { return false; }
    #define DECLARE_RPCSTUB_LanC2S_ShutdownTcp bool ShutdownTcp(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::ByteArray& comment) override;
    #define IMPLEMENT_RPCSTUB_LanC2S_ShutdownTcp(TClass) bool TClass::ShutdownTcp(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::ByteArray& comment)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::ByteArray& /* comment */)> ShutdownTcpFunctionType;
    ShutdownTcpFunctionType OnShutdownTcp;

    // ShutdownTcpHandshake
    virtual bool ShutdownTcpHandshake(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) { return false; }
    #define DECLARE_RPCSTUB_LanC2S_ShutdownTcpHandshake bool ShutdownTcpHandshake(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) override;
    #define IMPLEMENT_RPCSTUB_LanC2S_ShutdownTcpHandshake(TClass) bool TClass::ShutdownTcpHandshake(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)> ShutdownTcpHandshakeFunctionType;
    ShutdownTcpHandshakeFunctionType OnShutdownTcpHandshake;

    // RpcStub interface
    bool ProcessReceivedMessage(fun::ReceivedMessage& received_msg, void* host_tag) override;
  };

} // end of namespace LanC2S

} // end of namespace fun
