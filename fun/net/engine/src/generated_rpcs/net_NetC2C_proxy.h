/**
 * Auto-generated by IDL Compiler (2.1.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#pragma once

#include "FUN.h"
#include "net_defs.h"
#include "net_types.h"

namespace fun {
namespace NetC2C
{
  struct Proxy : public fun::RpcProxy
  {
    fun::int32 GetDeclaredRpcCount() const override { return NetC2C::NumRpcFunctions; }
    const fun::RpcId* GetDeclaredRpcIds() const override { return NetC2C::RpcIds::RpcIdList(); }
    const char** GetDeclaredRpcNames() const override { return NetC2C::RpcNames::RpcNameList(); }

    inline bool SuppressP2PHolepunchTrial(fun::HostId rpc_recvfrom) { return SuppressP2PHolepunchTrial(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable); }
    inline bool SuppressP2PHolepunchTrial(fun::HostId rpc_recvfrom, const fun::RpcCallOption& rpc_call_opt) { return SuppressP2PHolepunchTrial(&rpc_recvfrom, 1, rpc_call_opt); }
    template <typename Allocator>
    inline bool SuppressP2PHolepunchTrial(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds) { return SuppressP2PHolepunchTrial(RpcRemoteIds, fun::RpcCallOption::Reliable); }
    template <typename Allocator>
    inline bool SuppressP2PHolepunchTrial(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& rpc_call_opt) { return SuppressP2PHolepunchTrial(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), rpc_call_opt); }
    inline bool SuppressP2PHolepunchTrial(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount) { return SuppressP2PHolepunchTrial(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable); }
    bool SuppressP2PHolepunchTrial(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt);

    inline bool ReportUdpMessageCount(fun::HostId rpc_recvfrom, const fun::uint32 UdpSuccessCount) { return ReportUdpMessageCount(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, UdpSuccessCount); }
    inline bool ReportUdpMessageCount(fun::HostId rpc_recvfrom, const fun::RpcCallOption& rpc_call_opt, const fun::uint32 UdpSuccessCount) { return ReportUdpMessageCount(&rpc_recvfrom, 1, rpc_call_opt, UdpSuccessCount); }
    template <typename Allocator>
    inline bool ReportUdpMessageCount(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::uint32 UdpSuccessCount) { return ReportUdpMessageCount(RpcRemoteIds, fun::RpcCallOption::Reliable, UdpSuccessCount); }
    template <typename Allocator>
    inline bool ReportUdpMessageCount(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& rpc_call_opt, const fun::uint32 UdpSuccessCount) { return ReportUdpMessageCount(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), rpc_call_opt, UdpSuccessCount); }
    inline bool ReportUdpMessageCount(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::uint32 UdpSuccessCount) { return ReportUdpMessageCount(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, UdpSuccessCount); }
    bool ReportUdpMessageCount(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt, const fun::uint32 UdpSuccessCount);

    inline bool ReportServerTimeAndFrameRateAndPing(fun::HostId rpc_recvfrom, const double client_local_time, const double recent_frame_rate) { return ReportServerTimeAndFrameRateAndPing(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, client_local_time, recent_frame_rate); }
    inline bool ReportServerTimeAndFrameRateAndPing(fun::HostId rpc_recvfrom, const fun::RpcCallOption& rpc_call_opt, const double client_local_time, const double recent_frame_rate) { return ReportServerTimeAndFrameRateAndPing(&rpc_recvfrom, 1, rpc_call_opt, client_local_time, recent_frame_rate); }
    template <typename Allocator>
    inline bool ReportServerTimeAndFrameRateAndPing(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const double client_local_time, const double recent_frame_rate) { return ReportServerTimeAndFrameRateAndPing(RpcRemoteIds, fun::RpcCallOption::Reliable, client_local_time, recent_frame_rate); }
    template <typename Allocator>
    inline bool ReportServerTimeAndFrameRateAndPing(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& rpc_call_opt, const double client_local_time, const double recent_frame_rate) { return ReportServerTimeAndFrameRateAndPing(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), rpc_call_opt, client_local_time, recent_frame_rate); }
    inline bool ReportServerTimeAndFrameRateAndPing(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const double client_local_time, const double recent_frame_rate) { return ReportServerTimeAndFrameRateAndPing(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, client_local_time, recent_frame_rate); }
    bool ReportServerTimeAndFrameRateAndPing(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt, const double client_local_time, const double recent_frame_rate);

    inline bool ReportServerTimeAndFrameRateAndPong(fun::HostId rpc_recvfrom, const double OldClientLocalTime, const double server_local_time, const double server_udp_recent_ping, const double recent_frame_rate) { return ReportServerTimeAndFrameRateAndPong(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, OldClientLocalTime, server_local_time, server_udp_recent_ping, recent_frame_rate); }
    inline bool ReportServerTimeAndFrameRateAndPong(fun::HostId rpc_recvfrom, const fun::RpcCallOption& rpc_call_opt, const double OldClientLocalTime, const double server_local_time, const double server_udp_recent_ping, const double recent_frame_rate) { return ReportServerTimeAndFrameRateAndPong(&rpc_recvfrom, 1, rpc_call_opt, OldClientLocalTime, server_local_time, server_udp_recent_ping, recent_frame_rate); }
    template <typename Allocator>
    inline bool ReportServerTimeAndFrameRateAndPong(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const double OldClientLocalTime, const double server_local_time, const double server_udp_recent_ping, const double recent_frame_rate) { return ReportServerTimeAndFrameRateAndPong(RpcRemoteIds, fun::RpcCallOption::Reliable, OldClientLocalTime, server_local_time, server_udp_recent_ping, recent_frame_rate); }
    template <typename Allocator>
    inline bool ReportServerTimeAndFrameRateAndPong(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& rpc_call_opt, const double OldClientLocalTime, const double server_local_time, const double server_udp_recent_ping, const double recent_frame_rate) { return ReportServerTimeAndFrameRateAndPong(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), rpc_call_opt, OldClientLocalTime, server_local_time, server_udp_recent_ping, recent_frame_rate); }
    inline bool ReportServerTimeAndFrameRateAndPong(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const double OldClientLocalTime, const double server_local_time, const double server_udp_recent_ping, const double recent_frame_rate) { return ReportServerTimeAndFrameRateAndPong(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, OldClientLocalTime, server_local_time, server_udp_recent_ping, recent_frame_rate); }
    bool ReportServerTimeAndFrameRateAndPong(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt, const double OldClientLocalTime, const double server_local_time, const double server_udp_recent_ping, const double recent_frame_rate);
  };
} // end of namespace NetC2C

} // end of namespace fun
