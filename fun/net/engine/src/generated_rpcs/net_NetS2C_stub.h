/**
 * Auto-generated by IDL Compiler (2.1.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#pragma once

#include "FUN.h"
#include "net_defs.h"
#include "net_types.h"

namespace fun {
namespace NetS2C
{
  class Stub : public fun::RpcStub {
   public:
    fun::int32 GetDeclaredRpcCount() const override { return NetS2C::NumRpcFunctions; }
    const fun::RpcId* GetDeclaredRpcIds() const override { return NetS2C::RpcIds::RpcIdList(); }
    const char** GetDeclaredRpcNames() const override { return NetS2C::RpcNames::RpcNameList(); }

    // P2PGroup_MemberJoin
    virtual bool P2PGroup_MemberJoin(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& group_id, const fun::HostId& member_id, const fun::ByteArray& custom_field, const fun::uint32 event_id, const fun::ByteArray& P2PAESSessionKey, const fun::ByteArray& P2PRC4SessionKey, const fun::FrameNumber& p2p_first_frame_number, const fun::Uuid& ConnectionTag, const bool direct_p2p_enabled, const fun::int32 BindPort) { return false; }
    #define DECLARE_RPCSTUB_NetS2C_P2PGroup_MemberJoin bool P2PGroup_MemberJoin(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& group_id, const fun::HostId& member_id, const fun::ByteArray& custom_field, const fun::uint32 event_id, const fun::ByteArray& P2PAESSessionKey, const fun::ByteArray& P2PRC4SessionKey, const fun::FrameNumber& p2p_first_frame_number, const fun::Uuid& ConnectionTag, const bool direct_p2p_enabled, const fun::int32 BindPort) override;
    #define IMPLEMENT_RPCSTUB_NetS2C_P2PGroup_MemberJoin(TClass) bool TClass::P2PGroup_MemberJoin(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& group_id, const fun::HostId& member_id, const fun::ByteArray& custom_field, const fun::uint32 event_id, const fun::ByteArray& P2PAESSessionKey, const fun::ByteArray& P2PRC4SessionKey, const fun::FrameNumber& p2p_first_frame_number, const fun::Uuid& ConnectionTag, const bool direct_p2p_enabled, const fun::int32 BindPort)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& /* group_id */, const fun::HostId& /* member_id */, const fun::ByteArray& /* custom_field */, const fun::uint32 /* event_id */, const fun::ByteArray& /* P2PAESSessionKey */, const fun::ByteArray& /* P2PRC4SessionKey */, const fun::FrameNumber& /* p2p_first_frame_number */, const fun::Uuid& /* ConnectionTag */, const bool /* direct_p2p_enabled */, const fun::int32 /* BindPort */)> P2PGroup_MemberJoinFunctionType;
    P2PGroup_MemberJoinFunctionType OnP2PGroup_MemberJoin;

    // P2PGroup_MemberJoin_Unencrypted
    virtual bool P2PGroup_MemberJoin_Unencrypted(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& group_id, const fun::HostId& member_id, const fun::ByteArray& custom_field, const fun::uint32 event_id, const fun::FrameNumber& p2p_first_frame_number, const fun::Uuid& ConnectionTag, const bool direct_p2p_enabled, const fun::int32 BindPort) { return false; }
    #define DECLARE_RPCSTUB_NetS2C_P2PGroup_MemberJoin_Unencrypted bool P2PGroup_MemberJoin_Unencrypted(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& group_id, const fun::HostId& member_id, const fun::ByteArray& custom_field, const fun::uint32 event_id, const fun::FrameNumber& p2p_first_frame_number, const fun::Uuid& ConnectionTag, const bool direct_p2p_enabled, const fun::int32 BindPort) override;
    #define IMPLEMENT_RPCSTUB_NetS2C_P2PGroup_MemberJoin_Unencrypted(TClass) bool TClass::P2PGroup_MemberJoin_Unencrypted(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& group_id, const fun::HostId& member_id, const fun::ByteArray& custom_field, const fun::uint32 event_id, const fun::FrameNumber& p2p_first_frame_number, const fun::Uuid& ConnectionTag, const bool direct_p2p_enabled, const fun::int32 BindPort)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& /* group_id */, const fun::HostId& /* member_id */, const fun::ByteArray& /* custom_field */, const fun::uint32 /* event_id */, const fun::FrameNumber& /* p2p_first_frame_number */, const fun::Uuid& /* ConnectionTag */, const bool /* direct_p2p_enabled */, const fun::int32 /* BindPort */)> P2PGroup_MemberJoin_UnencryptedFunctionType;
    P2PGroup_MemberJoin_UnencryptedFunctionType OnP2PGroup_MemberJoin_Unencrypted;

    // P2PRecycleComplete
    virtual bool P2PRecycleComplete(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& peer_id, const bool bRecycled, const fun::InetAddress internal_addr, const fun::InetAddress external_addr, const fun::InetAddress SendAddr, const fun::InetAddress RecvAddr) { return false; }
    #define DECLARE_RPCSTUB_NetS2C_P2PRecycleComplete bool P2PRecycleComplete(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& peer_id, const bool bRecycled, const fun::InetAddress internal_addr, const fun::InetAddress external_addr, const fun::InetAddress SendAddr, const fun::InetAddress RecvAddr) override;
    #define IMPLEMENT_RPCSTUB_NetS2C_P2PRecycleComplete(TClass) bool TClass::P2PRecycleComplete(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& peer_id, const bool bRecycled, const fun::InetAddress internal_addr, const fun::InetAddress external_addr, const fun::InetAddress SendAddr, const fun::InetAddress RecvAddr)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& /* peer_id */, const bool /* bRecycled */, const fun::InetAddress /* internal_addr */, const fun::InetAddress /* external_addr */, const fun::InetAddress /* SendAddr */, const fun::InetAddress /* RecvAddr */)> P2PRecycleCompleteFunctionType;
    P2PRecycleCompleteFunctionType OnP2PRecycleComplete;

    // RequestP2PHolepunch
    virtual bool RequestP2PHolepunch(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& peer_id, const fun::InetAddress internal_addr, const fun::InetAddress external_addr) { return false; }
    #define DECLARE_RPCSTUB_NetS2C_RequestP2PHolepunch bool RequestP2PHolepunch(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& peer_id, const fun::InetAddress internal_addr, const fun::InetAddress external_addr) override;
    #define IMPLEMENT_RPCSTUB_NetS2C_RequestP2PHolepunch(TClass) bool TClass::RequestP2PHolepunch(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& peer_id, const fun::InetAddress internal_addr, const fun::InetAddress external_addr)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& /* peer_id */, const fun::InetAddress /* internal_addr */, const fun::InetAddress /* external_addr */)> RequestP2PHolepunchFunctionType;
    RequestP2PHolepunchFunctionType OnRequestP2PHolepunch;

    // P2P_NotifyDirectP2PDisconnected2
    virtual bool P2P_NotifyDirectP2PDisconnected2(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& peer_id, const fun::ResultCode& reason) { return false; }
    #define DECLARE_RPCSTUB_NetS2C_P2P_NotifyDirectP2PDisconnected2 bool P2P_NotifyDirectP2PDisconnected2(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& peer_id, const fun::ResultCode& reason) override;
    #define IMPLEMENT_RPCSTUB_NetS2C_P2P_NotifyDirectP2PDisconnected2(TClass) bool TClass::P2P_NotifyDirectP2PDisconnected2(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& peer_id, const fun::ResultCode& reason)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& /* peer_id */, const fun::ResultCode& /* reason */)> P2P_NotifyDirectP2PDisconnected2FunctionType;
    P2P_NotifyDirectP2PDisconnected2FunctionType OnP2P_NotifyDirectP2PDisconnected2;

    // P2PGroup_MemberLeave
    virtual bool P2PGroup_MemberLeave(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& member_id, const fun::HostId& group_id) { return false; }
    #define DECLARE_RPCSTUB_NetS2C_P2PGroup_MemberLeave bool P2PGroup_MemberLeave(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& member_id, const fun::HostId& group_id) override;
    #define IMPLEMENT_RPCSTUB_NetS2C_P2PGroup_MemberLeave(TClass) bool TClass::P2PGroup_MemberLeave(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& member_id, const fun::HostId& group_id)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& /* member_id */, const fun::HostId& /* group_id */)> P2PGroup_MemberLeaveFunctionType;
    P2PGroup_MemberLeaveFunctionType OnP2PGroup_MemberLeave;

    // NotifyDirectP2PEstablish
    virtual bool NotifyDirectP2PEstablish(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& A0, const fun::HostId& B0, const fun::InetAddress X0, const fun::InetAddress Y0, const fun::InetAddress Z0, const fun::InetAddress W0) { return false; }
    #define DECLARE_RPCSTUB_NetS2C_NotifyDirectP2PEstablish bool NotifyDirectP2PEstablish(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& A0, const fun::HostId& B0, const fun::InetAddress X0, const fun::InetAddress Y0, const fun::InetAddress Z0, const fun::InetAddress W0) override;
    #define IMPLEMENT_RPCSTUB_NetS2C_NotifyDirectP2PEstablish(TClass) bool TClass::NotifyDirectP2PEstablish(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& A0, const fun::HostId& B0, const fun::InetAddress X0, const fun::InetAddress Y0, const fun::InetAddress Z0, const fun::InetAddress W0)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& /* A0 */, const fun::HostId& /* B0 */, const fun::InetAddress /* X0 */, const fun::InetAddress /* Y0 */, const fun::InetAddress /* Z0 */, const fun::InetAddress /* W0 */)> NotifyDirectP2PEstablishFunctionType;
    NotifyDirectP2PEstablishFunctionType OnNotifyDirectP2PEstablish;

    // ReliablePong
    virtual bool ReliablePong(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) { return false; }
    #define DECLARE_RPCSTUB_NetS2C_ReliablePong bool ReliablePong(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) override;
    #define IMPLEMENT_RPCSTUB_NetS2C_ReliablePong(TClass) bool TClass::ReliablePong(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)> ReliablePongFunctionType;
    ReliablePongFunctionType OnReliablePong;

    // EnableIntraLogging
    virtual bool EnableIntraLogging(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) { return false; }
    #define DECLARE_RPCSTUB_NetS2C_EnableIntraLogging bool EnableIntraLogging(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) override;
    #define IMPLEMENT_RPCSTUB_NetS2C_EnableIntraLogging(TClass) bool TClass::EnableIntraLogging(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)> EnableIntraLoggingFunctionType;
    EnableIntraLoggingFunctionType OnEnableIntraLogging;

    // DisableIntraLogging
    virtual bool DisableIntraLogging(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) { return false; }
    #define DECLARE_RPCSTUB_NetS2C_DisableIntraLogging bool DisableIntraLogging(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) override;
    #define IMPLEMENT_RPCSTUB_NetS2C_DisableIntraLogging(TClass) bool TClass::DisableIntraLogging(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)> DisableIntraLoggingFunctionType;
    DisableIntraLoggingFunctionType OnDisableIntraLogging;

    // NotifyUdpToTcpFallbackByServer
    virtual bool NotifyUdpToTcpFallbackByServer(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) { return false; }
    #define DECLARE_RPCSTUB_NetS2C_NotifyUdpToTcpFallbackByServer bool NotifyUdpToTcpFallbackByServer(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) override;
    #define IMPLEMENT_RPCSTUB_NetS2C_NotifyUdpToTcpFallbackByServer(TClass) bool TClass::NotifyUdpToTcpFallbackByServer(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)> NotifyUdpToTcpFallbackByServerFunctionType;
    NotifyUdpToTcpFallbackByServerFunctionType OnNotifyUdpToTcpFallbackByServer;

    // NotifySpeedHackDetectorEnabled
    virtual bool NotifySpeedHackDetectorEnabled(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const bool bEnabled) { return false; }
    #define DECLARE_RPCSTUB_NetS2C_NotifySpeedHackDetectorEnabled bool NotifySpeedHackDetectorEnabled(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const bool bEnabled) override;
    #define IMPLEMENT_RPCSTUB_NetS2C_NotifySpeedHackDetectorEnabled(TClass) bool TClass::NotifySpeedHackDetectorEnabled(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const bool bEnabled)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const bool /* bEnabled */)> NotifySpeedHackDetectorEnabledFunctionType;
    NotifySpeedHackDetectorEnabledFunctionType OnNotifySpeedHackDetectorEnabled;

    // ShutdownTcpAck
    virtual bool ShutdownTcpAck(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) { return false; }
    #define DECLARE_RPCSTUB_NetS2C_ShutdownTcpAck bool ShutdownTcpAck(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) override;
    #define IMPLEMENT_RPCSTUB_NetS2C_ShutdownTcpAck(TClass) bool TClass::ShutdownTcpAck(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)> ShutdownTcpAckFunctionType;
    ShutdownTcpAckFunctionType OnShutdownTcpAck;

    // RequestAutoPrune
    virtual bool RequestAutoPrune(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) { return false; }
    #define DECLARE_RPCSTUB_NetS2C_RequestAutoPrune bool RequestAutoPrune(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) override;
    #define IMPLEMENT_RPCSTUB_NetS2C_RequestAutoPrune(TClass) bool TClass::RequestAutoPrune(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)> RequestAutoPruneFunctionType;
    RequestAutoPruneFunctionType OnRequestAutoPrune;

    // RenewP2PConnectionState
    virtual bool RenewP2PConnectionState(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& peer_id) { return false; }
    #define DECLARE_RPCSTUB_NetS2C_RenewP2PConnectionState bool RenewP2PConnectionState(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& peer_id) override;
    #define IMPLEMENT_RPCSTUB_NetS2C_RenewP2PConnectionState(TClass) bool TClass::RenewP2PConnectionState(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& peer_id)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& /* peer_id */)> RenewP2PConnectionStateFunctionType;
    RenewP2PConnectionStateFunctionType OnRenewP2PConnectionState;

    // NewDirectP2PConnection
    virtual bool NewDirectP2PConnection(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& peer_id) { return false; }
    #define DECLARE_RPCSTUB_NetS2C_NewDirectP2PConnection bool NewDirectP2PConnection(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& peer_id) override;
    #define IMPLEMENT_RPCSTUB_NetS2C_NewDirectP2PConnection(TClass) bool TClass::NewDirectP2PConnection(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& peer_id)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& /* peer_id */)> NewDirectP2PConnectionFunctionType;
    NewDirectP2PConnectionFunctionType OnNewDirectP2PConnection;

    // RequestMeasureSendSpeed
    virtual bool RequestMeasureSendSpeed(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const bool bEnabled) { return false; }
    #define DECLARE_RPCSTUB_NetS2C_RequestMeasureSendSpeed bool RequestMeasureSendSpeed(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const bool bEnabled) override;
    #define IMPLEMENT_RPCSTUB_NetS2C_RequestMeasureSendSpeed(TClass) bool TClass::RequestMeasureSendSpeed(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const bool bEnabled)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const bool /* bEnabled */)> RequestMeasureSendSpeedFunctionType;
    RequestMeasureSendSpeedFunctionType OnRequestMeasureSendSpeed;

    // S2C_RequestCreateUdpSocket
    virtual bool S2C_RequestCreateUdpSocket(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::NamedInetAddress& ServerUdpAddr) { return false; }
    #define DECLARE_RPCSTUB_NetS2C_S2C_RequestCreateUdpSocket bool S2C_RequestCreateUdpSocket(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::NamedInetAddress& ServerUdpAddr) override;
    #define IMPLEMENT_RPCSTUB_NetS2C_S2C_RequestCreateUdpSocket(TClass) bool TClass::S2C_RequestCreateUdpSocket(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::NamedInetAddress& ServerUdpAddr)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::NamedInetAddress& /* ServerUdpAddr */)> S2C_RequestCreateUdpSocketFunctionType;
    S2C_RequestCreateUdpSocketFunctionType OnS2C_RequestCreateUdpSocket;

    // S2C_CreateUdpSocketAck
    virtual bool S2C_CreateUdpSocketAck(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const bool bOk, const fun::NamedInetAddress& ServerUdpAddr) { return false; }
    #define DECLARE_RPCSTUB_NetS2C_S2C_CreateUdpSocketAck bool S2C_CreateUdpSocketAck(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const bool bOk, const fun::NamedInetAddress& ServerUdpAddr) override;
    #define IMPLEMENT_RPCSTUB_NetS2C_S2C_CreateUdpSocketAck(TClass) bool TClass::S2C_CreateUdpSocketAck(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const bool bOk, const fun::NamedInetAddress& ServerUdpAddr)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const bool /* bOk */, const fun::NamedInetAddress& /* ServerUdpAddr */)> S2C_CreateUdpSocketAckFunctionType;
    S2C_CreateUdpSocketAckFunctionType OnS2C_CreateUdpSocketAck;

    // RpcStub interface
    bool ProcessReceivedMessage(fun::ReceivedMessage& received_msg, void* host_tag) override;
  };

} // end of namespace NetS2C

} // end of namespace fun
