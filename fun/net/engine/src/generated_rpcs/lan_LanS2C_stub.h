/**
 * Auto-generated by IDL Compiler (2.1.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#pragma once

#include "FUN.h"
#include "lan_defs.h"
#include "lan_types.h"

namespace fun {
namespace LanS2C
{
  struct Stub : public fun::RpcStub
  {
    fun::int32 GetDeclaredRpcCount() const override { return LanS2C::NumRpcFunctions; }
    const fun::RpcId* GetDeclaredRpcIds() const override { return LanS2C::RpcIds::RpcIdList(); }
    const char** GetDeclaredRpcNames() const override { return LanS2C::RpcNames::RpcNameList(); }

    // P2PGroup_MemberJoin
    virtual bool P2PGroup_MemberJoin(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& group_id, const fun::HostId& member_id, const fun::ByteArray& custom_field, const fun::uint32 event_id, const fun::ByteArray& P2PAESSessionKey, const fun::ByteArray& P2PRC4SessionKey, const fun::Uuid& ConnectionTag) { return false; }
    #define DECLARE_RPCSTUB_LanS2C_P2PGroup_MemberJoin bool P2PGroup_MemberJoin(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& group_id, const fun::HostId& member_id, const fun::ByteArray& custom_field, const fun::uint32 event_id, const fun::ByteArray& P2PAESSessionKey, const fun::ByteArray& P2PRC4SessionKey, const fun::Uuid& ConnectionTag) override;
    #define IMPLEMENT_RPCSTUB_LanS2C_P2PGroup_MemberJoin(TClass) bool TClass::P2PGroup_MemberJoin(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& group_id, const fun::HostId& member_id, const fun::ByteArray& custom_field, const fun::uint32 event_id, const fun::ByteArray& P2PAESSessionKey, const fun::ByteArray& P2PRC4SessionKey, const fun::Uuid& ConnectionTag)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& /* group_id */, const fun::HostId& /* member_id */, const fun::ByteArray& /* custom_field */, const fun::uint32 /* event_id */, const fun::ByteArray& /* P2PAESSessionKey */, const fun::ByteArray& /* P2PRC4SessionKey */, const fun::Uuid& /* ConnectionTag */)> P2PGroup_MemberJoinFunctionType;
    P2PGroup_MemberJoinFunctionType OnP2PGroup_MemberJoin;

    // P2PGroup_MemberJoin_Unencrypted
    virtual bool P2PGroup_MemberJoin_Unencrypted(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& group_id, const fun::HostId& member_id, const fun::ByteArray& custom_field, const fun::uint32 event_id, const fun::Uuid& ConnectionTag) { return false; }
    #define DECLARE_RPCSTUB_LanS2C_P2PGroup_MemberJoin_Unencrypted bool P2PGroup_MemberJoin_Unencrypted(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& group_id, const fun::HostId& member_id, const fun::ByteArray& custom_field, const fun::uint32 event_id, const fun::Uuid& ConnectionTag) override;
    #define IMPLEMENT_RPCSTUB_LanS2C_P2PGroup_MemberJoin_Unencrypted(TClass) bool TClass::P2PGroup_MemberJoin_Unencrypted(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& group_id, const fun::HostId& member_id, const fun::ByteArray& custom_field, const fun::uint32 event_id, const fun::Uuid& ConnectionTag)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& /* group_id */, const fun::HostId& /* member_id */, const fun::ByteArray& /* custom_field */, const fun::uint32 /* event_id */, const fun::Uuid& /* ConnectionTag */)> P2PGroup_MemberJoin_UnencryptedFunctionType;
    P2PGroup_MemberJoin_UnencryptedFunctionType OnP2PGroup_MemberJoin_Unencrypted;

    // P2PGroup_MemberLeave
    virtual bool P2PGroup_MemberLeave(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& member_id, const fun::HostId& group_id) { return false; }
    #define DECLARE_RPCSTUB_LanS2C_P2PGroup_MemberLeave bool P2PGroup_MemberLeave(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& member_id, const fun::HostId& group_id) override;
    #define IMPLEMENT_RPCSTUB_LanS2C_P2PGroup_MemberLeave(TClass) bool TClass::P2PGroup_MemberLeave(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& member_id, const fun::HostId& group_id)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& /* member_id */, const fun::HostId& /* group_id */)> P2PGroup_MemberLeaveFunctionType;
    P2PGroup_MemberLeaveFunctionType OnP2PGroup_MemberLeave;

    // ReliablePong
    virtual bool ReliablePong(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) { return false; }
    #define DECLARE_RPCSTUB_LanS2C_ReliablePong bool ReliablePong(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) override;
    #define IMPLEMENT_RPCSTUB_LanS2C_ReliablePong(TClass) bool TClass::ReliablePong(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)> ReliablePongFunctionType;
    ReliablePongFunctionType OnReliablePong;

    // P2PConnectStart
    virtual bool P2PConnectStart(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& peer_id, const fun::InetAddress external_addr) { return false; }
    #define DECLARE_RPCSTUB_LanS2C_P2PConnectStart bool P2PConnectStart(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& peer_id, const fun::InetAddress external_addr) override;
    #define IMPLEMENT_RPCSTUB_LanS2C_P2PConnectStart(TClass) bool TClass::P2PConnectStart(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& peer_id, const fun::InetAddress external_addr)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& /* peer_id */, const fun::InetAddress /* external_addr */)> P2PConnectStartFunctionType;
    P2PConnectStartFunctionType OnP2PConnectStart;

    // ShutdownTcpAck
    virtual bool ShutdownTcpAck(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) { return false; }
    #define DECLARE_RPCSTUB_LanS2C_ShutdownTcpAck bool ShutdownTcpAck(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) override;
    #define IMPLEMENT_RPCSTUB_LanS2C_ShutdownTcpAck(TClass) bool TClass::ShutdownTcpAck(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)> ShutdownTcpAckFunctionType;
    ShutdownTcpAckFunctionType OnShutdownTcpAck;

    // RequestAutoPrune
    virtual bool RequestAutoPrune(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) { return false; }
    #define DECLARE_RPCSTUB_LanS2C_RequestAutoPrune bool RequestAutoPrune(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) override;
    #define IMPLEMENT_RPCSTUB_LanS2C_RequestAutoPrune(TClass) bool TClass::RequestAutoPrune(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)> RequestAutoPruneFunctionType;
    RequestAutoPruneFunctionType OnRequestAutoPrune;

    // GroupP2PConnectionComplete
    virtual bool GroupP2PConnectionComplete(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& group_id) { return false; }
    #define DECLARE_RPCSTUB_LanS2C_GroupP2PConnectionComplete bool GroupP2PConnectionComplete(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& group_id) override;
    #define IMPLEMENT_RPCSTUB_LanS2C_GroupP2PConnectionComplete(TClass) bool TClass::GroupP2PConnectionComplete(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& group_id)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& /* group_id */)> GroupP2PConnectionCompleteFunctionType;
    GroupP2PConnectionCompleteFunctionType OnGroupP2PConnectionComplete;

    // RpcStub interface
    bool ProcessReceivedMessage(fun::ReceivedMessage& received_msg, void* host_tag) override;
  };

} // end of namespace LanS2C

} // end of namespace fun
