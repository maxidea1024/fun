/**
 * Auto-generated by IDL Compiler (2.1.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#pragma once

#include "FUN.h"
#include "dump_defs.h"
#include "dump_types.h"

namespace fun {
namespace DumpC2S
{
  struct Proxy : public fun::RpcProxy
  {
    fun::int32 GetDeclaredRpcCount() const override { return DumpC2S::NumRpcFunctions; }
    const fun::RpcId* GetDeclaredRpcIds() const override { return DumpC2S::RpcIds::RpcIdList(); }
    const char** GetDeclaredRpcNames() const override { return DumpC2S::RpcNames::RpcNameList(); }

    inline bool Start(fun::HostId rpc_recvfrom) { return Start(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable); }
    inline bool Start(fun::HostId rpc_recvfrom, const fun::RpcCallOption& rpc_call_opt) { return Start(&rpc_recvfrom, 1, rpc_call_opt); }
    template <typename Allocator>
    inline bool Start(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds) { return Start(RpcRemoteIds, fun::RpcCallOption::Reliable); }
    template <typename Allocator>
    inline bool Start(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& rpc_call_opt) { return Start(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), rpc_call_opt); }
    inline bool Start(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount) { return Start(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable); }
    bool Start(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt);

    inline bool Chunk(fun::HostId rpc_recvfrom, const fun::ByteArray& Chunk) { return Chunk(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, Chunk); }
    inline bool Chunk(fun::HostId rpc_recvfrom, const fun::RpcCallOption& rpc_call_opt, const fun::ByteArray& Chunk) { return Chunk(&rpc_recvfrom, 1, rpc_call_opt, Chunk); }
    template <typename Allocator>
    inline bool Chunk(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::ByteArray& Chunk) { return Chunk(RpcRemoteIds, fun::RpcCallOption::Reliable, Chunk); }
    template <typename Allocator>
    inline bool Chunk(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& rpc_call_opt, const fun::ByteArray& Chunk) { return Chunk(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), rpc_call_opt, Chunk); }
    inline bool Chunk(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::ByteArray& Chunk) { return Chunk(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, Chunk); }
    bool Chunk(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt, const fun::ByteArray& Chunk);

    inline bool End(fun::HostId rpc_recvfrom) { return End(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable); }
    inline bool End(fun::HostId rpc_recvfrom, const fun::RpcCallOption& rpc_call_opt) { return End(&rpc_recvfrom, 1, rpc_call_opt); }
    template <typename Allocator>
    inline bool End(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds) { return End(RpcRemoteIds, fun::RpcCallOption::Reliable); }
    template <typename Allocator>
    inline bool End(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& rpc_call_opt) { return End(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), rpc_call_opt); }
    inline bool End(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount) { return End(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable); }
    bool End(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt);
  };
} // end of namespace DumpC2S

} // end of namespace fun
