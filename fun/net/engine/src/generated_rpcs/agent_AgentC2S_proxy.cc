/**
 * Auto-generated by IDL Compiler (2.1.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "agent_AgentC2S_proxy.h"
#include "agent.h" // _Args, _PArgs

namespace fun {
namespace AgentC2S {

bool Proxy::RequestCredential(const fun::HostId* RpcRemoteIds,
                              const fun::int32 RpcRemoteIdCount,
                              const fun::RpcCallOption& rpc_call_opt,
                              const fun::int32 Cookie) {
  fun::MessageOut RpcMessage__;

  // Write RPC function id.
  fun::LiteFormat::Write(RpcMessage__, RpcIds::RequestCredential);

  // Write RPC header.
  fun::RpcHeader::WriteOk(RpcMessage__);

  // Write RPC function arguments.
  fun::FlexFormat::WriteInt32(RpcMessage__, Cookie);

  if (notify_send_by_proxy_enabled_ && !engine_specific_only_) {
    fun::String ArgsStr__ = "{";
    ArgsStr__ << "\"Cookie\":" << fun::ToString(Cookie);
    ArgsStr__ << "}";

    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::RequestCredential(), RpcIds::RequestCredential, *ArgsStr__);
  } else {
    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::RequestCredential(), RpcIds::RequestCredential, nullptr);
  }
}

bool Proxy::ReportStatusBegin(const fun::HostId* RpcRemoteIds, const fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt, const fun::uint8 Type, const fun::String& text) {
  fun::MessageOut RpcMessage__;

  // Write RPC function id.
  fun::LiteFormat::Write(RpcMessage__, RpcIds::ReportStatusBegin);

  // Write RPC header.
  fun::RpcHeader::WriteOk(RpcMessage__);

  // Write RPC function arguments.
  fun::FlexFormat::WriteFixed8(RpcMessage__, Type);
  fun::FlexFormat::WriteString(RpcMessage__, text);

  if (notify_send_by_proxy_enabled_ && !engine_specific_only_) {
    fun::String ArgsStr__ = TEXT("{");
    ArgsStr__ << TEXT("\"Type\":") << fun::ToString(Type);
    ArgsStr__ << TEXT(",\"text\":") << fun::ToString(text);
    ArgsStr__ << TEXT("}");

    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::ReportStatusBegin(), RpcIds::ReportStatusBegin, *ArgsStr__);
  } else {
    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::ReportStatusBegin(), RpcIds::ReportStatusBegin, nullptr);
  }
}

bool Proxy::ReportStatusValue(const fun::HostId* RpcRemoteIds, const fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt, const fun::String& Key, const fun::String& Value) {
  fun::MessageOut RpcMessage__;

  // Write RPC function id.
  fun::LiteFormat::Write(RpcMessage__, RpcIds::ReportStatusValue);

  // Write RPC header.
  fun::RpcHeader::WriteOk(RpcMessage__);

  // Write RPC function arguments.
  fun::FlexFormat::WriteString(RpcMessage__, Key);
  fun::FlexFormat::WriteString(RpcMessage__, Value);

  if (notify_send_by_proxy_enabled_ && !engine_specific_only_) {
    fun::String ArgsStr__ = TEXT("{");
    ArgsStr__ << TEXT("\"Key\":") << fun::ToString(Key);
    ArgsStr__ << TEXT(",\"Value\":") << fun::ToString(Value);
    ArgsStr__ << TEXT("}");

    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::ReportStatusValue(), RpcIds::ReportStatusValue, *ArgsStr__);
  } else {
    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::ReportStatusValue(), RpcIds::ReportStatusValue, nullptr);
  }
}

bool Proxy::ReportStatusEnd(const fun::HostId* RpcRemoteIds, const fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt) {
  fun::MessageOut RpcMessage__;

  // Write RPC function id.
  fun::LiteFormat::Write(RpcMessage__, RpcIds::ReportStatusEnd);

  // Write RPC header.
  fun::RpcHeader::WriteOk(RpcMessage__);

  // No RPC function arguments.

  if (notify_send_by_proxy_enabled_ && !engine_specific_only_) {
    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::ReportStatusEnd(), RpcIds::ReportStatusEnd, TEXT("{}"));
  } else {
    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::ReportStatusEnd(), RpcIds::ReportStatusEnd, nullptr);
  }
}

bool Proxy::ReportServerAppState(const fun::HostId* RpcRemoteIds, const fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt, const float CpuUserTime, const float CpuKerenlTime, const fun::int32 MemorySize) {
  fun::MessageOut RpcMessage__;

  // Write RPC function id.
  fun::LiteFormat::Write(RpcMessage__, RpcIds::ReportServerAppState);

  // Write RPC header.
  fun::RpcHeader::WriteOk(RpcMessage__);

  // Write RPC function arguments.
  fun::FlexFormat::WriteFloat(RpcMessage__, CpuUserTime);
  fun::FlexFormat::WriteFloat(RpcMessage__, CpuKerenlTime);
  fun::FlexFormat::WriteSInt32(RpcMessage__, MemorySize);

  if (notify_send_by_proxy_enabled_ && !engine_specific_only_) {
    fun::String ArgsStr__ = TEXT("{");
    ArgsStr__ << TEXT("\"CpuUserTime\":") << fun::ToString(CpuUserTime);
    ArgsStr__ << TEXT(",\"CpuKerenlTime\":") << fun::ToString(CpuKerenlTime);
    ArgsStr__ << TEXT(",\"MemorySize\":") << fun::ToString(MemorySize);
    ArgsStr__ << TEXT("}");

    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::ReportServerAppState(), RpcIds::ReportServerAppState, *ArgsStr__);
  } else {
    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::ReportServerAppState(), RpcIds::ReportServerAppState, nullptr);
  }
}

bool Proxy::EventLog(const fun::HostId* RpcRemoteIds, const fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt, const fun::LogCategory& Category, const fun::String& text) {
  fun::MessageOut RpcMessage__;

  // Write RPC function id.
  fun::LiteFormat::Write(RpcMessage__, RpcIds::EventLog);

  // Write RPC header.
  fun::RpcHeader::WriteOk(RpcMessage__);

  // Write RPC function arguments.
  EngineTypes_UserTypeHandlers::Write(RpcMessage__, Category);
  fun::FlexFormat::WriteString(RpcMessage__, text);

  if (notify_send_by_proxy_enabled_ && !engine_specific_only_) {
    fun::String ArgsStr__ = TEXT("{");
    ArgsStr__ << TEXT("\"Category\":") << fun::ToString(Category);
    ArgsStr__ << TEXT(",\"text\":") << fun::ToString(text);
    ArgsStr__ << TEXT("}");

    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::EventLog(), RpcIds::EventLog, *ArgsStr__);
  } else {
    return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::EventLog(), RpcIds::EventLog, nullptr);
  }
}

} // end of namespace AgentC2S
} // end of namespace fun
