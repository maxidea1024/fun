/**
 * Auto-generated by IDL Compiler (2.1.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "net_NetC2C_stub.h"
#include "net.h" // _Args, _PArgs

namespace fun {
namespace NetC2C
{
  bool Stub::ProcessReceivedMessage(fun::ReceivedMessage& received_msg, void* host_tag)
  {
    #define DO_CHECKED__(Expr) { if (!(Expr)) goto Failure__; }

    const fun::HostId RemoteId__ = received_msg.remote_id;
    fun::IMessageIn& ImmutableMessage__ = received_msg.unsafe_message;
    const fun::int32 SavedReadPosition__ = ImmutableMessage__.GetPosition();

    fun::RpcHint RpcHint__;
    RpcHint__.relayed = received_msg.relayed;
    RpcHint__.host_tag = host_tag;

    fun::RpcId RpcId__;
    fun::RpcHeader RpcHeader__;
    DO_CHECKED__(fun::LiteFormat::Read(ImmutableMessage__, RpcId__));
    DO_CHECKED__(RpcHeader__.Read(ImmutableMessage__));

    RpcHint__.result_code = RpcHeader__.result_code;
    RpcHint__.error_message = RpcHeader__.error_message;

    switch ((fun::uint32)RpcId__)
    {
      case (fun::uint32)RpcIds::SuppressP2PHolepunchTrial:
      {
          // No arguments.

          Core->PostCheckReadMessage(ImmutableMessage__, RpcIds::SuppressP2PHolepunchTrial, RpcNames::SuppressP2PHolepunchTrial());

          // NotifyCallFromStub
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->NotifyCallFromStub(RpcIds::SuppressP2PHolepunchTrial, RpcNames::SuppressP2PHolepunchTrial(), TEXT("{}"));
          }

          // Before RPC invocation.
          fun::uint32 InvocationTime__ = 0;
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->BeforeRpcInvocation(fun::BeforeRpcSummary(RpcIds::SuppressP2PHolepunchTrial, RpcNames::SuppressP2PHolepunchTrial(), RemoteId__, host_tag));
            InvocationTime__ = fun::Clock::Milliseconds();
          }

          bool bIsImplemented__ = false;
          // First, try function object.
          if ((bool)OnSuppressP2PHolepunchTrial)
          {
            bIsImplemented__ = OnSuppressP2PHolepunchTrial(RemoteId__, RpcHint__);
          }
          // Second, call derived stub function.
          else
          {
            bIsImplemented__ = SuppressP2PHolepunchTrial(RemoteId__, RpcHint__);
          }

          if (!bIsImplemented__)
          {
            Core->ShowNotImplementedRpcWarning(RpcIds::SuppressP2PHolepunchTrial, RpcNames::SuppressP2PHolepunchTrial());
          }

          // After RPC invocation.
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->AfterRpcInvocation(fun::AfterRpcSummary(RpcIds::SuppressP2PHolepunchTrial, RpcNames::SuppressP2PHolepunchTrial(), RemoteId__, host_tag, fun::Clock::Milliseconds() - InvocationTime__));
          }

          return true;
      }

      case (fun::uint32)RpcIds::ReportUdpMessageCount:
      {
          // Declare arguments.
          fun::uint32 UdpSuccessCount = 0;

          // Read arguments.
          if (RpcHint__.result_code == 0)
          {
            DO_CHECKED__(fun::FlexFormat::ReadUInt32(ImmutableMessage__, UdpSuccessCount));
          }

          Core->PostCheckReadMessage(ImmutableMessage__, RpcIds::ReportUdpMessageCount, RpcNames::ReportUdpMessageCount());

          // NotifyCallFromStub
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            fun::String ArgsStr__ = TEXT("{");
            ArgsStr__ += TEXT("\"UdpSuccessCount\":") + fun::ToString(UdpSuccessCount);
            ArgsStr__ += TEXT("}");

            Core->NotifyCallFromStub(RpcIds::ReportUdpMessageCount, RpcNames::ReportUdpMessageCount(), ArgsStr__);
          }

          // Before RPC invocation.
          fun::uint32 InvocationTime__ = 0;
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->BeforeRpcInvocation(fun::BeforeRpcSummary(RpcIds::ReportUdpMessageCount, RpcNames::ReportUdpMessageCount(), RemoteId__, host_tag));
            InvocationTime__ = fun::Clock::Milliseconds();
          }

          bool bIsImplemented__ = false;
          // First, try function object.
          if ((bool)OnReportUdpMessageCount)
          {
            bIsImplemented__ = OnReportUdpMessageCount(RemoteId__, RpcHint__, UdpSuccessCount);
          }
          // Second, call derived stub function.
          else
          {
            bIsImplemented__ = ReportUdpMessageCount(RemoteId__, RpcHint__, UdpSuccessCount);
          }

          if (!bIsImplemented__)
          {
            Core->ShowNotImplementedRpcWarning(RpcIds::ReportUdpMessageCount, RpcNames::ReportUdpMessageCount());
          }

          // After RPC invocation.
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->AfterRpcInvocation(fun::AfterRpcSummary(RpcIds::ReportUdpMessageCount, RpcNames::ReportUdpMessageCount(), RemoteId__, host_tag, fun::Clock::Milliseconds() - InvocationTime__));
          }

          return true;
      }

      case (fun::uint32)RpcIds::ReportServerTimeAndFrameRateAndPing:
      {
          // Declare arguments.
          double client_local_time = 0.0;
          double recent_frame_rate = 0.0;

          // Read arguments.
          if (RpcHint__.result_code == 0)
          {
            DO_CHECKED__(fun::FlexFormat::ReadDouble(ImmutableMessage__, client_local_time));
            DO_CHECKED__(fun::FlexFormat::ReadDouble(ImmutableMessage__, recent_frame_rate));
          }

          Core->PostCheckReadMessage(ImmutableMessage__, RpcIds::ReportServerTimeAndFrameRateAndPing, RpcNames::ReportServerTimeAndFrameRateAndPing());

          // NotifyCallFromStub
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            fun::String ArgsStr__ = TEXT("{");
            ArgsStr__ += TEXT("\"client_local_time\":") + fun::ToString(client_local_time);
            ArgsStr__ += TEXT(",\"recent_frame_rate\":") + fun::ToString(recent_frame_rate);
            ArgsStr__ += TEXT("}");

            Core->NotifyCallFromStub(RpcIds::ReportServerTimeAndFrameRateAndPing, RpcNames::ReportServerTimeAndFrameRateAndPing(), ArgsStr__);
          }

          // Before RPC invocation.
          fun::uint32 InvocationTime__ = 0;
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->BeforeRpcInvocation(fun::BeforeRpcSummary(RpcIds::ReportServerTimeAndFrameRateAndPing, RpcNames::ReportServerTimeAndFrameRateAndPing(), RemoteId__, host_tag));
            InvocationTime__ = fun::Clock::Milliseconds();
          }

          bool bIsImplemented__ = false;
          // First, try function object.
          if ((bool)OnReportServerTimeAndFrameRateAndPing)
          {
            bIsImplemented__ = OnReportServerTimeAndFrameRateAndPing(RemoteId__, RpcHint__, client_local_time, recent_frame_rate);
          }
          // Second, call derived stub function.
          else
          {
            bIsImplemented__ = ReportServerTimeAndFrameRateAndPing(RemoteId__, RpcHint__, client_local_time, recent_frame_rate);
          }

          if (!bIsImplemented__)
          {
            Core->ShowNotImplementedRpcWarning(RpcIds::ReportServerTimeAndFrameRateAndPing, RpcNames::ReportServerTimeAndFrameRateAndPing());
          }

          // After RPC invocation.
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->AfterRpcInvocation(fun::AfterRpcSummary(RpcIds::ReportServerTimeAndFrameRateAndPing, RpcNames::ReportServerTimeAndFrameRateAndPing(), RemoteId__, host_tag, fun::Clock::Milliseconds() - InvocationTime__));
          }

          return true;
      }

      case (fun::uint32)RpcIds::ReportServerTimeAndFrameRateAndPong:
      {
          // Declare arguments.
          double OldClientLocalTime = 0.0;
          double server_local_time = 0.0;
          double server_udp_recent_ping = 0.0;
          double recent_frame_rate = 0.0;

          // Read arguments.
          if (RpcHint__.result_code == 0)
          {
            DO_CHECKED__(fun::FlexFormat::ReadDouble(ImmutableMessage__, OldClientLocalTime));
            DO_CHECKED__(fun::FlexFormat::ReadDouble(ImmutableMessage__, server_local_time));
            DO_CHECKED__(fun::FlexFormat::ReadDouble(ImmutableMessage__, server_udp_recent_ping));
            DO_CHECKED__(fun::FlexFormat::ReadDouble(ImmutableMessage__, recent_frame_rate));
          }

          Core->PostCheckReadMessage(ImmutableMessage__, RpcIds::ReportServerTimeAndFrameRateAndPong, RpcNames::ReportServerTimeAndFrameRateAndPong());

          // NotifyCallFromStub
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            fun::String ArgsStr__ = TEXT("{");
            ArgsStr__ += TEXT("\"OldClientLocalTime\":") + fun::ToString(OldClientLocalTime);
            ArgsStr__ += TEXT(",\"server_local_time\":") + fun::ToString(server_local_time);
            ArgsStr__ += TEXT(",\"server_udp_recent_ping\":") + fun::ToString(server_udp_recent_ping);
            ArgsStr__ += TEXT(",\"recent_frame_rate\":") + fun::ToString(recent_frame_rate);
            ArgsStr__ += TEXT("}");

            Core->NotifyCallFromStub(RpcIds::ReportServerTimeAndFrameRateAndPong, RpcNames::ReportServerTimeAndFrameRateAndPong(), ArgsStr__);
          }

          // Before RPC invocation.
          fun::uint32 InvocationTime__ = 0;
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->BeforeRpcInvocation(fun::BeforeRpcSummary(RpcIds::ReportServerTimeAndFrameRateAndPong, RpcNames::ReportServerTimeAndFrameRateAndPong(), RemoteId__, host_tag));
            InvocationTime__ = fun::Clock::Milliseconds();
          }

          bool bIsImplemented__ = false;
          // First, try function object.
          if ((bool)OnReportServerTimeAndFrameRateAndPong)
          {
            bIsImplemented__ = OnReportServerTimeAndFrameRateAndPong(RemoteId__, RpcHint__, OldClientLocalTime, server_local_time, server_udp_recent_ping, recent_frame_rate);
          }
          // Second, call derived stub function.
          else
          {
            bIsImplemented__ = ReportServerTimeAndFrameRateAndPong(RemoteId__, RpcHint__, OldClientLocalTime, server_local_time, server_udp_recent_ping, recent_frame_rate);
          }

          if (!bIsImplemented__)
          {
            Core->ShowNotImplementedRpcWarning(RpcIds::ReportServerTimeAndFrameRateAndPong, RpcNames::ReportServerTimeAndFrameRateAndPong());
          }

          // After RPC invocation.
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->AfterRpcInvocation(fun::AfterRpcSummary(RpcIds::ReportServerTimeAndFrameRateAndPong, RpcNames::ReportServerTimeAndFrameRateAndPong(), RemoteId__, host_tag, fun::Clock::Milliseconds() - InvocationTime__));
          }

          return true;
      }
    }

    Failure__: ImmutableMessage__.SetPosition(SavedReadPosition__); return false;
    #undef DO_CHECKED__
  }
} // end of namespace NetC2C

} // end of namespace fun
