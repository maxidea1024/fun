/**
 * Auto-generated by IDL Compiler (2.1.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#pragma once

#include "FUN.h"
#include "agent_defs.h"
#include "agent_types.h"

namespace fun {
namespace AgentS2C
{
  struct Proxy : public fun::RpcProxy
  {
    fun::int32 GetDeclaredRpcCount() const override { return AgentS2C::NumRpcFunctions; }
    const fun::RpcId* GetDeclaredRpcIds() const override { return AgentS2C::RpcIds::RpcIdList(); }
    const char** GetDeclaredRpcNames() const override { return AgentS2C::RpcNames::RpcNameList(); }

    inline bool NotifyCredential(fun::HostId rpc_recvfrom, const bool bAuthentication) { return NotifyCredential(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, bAuthentication); }
    inline bool NotifyCredential(fun::HostId rpc_recvfrom, const fun::RpcCallOption& rpc_call_opt, const bool bAuthentication) { return NotifyCredential(&rpc_recvfrom, 1, rpc_call_opt, bAuthentication); }
    template <typename Allocator>
    inline bool NotifyCredential(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const bool bAuthentication) { return NotifyCredential(RpcRemoteIds, fun::RpcCallOption::Reliable, bAuthentication); }
    template <typename Allocator>
    inline bool NotifyCredential(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& rpc_call_opt, const bool bAuthentication) { return NotifyCredential(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), rpc_call_opt, bAuthentication); }
    inline bool NotifyCredential(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const bool bAuthentication) { return NotifyCredential(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, bAuthentication); }
    bool NotifyCredential(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt, const bool bAuthentication);

    inline bool RequestServerAppStop(fun::HostId rpc_recvfrom) { return RequestServerAppStop(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable); }
    inline bool RequestServerAppStop(fun::HostId rpc_recvfrom, const fun::RpcCallOption& rpc_call_opt) { return RequestServerAppStop(&rpc_recvfrom, 1, rpc_call_opt); }
    template <typename Allocator>
    inline bool RequestServerAppStop(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds) { return RequestServerAppStop(RpcRemoteIds, fun::RpcCallOption::Reliable); }
    template <typename Allocator>
    inline bool RequestServerAppStop(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& rpc_call_opt) { return RequestServerAppStop(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), rpc_call_opt); }
    inline bool RequestServerAppStop(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount) { return RequestServerAppStop(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable); }
    bool RequestServerAppStop(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt);
  };
} // end of namespace AgentS2C

} // end of namespace fun
