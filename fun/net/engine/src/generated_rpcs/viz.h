/**
 * Auto-generated by IDL Compiler (2.1.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#pragma once

#include "FUN.h"
#include "viz_types.h"

#define IDL_BEGIN_GLOBAL_NAMESPACE }
#define IDL_END_GLOBAL_NAMESPACE namespace fun {

namespace fun {

//==============================================================================
// Service VizC2S
//==============================================================================

namespace VizC2S
{
  struct CVizC2S_RequestLogin_Args
  {
    // arguments.
    fun::String AuthenticationKey;
    fun::HostId VizOwnerId;

    // Construction
    inline CVizC2S_RequestLogin_Args() {}

    // Reader
    bool Read(fun::IMessageIn& input) {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(fun::FlexFormat::ReadString(input, AuthenticationKey));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(input, VizOwnerId));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"AuthenticationKey\":\"") << fun::ToString(AuthenticationKey) << TEXT("\"");
      result << TEXT("\",VizOwnerId\":") << fun::ToString(VizOwnerId);
      result << TEXT("}");
      return result;
    }
  };

  struct CVizC2S_RequestLogin_PArgs
  {
    // arguments.
    const fun::String* AuthenticationKey;
    const fun::HostId* VizOwnerId;

    // Construction
    inline CVizC2S_RequestLogin_PArgs(const fun::String* AuthenticationKey_, const fun::HostId* VizOwnerId_)
      : AuthenticationKey(AuthenticationKey_)
      , VizOwnerId(VizOwnerId_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      fun::FlexFormat::WriteString(Output__, *AuthenticationKey);
      EngineTypes_UserTypeHandlers::Write(Output__, *VizOwnerId);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"AuthenticationKey\":\"") << fun::ToString(*AuthenticationKey) << TEXT("\"");
      result << TEXT("\",VizOwnerId\":") << fun::ToString(*VizOwnerId);
      result << TEXT("}");
      return result;
    }
  };

  struct CVizC2S_NotifyCommon_SendRpc_Args
  {
    // arguments.
    fun::HostIdArray send_to;
    fun::VizMessageSummary summary;

    // Construction
    inline CVizC2S_NotifyCommon_SendRpc_Args() {}

    // Reader
    bool Read(fun::IMessageIn& input)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(input, send_to));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(input, summary));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"send_to\":") << fun::ToString(send_to);
      result << TEXT("\",summary\":") << fun::ToString(summary);
      result << TEXT("}");
      return result;
    }
  };

  struct CVizC2S_NotifyCommon_SendRpc_PArgs
  {
    // arguments.
    const fun::HostIdArray* send_to;
    const fun::VizMessageSummary* summary;

    // Construction
    inline CVizC2S_NotifyCommon_SendRpc_PArgs(const fun::HostIdArray* SendTo_, const fun::VizMessageSummary* Summary_)
      : send_to(SendTo_)
      , summary(Summary_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      EngineTypes_UserTypeHandlers::Write(Output__, *send_to);
      EngineTypes_UserTypeHandlers::Write(Output__, *summary);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"send_to\":") << fun::ToString(*send_to);
      result << TEXT("\",summary\":") << fun::ToString(*summary);
      result << TEXT("}");
      return result;
    }
  };

  struct CVizC2S_NotifyCommon_ReceiveRpc_Args
  {
    // arguments.
    fun::HostId RecvFrom;
    fun::String rpc_name;
    fun::RpcId rpc_id;

    // Construction
    inline CVizC2S_NotifyCommon_ReceiveRpc_Args() {}

    // Reader
    bool Read(fun::IMessageIn& input)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(input, RecvFrom));
      DO_CHECKED__(fun::FlexFormat::ReadString(input, rpc_name));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(input, rpc_id));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"RecvFrom\":") << fun::ToString(RecvFrom);
      result << TEXT("\",rpc_name\":\"") << fun::ToString(rpc_name) << TEXT("\"");
      result << TEXT("\",rpc_id\":") << fun::ToString(rpc_id);
      result << TEXT("}");
      return result;
    }
  };

  struct CVizC2S_NotifyCommon_ReceiveRpc_PArgs
  {
    // arguments.
    const fun::HostId* RecvFrom;
    const fun::String* rpc_name;
    const fun::RpcId* rpc_id;

    // Construction
    inline CVizC2S_NotifyCommon_ReceiveRpc_PArgs(const fun::HostId* RecvFrom_, const fun::String* RpcName_, const fun::RpcId* RpcId_)
      : RecvFrom(RecvFrom_)
      , rpc_name(RpcName_)
      , rpc_id(RpcId_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      EngineTypes_UserTypeHandlers::Write(Output__, *RecvFrom);
      fun::FlexFormat::WriteString(Output__, *rpc_name);
      EngineTypes_UserTypeHandlers::Write(Output__, *rpc_id);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"RecvFrom\":") << fun::ToString(*RecvFrom);
      result << TEXT("\",rpc_name\":\"") << fun::ToString(*rpc_name) << TEXT("\"");
      result << TEXT("\",rpc_id\":") << fun::ToString(*rpc_id);
      result << TEXT("}");
      return result;
    }
  };

  struct CVizC2S_NotifyCli_ConnectionState_Args
  {
    // arguments.
    fun::ConnectionState ConnectionState;

    // Construction
    inline CVizC2S_NotifyCli_ConnectionState_Args() {}

    // Reader
    bool Read(fun::IMessageIn& input)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(input, ConnectionState));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"ConnectionState\":") << fun::ToString(ConnectionState);
      result << TEXT("}");
      return result;
    }
  };

  struct CVizC2S_NotifyCli_ConnectionState_PArgs
  {
    // arguments.
    const fun::ConnectionState* ConnectionState;

    // Construction
    inline CVizC2S_NotifyCli_ConnectionState_PArgs(const fun::ConnectionState* ConnectionState_)
      : ConnectionState(ConnectionState_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      EngineTypes_UserTypeHandlers::Write(Output__, *ConnectionState);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"ConnectionState\":") << fun::ToString(*ConnectionState);
      result << TEXT("}");
      return result;
    }
  };

  struct CVizC2S_NotifyCli_Peers_AddOrEdit_Args
  {
    // arguments.
    fun::HostId peer_id;

    // Construction
    inline CVizC2S_NotifyCli_Peers_AddOrEdit_Args() {}

    // Reader
    bool Read(fun::IMessageIn& input)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(input, peer_id));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"peer_id\":") << fun::ToString(peer_id);
      result << TEXT("}");
      return result;
    }
  };

  struct CVizC2S_NotifyCli_Peers_AddOrEdit_PArgs
  {
    // arguments.
    const fun::HostId* peer_id;

    // Construction
    inline CVizC2S_NotifyCli_Peers_AddOrEdit_PArgs(const fun::HostId* PeerId_)
      : peer_id(PeerId_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      EngineTypes_UserTypeHandlers::Write(Output__, *peer_id);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"peer_id\":") << fun::ToString(*peer_id);
      result << TEXT("}");
      return result;
    }
  };

  struct CVizC2S_NotifySrv_Clients_AddOrEdit_Args
  {
    // arguments.
    fun::HostId client_id;

    // Construction
    inline CVizC2S_NotifySrv_Clients_AddOrEdit_Args() {}

    // Reader
    bool Read(fun::IMessageIn& input)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(input, client_id));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"client_id\":") << fun::ToString(client_id);
      result << TEXT("}");
      return result;
    }
  };

  struct CVizC2S_NotifySrv_Clients_AddOrEdit_PArgs
  {
    // arguments.
    const fun::HostId* client_id;

    // Construction
    inline CVizC2S_NotifySrv_Clients_AddOrEdit_PArgs(const fun::HostId* ClientId_)
      : client_id(ClientId_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      EngineTypes_UserTypeHandlers::Write(Output__, *client_id);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"client_id\":") << fun::ToString(*client_id);
      result << TEXT("}");
      return result;
    }
  };

  struct CVizC2S_NotifySrv_Clients_Remove_Args
  {
    // arguments.
    fun::HostId client_id;

    // Construction
    inline CVizC2S_NotifySrv_Clients_Remove_Args() {}

    // Reader
    bool Read(fun::IMessageIn& input)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(input, client_id));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"client_id\":") << fun::ToString(client_id);
      result << TEXT("}");
      return result;
    }
  };

  struct CVizC2S_NotifySrv_Clients_Remove_PArgs {
    // arguments.
    const fun::HostId* client_id;

    // Construction
    inline CVizC2S_NotifySrv_Clients_Remove_PArgs(const fun::HostId* ClientId_)
      : client_id(ClientId_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__) {
      EngineTypes_UserTypeHandlers::Write(Output__, *client_id);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const {
      fun::String result = TEXT("{");
      result << TEXT("\"client_id\":") << fun::ToString(*client_id);
      result << TEXT("}");
      return result;
    }
  };
} // end of namespace VizC2S


//==============================================================================
// Service VizS2C
//==============================================================================

namespace VizS2C {
  struct CVizS2C_NotifyLoginFailed_Args {
    // arguments.
    fun::ResultCode reason;

    // Construction
    inline CVizS2C_NotifyLoginFailed_Args() {}

    // Reader
    bool Read(fun::IMessageIn& input) {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(input, reason));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const {
      fun::String result = TEXT("{");
      result << TEXT("\"reason\":") << fun::ToString(reason);
      result << TEXT("}");
      return result;
    }
  };

  struct CVizS2C_NotifyLoginFailed_PArgs {
    // arguments.
    const fun::ResultCode* reason;

    // Construction
    inline CVizS2C_NotifyLoginFailed_PArgs(const fun::ResultCode* Reason_)
      : reason(Reason_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__) {
      EngineTypes_UserTypeHandlers::Write(Output__, *reason);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const {
      fun::String result = TEXT("{");
      result << TEXT("\"reason\":") << fun::ToString(*reason);
      result << TEXT("}");
      return result;
    }
  };
} // end of namespace VizS2C

} // end of namespace fun

#undef IDL_BEGIN_GLOBAL_NAMESPACE
#undef IDL_END_GLOBAL_NAMESPACE
