/**
 * Auto-generated by IDL Compiler (2.1.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "lan_LanS2C_proxy.h"
#include "lan.h" // _Args, _PArgs

namespace fun {
namespace LanS2C
{
  bool Proxy::P2PGroup_MemberJoin(const fun::HostId* RpcRemoteIds, const fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt, const fun::HostId& group_id, const fun::HostId& member_id, const fun::ByteArray& custom_field, const fun::uint32 event_id, const fun::ByteArray& P2PAESSessionKey, const fun::ByteArray& P2PRC4SessionKey, const fun::Uuid& ConnectionTag)
  {
    fun::MessageOut RpcMessage__;

    // Write RPC function id.
    fun::LiteFormat::Write(RpcMessage__, RpcIds::P2PGroup_MemberJoin);

    // Write RPC header.
    fun::RpcHeader::WriteOk(RpcMessage__);

    // Write RPC function arguments.
    EngineTypes_UserTypeHandlers::Write(RpcMessage__, group_id);
    EngineTypes_UserTypeHandlers::Write(RpcMessage__, member_id);
    fun::FlexFormat::WriteBytes(RpcMessage__, custom_field);
    fun::FlexFormat::WriteUInt32(RpcMessage__, event_id);
    fun::FlexFormat::WriteBytes(RpcMessage__, P2PAESSessionKey);
    fun::FlexFormat::WriteBytes(RpcMessage__, P2PRC4SessionKey);
    fun::FlexFormat::WriteGuid(RpcMessage__, ConnectionTag);

    if (notify_send_by_proxy_enabled_ && !engine_specific_only_)
    {
      fun::String ArgsStr__ = TEXT("{");
      ArgsStr__ << TEXT("\"group_id\":") << fun::ToString(group_id);
      ArgsStr__ << TEXT(",\"member_id\":") << fun::ToString(member_id);
      ArgsStr__ << TEXT(",\"custom_field\":") << fun::ToString(custom_field);
      ArgsStr__ << TEXT(",\"event_id\":") << fun::ToString(event_id);
      ArgsStr__ << TEXT(",\"P2PAESSessionKey\":") << fun::ToString(P2PAESSessionKey);
      ArgsStr__ << TEXT(",\"P2PRC4SessionKey\":") << fun::ToString(P2PRC4SessionKey);
      ArgsStr__ << TEXT(",\"ConnectionTag\":") << fun::ToString(ConnectionTag);
      ArgsStr__ << TEXT("}");

      return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::P2PGroup_MemberJoin(), RpcIds::P2PGroup_MemberJoin, *ArgsStr__);
    }
    else
    {
      return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::P2PGroup_MemberJoin(), RpcIds::P2PGroup_MemberJoin, nullptr);
    }
  }

  bool Proxy::P2PGroup_MemberJoin_Unencrypted(const fun::HostId* RpcRemoteIds, const fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt, const fun::HostId& group_id, const fun::HostId& member_id, const fun::ByteArray& custom_field, const fun::uint32 event_id, const fun::Uuid& ConnectionTag)
  {
    fun::MessageOut RpcMessage__;

    // Write RPC function id.
    fun::LiteFormat::Write(RpcMessage__, RpcIds::P2PGroup_MemberJoin_Unencrypted);

    // Write RPC header.
    fun::RpcHeader::WriteOk(RpcMessage__);

    // Write RPC function arguments.
    EngineTypes_UserTypeHandlers::Write(RpcMessage__, group_id);
    EngineTypes_UserTypeHandlers::Write(RpcMessage__, member_id);
    fun::FlexFormat::WriteBytes(RpcMessage__, custom_field);
    fun::FlexFormat::WriteUInt32(RpcMessage__, event_id);
    fun::FlexFormat::WriteGuid(RpcMessage__, ConnectionTag);

    if (notify_send_by_proxy_enabled_ && !engine_specific_only_)
    {
      fun::String ArgsStr__ = TEXT("{");
      ArgsStr__ << TEXT("\"group_id\":") << fun::ToString(group_id);
      ArgsStr__ << TEXT(",\"member_id\":") << fun::ToString(member_id);
      ArgsStr__ << TEXT(",\"custom_field\":") << fun::ToString(custom_field);
      ArgsStr__ << TEXT(",\"event_id\":") << fun::ToString(event_id);
      ArgsStr__ << TEXT(",\"ConnectionTag\":") << fun::ToString(ConnectionTag);
      ArgsStr__ << TEXT("}");

      return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::P2PGroup_MemberJoin_Unencrypted(), RpcIds::P2PGroup_MemberJoin_Unencrypted, *ArgsStr__);
    }
    else
    {
      return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::P2PGroup_MemberJoin_Unencrypted(), RpcIds::P2PGroup_MemberJoin_Unencrypted, nullptr);
    }
  }

  bool Proxy::P2PGroup_MemberLeave(const fun::HostId* RpcRemoteIds, const fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt, const fun::HostId& member_id, const fun::HostId& group_id)
  {
    fun::MessageOut RpcMessage__;

    // Write RPC function id.
    fun::LiteFormat::Write(RpcMessage__, RpcIds::P2PGroup_MemberLeave);

    // Write RPC header.
    fun::RpcHeader::WriteOk(RpcMessage__);

    // Write RPC function arguments.
    EngineTypes_UserTypeHandlers::Write(RpcMessage__, member_id);
    EngineTypes_UserTypeHandlers::Write(RpcMessage__, group_id);

    if (notify_send_by_proxy_enabled_ && !engine_specific_only_)
    {
      fun::String ArgsStr__ = TEXT("{");
      ArgsStr__ << TEXT("\"member_id\":") << fun::ToString(member_id);
      ArgsStr__ << TEXT(",\"group_id\":") << fun::ToString(group_id);
      ArgsStr__ << TEXT("}");

      return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::P2PGroup_MemberLeave(), RpcIds::P2PGroup_MemberLeave, *ArgsStr__);
    }
    else
    {
      return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::P2PGroup_MemberLeave(), RpcIds::P2PGroup_MemberLeave, nullptr);
    }
  }

  bool Proxy::ReliablePong(const fun::HostId* RpcRemoteIds, const fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt)
  {
    fun::MessageOut RpcMessage__;

    // Write RPC function id.
    fun::LiteFormat::Write(RpcMessage__, RpcIds::ReliablePong);

    // Write RPC header.
    fun::RpcHeader::WriteOk(RpcMessage__);

    // No RPC function arguments.

    if (notify_send_by_proxy_enabled_ && !engine_specific_only_)
    {
      return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::ReliablePong(), RpcIds::ReliablePong, TEXT("{}"));
    }
    else
    {
      return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::ReliablePong(), RpcIds::ReliablePong, nullptr);
    }
  }

  bool Proxy::P2PConnectStart(const fun::HostId* RpcRemoteIds, const fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt, const fun::HostId& peer_id, const fun::InetAddress external_addr)
  {
    fun::MessageOut RpcMessage__;

    // Write RPC function id.
    fun::LiteFormat::Write(RpcMessage__, RpcIds::P2PConnectStart);

    // Write RPC header.
    fun::RpcHeader::WriteOk(RpcMessage__);

    // Write RPC function arguments.
    EngineTypes_UserTypeHandlers::Write(RpcMessage__, peer_id);
    EngineTypes_UserTypeHandlers::Write(RpcMessage__, external_addr);

    if (notify_send_by_proxy_enabled_ && !engine_specific_only_)
    {
      fun::String ArgsStr__ = TEXT("{");
      ArgsStr__ << TEXT("\"peer_id\":") << fun::ToString(peer_id);
      ArgsStr__ << TEXT(",\"external_addr\":") << fun::ToString(external_addr);
      ArgsStr__ << TEXT("}");

      return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::P2PConnectStart(), RpcIds::P2PConnectStart, *ArgsStr__);
    }
    else
    {
      return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::P2PConnectStart(), RpcIds::P2PConnectStart, nullptr);
    }
  }

  bool Proxy::ShutdownTcpAck(const fun::HostId* RpcRemoteIds, const fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt)
  {
    fun::MessageOut RpcMessage__;

    // Write RPC function id.
    fun::LiteFormat::Write(RpcMessage__, RpcIds::ShutdownTcpAck);

    // Write RPC header.
    fun::RpcHeader::WriteOk(RpcMessage__);

    // No RPC function arguments.

    if (notify_send_by_proxy_enabled_ && !engine_specific_only_)
    {
      return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::ShutdownTcpAck(), RpcIds::ShutdownTcpAck, TEXT("{}"));
    }
    else
    {
      return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::ShutdownTcpAck(), RpcIds::ShutdownTcpAck, nullptr);
    }
  }

  bool Proxy::RequestAutoPrune(const fun::HostId* RpcRemoteIds, const fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt)
  {
    fun::MessageOut RpcMessage__;

    // Write RPC function id.
    fun::LiteFormat::Write(RpcMessage__, RpcIds::RequestAutoPrune);

    // Write RPC header.
    fun::RpcHeader::WriteOk(RpcMessage__);

    // No RPC function arguments.

    if (notify_send_by_proxy_enabled_ && !engine_specific_only_)
    {
      return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::RequestAutoPrune(), RpcIds::RequestAutoPrune, TEXT("{}"));
    }
    else
    {
      return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::RequestAutoPrune(), RpcIds::RequestAutoPrune, nullptr);
    }
  }

  bool Proxy::GroupP2PConnectionComplete(const fun::HostId* RpcRemoteIds, const fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& rpc_call_opt, const fun::HostId& group_id)
  {
    fun::MessageOut RpcMessage__;

    // Write RPC function id.
    fun::LiteFormat::Write(RpcMessage__, RpcIds::GroupP2PConnectionComplete);

    // Write RPC header.
    fun::RpcHeader::WriteOk(RpcMessage__);

    // Write RPC function arguments.
    EngineTypes_UserTypeHandlers::Write(RpcMessage__, group_id);

    if (notify_send_by_proxy_enabled_ && !engine_specific_only_)
    {
      fun::String ArgsStr__ = TEXT("{");
      ArgsStr__ << TEXT("\"group_id\":") << fun::ToString(group_id);
      ArgsStr__ << TEXT("}");

      return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::GroupP2PConnectionComplete(), RpcIds::GroupP2PConnectionComplete, *ArgsStr__);
    }
    else
    {
      return RpcCall(RpcRemoteIds, RpcRemoteIdCount, rpc_call_opt, RpcMessage__, RpcNames::GroupP2PConnectionComplete(), RpcIds::GroupP2PConnectionComplete, nullptr);
    }
  }
} // end of namespace LanS2C

} // end of namespace fun
