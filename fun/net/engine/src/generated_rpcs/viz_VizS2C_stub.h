/**
 * Auto-generated by IDL Compiler (2.1.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#pragma once

#include "fun.h"
#include "viz_defs.h"
#include "viz_types.h"

namespace fun { namespace VizS2C {

class Stub : public fun::net::RpcStub {
 public:
  fun::int32 GetDeclaredRpcCount() const override { return VizS2C::NumRpcFunctions; }
  const fun::net::RpcId* GetDeclaredRpcIds() const override { return VizS2C::RpcIds::RpcIdList(); }
  const char** GetDeclaredRpcNames() const override { return VizS2C::RpcNames::RpcNameList(); }

  // NotifyLoginOk
  virtual bool NotifyLoginOk(const fun::net::NodeId rpc_recvfrom, const fun:RpcHint& rpc_hint) { return false; }
  #define DECLARE_RPCSTUB_VizS2C_NotifyLoginOk bool NotifyLoginOk(const fun::net::NodeId rpc_recvfrom, const fun:RpcHint& rpc_hint) override;
  #define IMPLEMENT_RPCSTUB_VizS2C_NotifyLoginOk(TClass) bool TClass::NotifyLoginOk(const fun::net::NodeId rpc_recvfrom, const fun:RpcHint& rpc_hint)
  typedef fun::net::Function<bool(const fun::net::NodeId rpc_recvfrom, const fun:RpcHint& rpc_hint)> NotifyLoginOkFunctionType;
  NotifyLoginOkFunctionType OnNotifyLoginOk;

  // NotifyLoginFailed
  virtual bool NotifyLoginFailed(const fun::net::NodeId rpc_recvfrom, const fun:RpcHint& rpc_hint, const fun::net::ResultCode reason) { return false; }
  #define DECLARE_RPCSTUB_VizS2C_NotifyLoginFailed bool NotifyLoginFailed(const fun::net::NodeId rpc_recvfrom, const fun:RpcHint& rpc_hint, const fun::net::ResultCode reason) override;
  #define IMPLEMENT_RPCSTUB_VizS2C_NotifyLoginFailed(TClass) bool TClass::NotifyLoginFailed(const fun::net::NodeId rpc_recvfrom, const fun:RpcHint& rpc_hint, const fun::net::ResultCode reason)
  typedef fun::net::Function<bool(const fun::net::NodeId rpc_recvfrom, const fun:RpcHint& rpc_hint, const fun::net::ResultCode /* reason */)> NotifyLoginFailedFunctionType;
  NotifyLoginFailedFunctionType OnNotifyLoginFailed;

  // RpcStub interface
  bool ProcessReceivedMessage(fun::net::ReceivedMessage& received_msg, void* host_tag) override;
};

} // end of namespace VizS2C
} // end of namespace fun
