/**
 * Auto-generated by IDL Compiler (2.1.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#pragma once

#include "FUN.h"
#include "net_types.h"

#define IDL_BEGIN_GLOBAL_NAMESPACE }
#define IDL_END_GLOBAL_NAMESPACE namespace fun {

namespace fun {

//==============================================================================
// Service NetC2C
//==============================================================================

namespace NetC2C
{
  struct CNetC2C_ReportUdpMessageCount_Args
  {
    // arguments.
    fun::uint32 UdpSuccessCount;

    // Construction
    inline CNetC2C_ReportUdpMessageCount_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(fun::FlexFormat::ReadUInt32(Input__, UdpSuccessCount));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"UdpSuccessCount\":") << fun::ToString(UdpSuccessCount);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2C_ReportUdpMessageCount_PArgs
  {
    // arguments.
    const fun::uint32* UdpSuccessCount;

    // Construction
    inline CNetC2C_ReportUdpMessageCount_PArgs(const fun::uint32* UdpSuccessCount_)
      : UdpSuccessCount(UdpSuccessCount_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      fun::FlexFormat::WriteUInt32(Output__, *UdpSuccessCount);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"UdpSuccessCount\":") << fun::ToString(*UdpSuccessCount);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2C_ReportServerTimeAndFrameRateAndPing_Args
  {
    // arguments.
    double client_local_time;
    double recent_frame_rate;

    // Construction
    inline CNetC2C_ReportServerTimeAndFrameRateAndPing_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(fun::FlexFormat::ReadDouble(Input__, client_local_time));
      DO_CHECKED__(fun::FlexFormat::ReadDouble(Input__, recent_frame_rate));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"client_local_time\":") << fun::ToString(client_local_time);
      result << TEXT("\",recent_frame_rate\":") << fun::ToString(recent_frame_rate);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2C_ReportServerTimeAndFrameRateAndPing_PArgs
  {
    // arguments.
    const double* client_local_time;
    const double* recent_frame_rate;

    // Construction
    inline CNetC2C_ReportServerTimeAndFrameRateAndPing_PArgs(const double* ClientLocalTime_, const double* RecentFrameRate_)
      : client_local_time(ClientLocalTime_)
      , recent_frame_rate(RecentFrameRate_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      fun::FlexFormat::WriteDouble(Output__, *client_local_time);
      fun::FlexFormat::WriteDouble(Output__, *recent_frame_rate);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"client_local_time\":") << fun::ToString(*client_local_time);
      result << TEXT("\",recent_frame_rate\":") << fun::ToString(*recent_frame_rate);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2C_ReportServerTimeAndFrameRateAndPong_Args
  {
    // arguments.
    double OldClientLocalTime;
    double server_local_time;
    double server_udp_recent_ping;
    double recent_frame_rate;

    // Construction
    inline CNetC2C_ReportServerTimeAndFrameRateAndPong_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(fun::FlexFormat::ReadDouble(Input__, OldClientLocalTime));
      DO_CHECKED__(fun::FlexFormat::ReadDouble(Input__, server_local_time));
      DO_CHECKED__(fun::FlexFormat::ReadDouble(Input__, server_udp_recent_ping));
      DO_CHECKED__(fun::FlexFormat::ReadDouble(Input__, recent_frame_rate));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"OldClientLocalTime\":") << fun::ToString(OldClientLocalTime);
      result << TEXT("\",server_local_time\":") << fun::ToString(server_local_time);
      result << TEXT("\",server_udp_recent_ping\":") << fun::ToString(server_udp_recent_ping);
      result << TEXT("\",recent_frame_rate\":") << fun::ToString(recent_frame_rate);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2C_ReportServerTimeAndFrameRateAndPong_PArgs
  {
    // arguments.
    const double* OldClientLocalTime;
    const double* server_local_time;
    const double* server_udp_recent_ping;
    const double* recent_frame_rate;

    // Construction
    inline CNetC2C_ReportServerTimeAndFrameRateAndPong_PArgs(const double* OldClientLocalTime_, const double* ServerLocalTime_, const double* ServerUdpRecentPing_, const double* RecentFrameRate_)
      : OldClientLocalTime(OldClientLocalTime_)
      , server_local_time(ServerLocalTime_)
      , server_udp_recent_ping(ServerUdpRecentPing_)
      , recent_frame_rate(RecentFrameRate_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      fun::FlexFormat::WriteDouble(Output__, *OldClientLocalTime);
      fun::FlexFormat::WriteDouble(Output__, *server_local_time);
      fun::FlexFormat::WriteDouble(Output__, *server_udp_recent_ping);
      fun::FlexFormat::WriteDouble(Output__, *recent_frame_rate);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"OldClientLocalTime\":") << fun::ToString(*OldClientLocalTime);
      result << TEXT("\",server_local_time\":") << fun::ToString(*server_local_time);
      result << TEXT("\",server_udp_recent_ping\":") << fun::ToString(*server_udp_recent_ping);
      result << TEXT("\",recent_frame_rate\":") << fun::ToString(*recent_frame_rate);
      result << TEXT("}");
      return result;
    }
  };
} // end of namespace NetC2C


//==============================================================================
// Service NetC2S
//==============================================================================

namespace NetC2S
{
  struct CNetC2S_ReliablePing_Args
  {
    // arguments.
    double recent_frame_rate;

    // Construction
    inline CNetC2S_ReliablePing_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(fun::FlexFormat::ReadDouble(Input__, recent_frame_rate));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"recent_frame_rate\":") << fun::ToString(recent_frame_rate);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_ReliablePing_PArgs
  {
    // arguments.
    const double* recent_frame_rate;

    // Construction
    inline CNetC2S_ReliablePing_PArgs(const double* RecentFrameRate_)
      : recent_frame_rate(RecentFrameRate_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      fun::FlexFormat::WriteDouble(Output__, *recent_frame_rate);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"recent_frame_rate\":") << fun::ToString(*recent_frame_rate);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_P2P_NotifyDirectP2PDisconnected_Args
  {
    // arguments.
    fun::HostId peer_id;
    fun::ResultCode reason;

    // Construction
    inline CNetC2S_P2P_NotifyDirectP2PDisconnected_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, peer_id));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, reason));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"peer_id\":") << fun::ToString(peer_id);
      result << TEXT("\",reason\":") << fun::ToString(reason);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_P2P_NotifyDirectP2PDisconnected_PArgs
  {
    // arguments.
    const fun::HostId* peer_id;
    const fun::ResultCode* reason;

    // Construction
    inline CNetC2S_P2P_NotifyDirectP2PDisconnected_PArgs(const fun::HostId* PeerId_, const fun::ResultCode* Reason_)
      : peer_id(PeerId_)
      , reason(Reason_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      EngineTypes_UserTypeHandlers::Write(Output__, *peer_id);
      EngineTypes_UserTypeHandlers::Write(Output__, *reason);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"peer_id\":") << fun::ToString(*peer_id);
      result << TEXT("\",reason\":") << fun::ToString(*reason);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_P2PGroup_MemberJoin_Ack_Args
  {
    // arguments.
    fun::HostId group_id;
    fun::HostId added_member_id;
    fun::uint32 event_id;
    bool bLocalPortReuseOk;

    // Construction
    inline CNetC2S_P2PGroup_MemberJoin_Ack_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, group_id));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, added_member_id));
      DO_CHECKED__(fun::FlexFormat::ReadUInt32(Input__, event_id));
      DO_CHECKED__(fun::FlexFormat::ReadBool(Input__, bLocalPortReuseOk));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"group_id\":") << fun::ToString(group_id);
      result << TEXT("\",added_member_id\":") << fun::ToString(added_member_id);
      result << TEXT("\",event_id\":") << fun::ToString(event_id);
      result << TEXT("\",bLocalPortReuseOk\":") << fun::ToString(bLocalPortReuseOk);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_P2PGroup_MemberJoin_Ack_PArgs
  {
    // arguments.
    const fun::HostId* group_id;
    const fun::HostId* added_member_id;
    const fun::uint32* event_id;
    const bool* bLocalPortReuseOk;

    // Construction
    inline CNetC2S_P2PGroup_MemberJoin_Ack_PArgs(const fun::HostId* GroupId_, const fun::HostId* AddedMemberId_, const fun::uint32* EventId_, const bool* bLocalPortReuseOk_)
      : group_id(GroupId_)
      , added_member_id(AddedMemberId_)
      , event_id(EventId_)
      , bLocalPortReuseOk(bLocalPortReuseOk_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      EngineTypes_UserTypeHandlers::Write(Output__, *group_id);
      EngineTypes_UserTypeHandlers::Write(Output__, *added_member_id);
      fun::FlexFormat::WriteUInt32(Output__, *event_id);
      fun::FlexFormat::WriteBool(Output__, *bLocalPortReuseOk);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"group_id\":") << fun::ToString(*group_id);
      result << TEXT("\",added_member_id\":") << fun::ToString(*added_member_id);
      result << TEXT("\",event_id\":") << fun::ToString(*event_id);
      result << TEXT("\",bLocalPortReuseOk\":") << fun::ToString(*bLocalPortReuseOk);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_NotifyP2PHolepunchSuccess_Args
  {
    // arguments.
    fun::HostId A;
    fun::HostId B;
    fun::InetAddress a2b_send_addr;
    fun::InetAddress a2b_recv_addr;
    fun::InetAddress b2a_send_addr;
    fun::InetAddress b2a_recv_addr;

    // Construction
    inline CNetC2S_NotifyP2PHolepunchSuccess_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, A));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, B));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, a2b_send_addr));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, a2b_recv_addr));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, b2a_send_addr));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, b2a_recv_addr));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"A\":") << fun::ToString(A);
      result << TEXT("\",B\":") << fun::ToString(B);
      result << TEXT("\",a2b_send_addr\":") << fun::ToString(a2b_send_addr);
      result << TEXT("\",a2b_recv_addr\":") << fun::ToString(a2b_recv_addr);
      result << TEXT("\",b2a_send_addr\":") << fun::ToString(b2a_send_addr);
      result << TEXT("\",b2a_recv_addr\":") << fun::ToString(b2a_recv_addr);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_NotifyP2PHolepunchSuccess_PArgs
  {
    // arguments.
    const fun::HostId* A;
    const fun::HostId* B;
    const fun::InetAddress* a2b_send_addr;
    const fun::InetAddress* a2b_recv_addr;
    const fun::InetAddress* b2a_send_addr;
    const fun::InetAddress* b2a_recv_addr;

    // Construction
    inline CNetC2S_NotifyP2PHolepunchSuccess_PArgs(const fun::HostId* A_, const fun::HostId* B_, const fun::InetAddress* A2BSendAddr_, const fun::InetAddress* A2BRecvAddr_, const fun::InetAddress* B2ASendAddr_, const fun::InetAddress* B2ARecvAddr_)
      : A(A_)
      , B(B_)
      , a2b_send_addr(A2BSendAddr_)
      , a2b_recv_addr(A2BRecvAddr_)
      , b2a_send_addr(B2ASendAddr_)
      , b2a_recv_addr(B2ARecvAddr_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      EngineTypes_UserTypeHandlers::Write(Output__, *A);
      EngineTypes_UserTypeHandlers::Write(Output__, *B);
      EngineTypes_UserTypeHandlers::Write(Output__, *a2b_send_addr);
      EngineTypes_UserTypeHandlers::Write(Output__, *a2b_recv_addr);
      EngineTypes_UserTypeHandlers::Write(Output__, *b2a_send_addr);
      EngineTypes_UserTypeHandlers::Write(Output__, *b2a_recv_addr);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"A\":") << fun::ToString(*A);
      result << TEXT("\",B\":") << fun::ToString(*B);
      result << TEXT("\",a2b_send_addr\":") << fun::ToString(*a2b_send_addr);
      result << TEXT("\",a2b_recv_addr\":") << fun::ToString(*a2b_recv_addr);
      result << TEXT("\",b2a_send_addr\":") << fun::ToString(*b2a_send_addr);
      result << TEXT("\",b2a_recv_addr\":") << fun::ToString(*b2a_recv_addr);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_ShutdownTcp_Args
  {
    // arguments.
    fun::ByteArray comment;

    // Construction
    inline CNetC2S_ShutdownTcp_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(fun::FlexFormat::ReadBytes(Input__, comment));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"comment\":") << fun::ToString(comment);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_ShutdownTcp_PArgs
  {
    // arguments.
    const fun::ByteArray* comment;

    // Construction
    inline CNetC2S_ShutdownTcp_PArgs(const fun::ByteArray* Comment_)
      : comment(Comment_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      fun::FlexFormat::WriteBytes(Output__, *comment);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"comment\":") << fun::ToString(*comment);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_NotifyLog_Args
  {
    // arguments.
    fun::LogCategory Category;
    fun::String text;

    // Construction
    inline CNetC2S_NotifyLog_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, Category));
      DO_CHECKED__(fun::FlexFormat::ReadString(Input__, text));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"Category\":") << fun::ToString(Category);
      result << TEXT("\",text\":\"") << fun::ToString(text) << TEXT("\"");
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_NotifyLog_PArgs
  {
    // arguments.
    const fun::LogCategory* Category;
    const fun::String* text;

    // Construction
    inline CNetC2S_NotifyLog_PArgs(const fun::LogCategory* Category_, const fun::String* Text_)
      : Category(Category_)
      , text(Text_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      EngineTypes_UserTypeHandlers::Write(Output__, *Category);
      fun::FlexFormat::WriteString(Output__, *text);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"Category\":") << fun::ToString(*Category);
      result << TEXT("\",text\":\"") << fun::ToString(*text) << TEXT("\"");
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_NotifyLogHolepunchFreqFail_Args
  {
    // arguments.
    fun::int32 Rank;
    fun::String text;

    // Construction
    inline CNetC2S_NotifyLogHolepunchFreqFail_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(fun::FlexFormat::ReadSInt32(Input__, Rank));
      DO_CHECKED__(fun::FlexFormat::ReadString(Input__, text));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"Rank\":") << fun::ToString(Rank);
      result << TEXT("\",text\":\"") << fun::ToString(text) << TEXT("\"");
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_NotifyLogHolepunchFreqFail_PArgs
  {
    // arguments.
    const fun::int32* Rank;
    const fun::String* text;

    // Construction
    inline CNetC2S_NotifyLogHolepunchFreqFail_PArgs(const fun::int32* Rank_, const fun::String* Text_)
      : Rank(Rank_)
      , text(Text_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      fun::FlexFormat::WriteSInt32(Output__, *Rank);
      fun::FlexFormat::WriteString(Output__, *text);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"Rank\":") << fun::ToString(*Rank);
      result << TEXT("\",text\":\"") << fun::ToString(*text) << TEXT("\"");
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_NotifyNatDeviceName_Args
  {
    // arguments.
    fun::String DeviceName;

    // Construction
    inline CNetC2S_NotifyNatDeviceName_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(fun::FlexFormat::ReadString(Input__, DeviceName));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"DeviceName\":\"") << fun::ToString(DeviceName) << TEXT("\"");
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_NotifyNatDeviceName_PArgs
  {
    // arguments.
    const fun::String* DeviceName;

    // Construction
    inline CNetC2S_NotifyNatDeviceName_PArgs(const fun::String* DeviceName_)
      : DeviceName(DeviceName_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      fun::FlexFormat::WriteString(Output__, *DeviceName);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"DeviceName\":\"") << fun::ToString(*DeviceName) << TEXT("\"");
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_NotifyPeerUdpSocketRestored_Args
  {
    // arguments.
    fun::HostId PeerBID;

    // Construction
    inline CNetC2S_NotifyPeerUdpSocketRestored_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, PeerBID));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"PeerBID\":") << fun::ToString(PeerBID);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_NotifyPeerUdpSocketRestored_PArgs
  {
    // arguments.
    const fun::HostId* PeerBID;

    // Construction
    inline CNetC2S_NotifyPeerUdpSocketRestored_PArgs(const fun::HostId* PeerBID_)
      : PeerBID(PeerBID_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      EngineTypes_UserTypeHandlers::Write(Output__, *PeerBID);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"PeerBID\":") << fun::ToString(*PeerBID);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_NotifyJitDirectP2PTriggered_Args
  {
    // arguments.
    fun::HostId PeerBID;

    // Construction
    inline CNetC2S_NotifyJitDirectP2PTriggered_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, PeerBID));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"PeerBID\":") << fun::ToString(PeerBID);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_NotifyJitDirectP2PTriggered_PArgs
  {
    // arguments.
    const fun::HostId* PeerBID;

    // Construction
    inline CNetC2S_NotifyJitDirectP2PTriggered_PArgs(const fun::HostId* PeerBID_)
      : PeerBID(PeerBID_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      EngineTypes_UserTypeHandlers::Write(Output__, *PeerBID);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"PeerBID\":") << fun::ToString(*PeerBID);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_NotifyNatDeviceNameDetected_Args
  {
    // arguments.
    fun::String DeviceName;

    // Construction
    inline CNetC2S_NotifyNatDeviceNameDetected_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(fun::FlexFormat::ReadString(Input__, DeviceName));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"DeviceName\":\"") << fun::ToString(DeviceName) << TEXT("\"");
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_NotifyNatDeviceNameDetected_PArgs
  {
    // arguments.
    const fun::String* DeviceName;

    // Construction
    inline CNetC2S_NotifyNatDeviceNameDetected_PArgs(const fun::String* DeviceName_)
      : DeviceName(DeviceName_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      fun::FlexFormat::WriteString(Output__, *DeviceName);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"DeviceName\":\"") << fun::ToString(*DeviceName) << TEXT("\"");
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_NotifySendSpeed_Args
  {
    // arguments.
    double Speed;

    // Construction
    inline CNetC2S_NotifySendSpeed_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(fun::FlexFormat::ReadDouble(Input__, Speed));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"Speed\":") << fun::ToString(Speed);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_NotifySendSpeed_PArgs
  {
    // arguments.
    const double* Speed;

    // Construction
    inline CNetC2S_NotifySendSpeed_PArgs(const double* Speed_)
      : Speed(Speed_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      fun::FlexFormat::WriteDouble(Output__, *Speed);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"Speed\":") << fun::ToString(*Speed);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_ReportP2PPeerPing_Args
  {
    // arguments.
    fun::HostId peer_id;
    fun::uint32 recent_ping;

    // Construction
    inline CNetC2S_ReportP2PPeerPing_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, peer_id));
      DO_CHECKED__(fun::FlexFormat::ReadUInt32(Input__, recent_ping));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"peer_id\":") << fun::ToString(peer_id);
      result << TEXT("\",recent_ping\":") << fun::ToString(recent_ping);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_ReportP2PPeerPing_PArgs
  {
    // arguments.
    const fun::HostId* peer_id;
    const fun::uint32* recent_ping;

    // Construction
    inline CNetC2S_ReportP2PPeerPing_PArgs(const fun::HostId* PeerId_, const fun::uint32* RecentPing_)
      : peer_id(PeerId_)
      , recent_ping(RecentPing_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      EngineTypes_UserTypeHandlers::Write(Output__, *peer_id);
      fun::FlexFormat::WriteUInt32(Output__, *recent_ping);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"peer_id\":") << fun::ToString(*peer_id);
      result << TEXT("\",recent_ping\":") << fun::ToString(*recent_ping);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_C2S_CreateUdpSocketAck_Args
  {
    // arguments.
    bool bOk;

    // Construction
    inline CNetC2S_C2S_CreateUdpSocketAck_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(fun::FlexFormat::ReadBool(Input__, bOk));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"bOk\":") << fun::ToString(bOk);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_C2S_CreateUdpSocketAck_PArgs
  {
    // arguments.
    const bool* bOk;

    // Construction
    inline CNetC2S_C2S_CreateUdpSocketAck_PArgs(const bool* bOk_)
      : bOk(bOk_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      fun::FlexFormat::WriteBool(Output__, *bOk);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"bOk\":") << fun::ToString(*bOk);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_ReportC2CUdpMessageCount_Args
  {
    // arguments.
    fun::HostId peer_id;
    fun::uint32 udp_message_attempt_count;
    fun::uint32 udp_message_success_count;

    // Construction
    inline CNetC2S_ReportC2CUdpMessageCount_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, peer_id));
      DO_CHECKED__(fun::FlexFormat::ReadUInt32(Input__, udp_message_attempt_count));
      DO_CHECKED__(fun::FlexFormat::ReadUInt32(Input__, udp_message_success_count));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"peer_id\":") << fun::ToString(peer_id);
      result << TEXT("\",udp_message_attempt_count\":") << fun::ToString(udp_message_attempt_count);
      result << TEXT("\",udp_message_success_count\":") << fun::ToString(udp_message_success_count);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_ReportC2CUdpMessageCount_PArgs
  {
    // arguments.
    const fun::HostId* peer_id;
    const fun::uint32* udp_message_attempt_count;
    const fun::uint32* udp_message_success_count;

    // Construction
    inline CNetC2S_ReportC2CUdpMessageCount_PArgs(const fun::HostId* PeerId_, const fun::uint32* UdpMessageTrialCount_, const fun::uint32* UdpMessageSuccessCount_)
      : peer_id(PeerId_)
      , udp_message_attempt_count(UdpMessageTrialCount_)
      , udp_message_success_count(UdpMessageSuccessCount_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      EngineTypes_UserTypeHandlers::Write(Output__, *peer_id);
      fun::FlexFormat::WriteUInt32(Output__, *udp_message_attempt_count);
      fun::FlexFormat::WriteUInt32(Output__, *udp_message_success_count);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"peer_id\":") << fun::ToString(*peer_id);
      result << TEXT("\",udp_message_attempt_count\":") << fun::ToString(*udp_message_attempt_count);
      result << TEXT("\",udp_message_success_count\":") << fun::ToString(*udp_message_success_count);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_ReportC2SUdpMessageTrialCount_Args
  {
    // arguments.
    fun::uint32 to_server_udp_attempt_count;

    // Construction
    inline CNetC2S_ReportC2SUdpMessageTrialCount_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(fun::FlexFormat::ReadUInt32(Input__, to_server_udp_attempt_count));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"to_server_udp_attempt_count\":") << fun::ToString(to_server_udp_attempt_count);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetC2S_ReportC2SUdpMessageTrialCount_PArgs
  {
    // arguments.
    const fun::uint32* to_server_udp_attempt_count;

    // Construction
    inline CNetC2S_ReportC2SUdpMessageTrialCount_PArgs(const fun::uint32* ToServerUdpTrialCount_)
      : to_server_udp_attempt_count(ToServerUdpTrialCount_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      fun::FlexFormat::WriteUInt32(Output__, *to_server_udp_attempt_count);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"to_server_udp_attempt_count\":") << fun::ToString(*to_server_udp_attempt_count);
      result << TEXT("}");
      return result;
    }
  };
} // end of namespace NetC2S


//==============================================================================
// Service NetS2C
//==============================================================================

namespace NetS2C
{
  struct CNetS2C_P2PGroup_MemberJoin_Args
  {
    // arguments.
    fun::HostId group_id;
    fun::HostId member_id;
    fun::ByteArray custom_field;
    fun::uint32 event_id;
    fun::ByteArray P2PAESSessionKey;
    fun::ByteArray P2PRC4SessionKey;
    fun::FrameNumber p2p_first_frame_number;
    fun::Uuid ConnectionTag;
    bool direct_p2p_enabled;
    fun::int32 BindPort;

    // Construction
    inline CNetS2C_P2PGroup_MemberJoin_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, group_id));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, member_id));
      DO_CHECKED__(fun::FlexFormat::ReadBytes(Input__, custom_field));
      DO_CHECKED__(fun::FlexFormat::ReadUInt32(Input__, event_id));
      DO_CHECKED__(fun::FlexFormat::ReadBytes(Input__, P2PAESSessionKey));
      DO_CHECKED__(fun::FlexFormat::ReadBytes(Input__, P2PRC4SessionKey));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, p2p_first_frame_number));
      DO_CHECKED__(fun::FlexFormat::ReadGuid(Input__, ConnectionTag));
      DO_CHECKED__(fun::FlexFormat::ReadBool(Input__, direct_p2p_enabled));
      DO_CHECKED__(fun::FlexFormat::ReadSInt32(Input__, BindPort));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"group_id\":") << fun::ToString(group_id);
      result << TEXT("\",member_id\":") << fun::ToString(member_id);
      result << TEXT("\",custom_field\":") << fun::ToString(custom_field);
      result << TEXT("\",event_id\":") << fun::ToString(event_id);
      result << TEXT("\",P2PAESSessionKey\":") << fun::ToString(P2PAESSessionKey);
      result << TEXT("\",P2PRC4SessionKey\":") << fun::ToString(P2PRC4SessionKey);
      result << TEXT("\",p2p_first_frame_number\":") << fun::ToString(p2p_first_frame_number);
      result << TEXT("\",ConnectionTag\":") << fun::ToString(ConnectionTag);
      result << TEXT("\",direct_p2p_enabled\":") << fun::ToString(direct_p2p_enabled);
      result << TEXT("\",BindPort\":") << fun::ToString(BindPort);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetS2C_P2PGroup_MemberJoin_PArgs
  {
    // arguments.
    const fun::HostId* group_id;
    const fun::HostId* member_id;
    const fun::ByteArray* custom_field;
    const fun::uint32* event_id;
    const fun::ByteArray* P2PAESSessionKey;
    const fun::ByteArray* P2PRC4SessionKey;
    const fun::FrameNumber* p2p_first_frame_number;
    const fun::Uuid* ConnectionTag;
    const bool* direct_p2p_enabled;
    const fun::int32* BindPort;

    // Construction
    inline CNetS2C_P2PGroup_MemberJoin_PArgs(const fun::HostId* GroupId_, const fun::HostId* MemberId_, const fun::ByteArray* CustomField_, const fun::uint32* EventId_, const fun::ByteArray* P2PAESSessionKey_, const fun::ByteArray* P2PRC4SessionKey_, const fun::FrameNumber* P2PFirstFrameNumber_, const fun::Uuid* ConnectionTag_, const bool* bEnableDirectP2P_, const fun::int32* BindPort_)
      : group_id(GroupId_)
      , member_id(MemberId_)
      , custom_field(CustomField_)
      , event_id(EventId_)
      , P2PAESSessionKey(P2PAESSessionKey_)
      , P2PRC4SessionKey(P2PRC4SessionKey_)
      , p2p_first_frame_number(P2PFirstFrameNumber_)
      , ConnectionTag(ConnectionTag_)
      , direct_p2p_enabled(bEnableDirectP2P_)
      , BindPort(BindPort_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      EngineTypes_UserTypeHandlers::Write(Output__, *group_id);
      EngineTypes_UserTypeHandlers::Write(Output__, *member_id);
      fun::FlexFormat::WriteBytes(Output__, *custom_field);
      fun::FlexFormat::WriteUInt32(Output__, *event_id);
      fun::FlexFormat::WriteBytes(Output__, *P2PAESSessionKey);
      fun::FlexFormat::WriteBytes(Output__, *P2PRC4SessionKey);
      EngineTypes_UserTypeHandlers::Write(Output__, *p2p_first_frame_number);
      fun::FlexFormat::WriteGuid(Output__, *ConnectionTag);
      fun::FlexFormat::WriteBool(Output__, *direct_p2p_enabled);
      fun::FlexFormat::WriteSInt32(Output__, *BindPort);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"group_id\":") << fun::ToString(*group_id);
      result << TEXT("\",member_id\":") << fun::ToString(*member_id);
      result << TEXT("\",custom_field\":") << fun::ToString(*custom_field);
      result << TEXT("\",event_id\":") << fun::ToString(*event_id);
      result << TEXT("\",P2PAESSessionKey\":") << fun::ToString(*P2PAESSessionKey);
      result << TEXT("\",P2PRC4SessionKey\":") << fun::ToString(*P2PRC4SessionKey);
      result << TEXT("\",p2p_first_frame_number\":") << fun::ToString(*p2p_first_frame_number);
      result << TEXT("\",ConnectionTag\":") << fun::ToString(*ConnectionTag);
      result << TEXT("\",direct_p2p_enabled\":") << fun::ToString(*direct_p2p_enabled);
      result << TEXT("\",BindPort\":") << fun::ToString(*BindPort);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetS2C_P2PGroup_MemberJoin_Unencrypted_Args
  {
    // arguments.
    fun::HostId group_id;
    fun::HostId member_id;
    fun::ByteArray custom_field;
    fun::uint32 event_id;
    fun::FrameNumber p2p_first_frame_number;
    fun::Uuid ConnectionTag;
    bool direct_p2p_enabled;
    fun::int32 BindPort;

    // Construction
    inline CNetS2C_P2PGroup_MemberJoin_Unencrypted_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, group_id));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, member_id));
      DO_CHECKED__(fun::FlexFormat::ReadBytes(Input__, custom_field));
      DO_CHECKED__(fun::FlexFormat::ReadUInt32(Input__, event_id));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, p2p_first_frame_number));
      DO_CHECKED__(fun::FlexFormat::ReadGuid(Input__, ConnectionTag));
      DO_CHECKED__(fun::FlexFormat::ReadBool(Input__, direct_p2p_enabled));
      DO_CHECKED__(fun::FlexFormat::ReadSInt32(Input__, BindPort));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"group_id\":") << fun::ToString(group_id);
      result << TEXT("\",member_id\":") << fun::ToString(member_id);
      result << TEXT("\",custom_field\":") << fun::ToString(custom_field);
      result << TEXT("\",event_id\":") << fun::ToString(event_id);
      result << TEXT("\",p2p_first_frame_number\":") << fun::ToString(p2p_first_frame_number);
      result << TEXT("\",ConnectionTag\":") << fun::ToString(ConnectionTag);
      result << TEXT("\",direct_p2p_enabled\":") << fun::ToString(direct_p2p_enabled);
      result << TEXT("\",BindPort\":") << fun::ToString(BindPort);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetS2C_P2PGroup_MemberJoin_Unencrypted_PArgs
  {
    // arguments.
    const fun::HostId* group_id;
    const fun::HostId* member_id;
    const fun::ByteArray* custom_field;
    const fun::uint32* event_id;
    const fun::FrameNumber* p2p_first_frame_number;
    const fun::Uuid* ConnectionTag;
    const bool* direct_p2p_enabled;
    const fun::int32* BindPort;

    // Construction
    inline CNetS2C_P2PGroup_MemberJoin_Unencrypted_PArgs(const fun::HostId* GroupId_, const fun::HostId* MemberId_, const fun::ByteArray* CustomField_, const fun::uint32* EventId_, const fun::FrameNumber* P2PFirstFrameNumber_, const fun::Uuid* ConnectionTag_, const bool* bEnableDirectP2P_, const fun::int32* BindPort_)
      : group_id(GroupId_)
      , member_id(MemberId_)
      , custom_field(CustomField_)
      , event_id(EventId_)
      , p2p_first_frame_number(P2PFirstFrameNumber_)
      , ConnectionTag(ConnectionTag_)
      , direct_p2p_enabled(bEnableDirectP2P_)
      , BindPort(BindPort_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      EngineTypes_UserTypeHandlers::Write(Output__, *group_id);
      EngineTypes_UserTypeHandlers::Write(Output__, *member_id);
      fun::FlexFormat::WriteBytes(Output__, *custom_field);
      fun::FlexFormat::WriteUInt32(Output__, *event_id);
      EngineTypes_UserTypeHandlers::Write(Output__, *p2p_first_frame_number);
      fun::FlexFormat::WriteGuid(Output__, *ConnectionTag);
      fun::FlexFormat::WriteBool(Output__, *direct_p2p_enabled);
      fun::FlexFormat::WriteSInt32(Output__, *BindPort);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"group_id\":") << fun::ToString(*group_id);
      result << TEXT("\",member_id\":") << fun::ToString(*member_id);
      result << TEXT("\",custom_field\":") << fun::ToString(*custom_field);
      result << TEXT("\",event_id\":") << fun::ToString(*event_id);
      result << TEXT("\",p2p_first_frame_number\":") << fun::ToString(*p2p_first_frame_number);
      result << TEXT("\",ConnectionTag\":") << fun::ToString(*ConnectionTag);
      result << TEXT("\",direct_p2p_enabled\":") << fun::ToString(*direct_p2p_enabled);
      result << TEXT("\",BindPort\":") << fun::ToString(*BindPort);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetS2C_P2PRecycleComplete_Args
  {
    // arguments.
    fun::HostId peer_id;
    bool bRecycled;
    fun::InetAddress internal_addr;
    fun::InetAddress external_addr;
    fun::InetAddress SendAddr;
    fun::InetAddress RecvAddr;

    // Construction
    inline CNetS2C_P2PRecycleComplete_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, peer_id));
      DO_CHECKED__(fun::FlexFormat::ReadBool(Input__, bRecycled));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, internal_addr));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, external_addr));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, SendAddr));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, RecvAddr));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"peer_id\":") << fun::ToString(peer_id);
      result << TEXT("\",bRecycled\":") << fun::ToString(bRecycled);
      result << TEXT("\",internal_addr\":") << fun::ToString(internal_addr);
      result << TEXT("\",external_addr\":") << fun::ToString(external_addr);
      result << TEXT("\",SendAddr\":") << fun::ToString(SendAddr);
      result << TEXT("\",RecvAddr\":") << fun::ToString(RecvAddr);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetS2C_P2PRecycleComplete_PArgs
  {
    // arguments.
    const fun::HostId* peer_id;
    const bool* bRecycled;
    const fun::InetAddress* internal_addr;
    const fun::InetAddress* external_addr;
    const fun::InetAddress* SendAddr;
    const fun::InetAddress* RecvAddr;

    // Construction
    inline CNetS2C_P2PRecycleComplete_PArgs(const fun::HostId* PeerId_, const bool* bRecycled_, const fun::InetAddress* InternalAddr_, const fun::InetAddress* ExternalAddr_, const fun::InetAddress* SendAddr_, const fun::InetAddress* RecvAddr_)
      : peer_id(PeerId_)
      , bRecycled(bRecycled_)
      , internal_addr(InternalAddr_)
      , external_addr(ExternalAddr_)
      , SendAddr(SendAddr_)
      , RecvAddr(RecvAddr_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      EngineTypes_UserTypeHandlers::Write(Output__, *peer_id);
      fun::FlexFormat::WriteBool(Output__, *bRecycled);
      EngineTypes_UserTypeHandlers::Write(Output__, *internal_addr);
      EngineTypes_UserTypeHandlers::Write(Output__, *external_addr);
      EngineTypes_UserTypeHandlers::Write(Output__, *SendAddr);
      EngineTypes_UserTypeHandlers::Write(Output__, *RecvAddr);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"peer_id\":") << fun::ToString(*peer_id);
      result << TEXT("\",bRecycled\":") << fun::ToString(*bRecycled);
      result << TEXT("\",internal_addr\":") << fun::ToString(*internal_addr);
      result << TEXT("\",external_addr\":") << fun::ToString(*external_addr);
      result << TEXT("\",SendAddr\":") << fun::ToString(*SendAddr);
      result << TEXT("\",RecvAddr\":") << fun::ToString(*RecvAddr);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetS2C_RequestP2PHolepunch_Args
  {
    // arguments.
    fun::HostId peer_id;
    fun::InetAddress internal_addr;
    fun::InetAddress external_addr;

    // Construction
    inline CNetS2C_RequestP2PHolepunch_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, peer_id));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, internal_addr));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, external_addr));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"peer_id\":") << fun::ToString(peer_id);
      result << TEXT("\",internal_addr\":") << fun::ToString(internal_addr);
      result << TEXT("\",external_addr\":") << fun::ToString(external_addr);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetS2C_RequestP2PHolepunch_PArgs
  {
    // arguments.
    const fun::HostId* peer_id;
    const fun::InetAddress* internal_addr;
    const fun::InetAddress* external_addr;

    // Construction
    inline CNetS2C_RequestP2PHolepunch_PArgs(const fun::HostId* PeerId_, const fun::InetAddress* InternalAddr_, const fun::InetAddress* ExternalAddr_)
      : peer_id(PeerId_)
      , internal_addr(InternalAddr_)
      , external_addr(ExternalAddr_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      EngineTypes_UserTypeHandlers::Write(Output__, *peer_id);
      EngineTypes_UserTypeHandlers::Write(Output__, *internal_addr);
      EngineTypes_UserTypeHandlers::Write(Output__, *external_addr);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"peer_id\":") << fun::ToString(*peer_id);
      result << TEXT("\",internal_addr\":") << fun::ToString(*internal_addr);
      result << TEXT("\",external_addr\":") << fun::ToString(*external_addr);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetS2C_P2P_NotifyDirectP2PDisconnected2_Args
  {
    // arguments.
    fun::HostId peer_id;
    fun::ResultCode reason;

    // Construction
    inline CNetS2C_P2P_NotifyDirectP2PDisconnected2_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, peer_id));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, reason));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"peer_id\":") << fun::ToString(peer_id);
      result << TEXT("\",reason\":") << fun::ToString(reason);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetS2C_P2P_NotifyDirectP2PDisconnected2_PArgs
  {
    // arguments.
    const fun::HostId* peer_id;
    const fun::ResultCode* reason;

    // Construction
    inline CNetS2C_P2P_NotifyDirectP2PDisconnected2_PArgs(const fun::HostId* PeerId_, const fun::ResultCode* Reason_)
      : peer_id(PeerId_)
      , reason(Reason_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      EngineTypes_UserTypeHandlers::Write(Output__, *peer_id);
      EngineTypes_UserTypeHandlers::Write(Output__, *reason);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"peer_id\":") << fun::ToString(*peer_id);
      result << TEXT("\",reason\":") << fun::ToString(*reason);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetS2C_P2PGroup_MemberLeave_Args
  {
    // arguments.
    fun::HostId member_id;
    fun::HostId group_id;

    // Construction
    inline CNetS2C_P2PGroup_MemberLeave_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, member_id));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, group_id));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"member_id\":") << fun::ToString(member_id);
      result << TEXT("\",group_id\":") << fun::ToString(group_id);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetS2C_P2PGroup_MemberLeave_PArgs
  {
    // arguments.
    const fun::HostId* member_id;
    const fun::HostId* group_id;

    // Construction
    inline CNetS2C_P2PGroup_MemberLeave_PArgs(const fun::HostId* MemberId_, const fun::HostId* GroupId_)
      : member_id(MemberId_)
      , group_id(GroupId_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      EngineTypes_UserTypeHandlers::Write(Output__, *member_id);
      EngineTypes_UserTypeHandlers::Write(Output__, *group_id);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"member_id\":") << fun::ToString(*member_id);
      result << TEXT("\",group_id\":") << fun::ToString(*group_id);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetS2C_NotifyDirectP2PEstablish_Args
  {
    // arguments.
    fun::HostId A0;
    fun::HostId B0;
    fun::InetAddress X0;
    fun::InetAddress Y0;
    fun::InetAddress Z0;
    fun::InetAddress W0;

    // Construction
    inline CNetS2C_NotifyDirectP2PEstablish_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, A0));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, B0));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, X0));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, Y0));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, Z0));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, W0));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"A0\":") << fun::ToString(A0);
      result << TEXT("\",B0\":") << fun::ToString(B0);
      result << TEXT("\",X0\":") << fun::ToString(X0);
      result << TEXT("\",Y0\":") << fun::ToString(Y0);
      result << TEXT("\",Z0\":") << fun::ToString(Z0);
      result << TEXT("\",W0\":") << fun::ToString(W0);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetS2C_NotifyDirectP2PEstablish_PArgs
  {
    // arguments.
    const fun::HostId* A0;
    const fun::HostId* B0;
    const fun::InetAddress* X0;
    const fun::InetAddress* Y0;
    const fun::InetAddress* Z0;
    const fun::InetAddress* W0;

    // Construction
    inline CNetS2C_NotifyDirectP2PEstablish_PArgs(const fun::HostId* A0_, const fun::HostId* B0_, const fun::InetAddress* X0_, const fun::InetAddress* Y0_, const fun::InetAddress* Z0_, const fun::InetAddress* W0_)
      : A0(A0_)
      , B0(B0_)
      , X0(X0_)
      , Y0(Y0_)
      , Z0(Z0_)
      , W0(W0_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      EngineTypes_UserTypeHandlers::Write(Output__, *A0);
      EngineTypes_UserTypeHandlers::Write(Output__, *B0);
      EngineTypes_UserTypeHandlers::Write(Output__, *X0);
      EngineTypes_UserTypeHandlers::Write(Output__, *Y0);
      EngineTypes_UserTypeHandlers::Write(Output__, *Z0);
      EngineTypes_UserTypeHandlers::Write(Output__, *W0);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"A0\":") << fun::ToString(*A0);
      result << TEXT("\",B0\":") << fun::ToString(*B0);
      result << TEXT("\",X0\":") << fun::ToString(*X0);
      result << TEXT("\",Y0\":") << fun::ToString(*Y0);
      result << TEXT("\",Z0\":") << fun::ToString(*Z0);
      result << TEXT("\",W0\":") << fun::ToString(*W0);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetS2C_NotifySpeedHackDetectorEnabled_Args
  {
    // arguments.
    bool bEnabled;

    // Construction
    inline CNetS2C_NotifySpeedHackDetectorEnabled_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(fun::FlexFormat::ReadBool(Input__, bEnabled));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"bEnabled\":") << fun::ToString(bEnabled);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetS2C_NotifySpeedHackDetectorEnabled_PArgs
  {
    // arguments.
    const bool* bEnabled;

    // Construction
    inline CNetS2C_NotifySpeedHackDetectorEnabled_PArgs(const bool* bEnabled_)
      : bEnabled(bEnabled_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      fun::FlexFormat::WriteBool(Output__, *bEnabled);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"bEnabled\":") << fun::ToString(*bEnabled);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetS2C_RenewP2PConnectionState_Args
  {
    // arguments.
    fun::HostId peer_id;

    // Construction
    inline CNetS2C_RenewP2PConnectionState_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, peer_id));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"peer_id\":") << fun::ToString(peer_id);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetS2C_RenewP2PConnectionState_PArgs
  {
    // arguments.
    const fun::HostId* peer_id;

    // Construction
    inline CNetS2C_RenewP2PConnectionState_PArgs(const fun::HostId* PeerId_)
      : peer_id(PeerId_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      EngineTypes_UserTypeHandlers::Write(Output__, *peer_id);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"peer_id\":") << fun::ToString(*peer_id);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetS2C_NewDirectP2PConnection_Args
  {
    // arguments.
    fun::HostId peer_id;

    // Construction
    inline CNetS2C_NewDirectP2PConnection_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, peer_id));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"peer_id\":") << fun::ToString(peer_id);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetS2C_NewDirectP2PConnection_PArgs
  {
    // arguments.
    const fun::HostId* peer_id;

    // Construction
    inline CNetS2C_NewDirectP2PConnection_PArgs(const fun::HostId* PeerId_)
      : peer_id(PeerId_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      EngineTypes_UserTypeHandlers::Write(Output__, *peer_id);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"peer_id\":") << fun::ToString(*peer_id);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetS2C_RequestMeasureSendSpeed_Args
  {
    // arguments.
    bool bEnabled;

    // Construction
    inline CNetS2C_RequestMeasureSendSpeed_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(fun::FlexFormat::ReadBool(Input__, bEnabled));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"bEnabled\":") << fun::ToString(bEnabled);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetS2C_RequestMeasureSendSpeed_PArgs
  {
    // arguments.
    const bool* bEnabled;

    // Construction
    inline CNetS2C_RequestMeasureSendSpeed_PArgs(const bool* bEnabled_)
      : bEnabled(bEnabled_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      fun::FlexFormat::WriteBool(Output__, *bEnabled);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"bEnabled\":") << fun::ToString(*bEnabled);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetS2C_S2C_RequestCreateUdpSocket_Args
  {
    // arguments.
    fun::NamedInetAddress ServerUdpAddr;

    // Construction
    inline CNetS2C_S2C_RequestCreateUdpSocket_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, ServerUdpAddr));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"ServerUdpAddr\":") << fun::ToString(ServerUdpAddr);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetS2C_S2C_RequestCreateUdpSocket_PArgs
  {
    // arguments.
    const fun::NamedInetAddress* ServerUdpAddr;

    // Construction
    inline CNetS2C_S2C_RequestCreateUdpSocket_PArgs(const fun::NamedInetAddress* ServerUdpAddr_)
      : ServerUdpAddr(ServerUdpAddr_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      EngineTypes_UserTypeHandlers::Write(Output__, *ServerUdpAddr);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"ServerUdpAddr\":") << fun::ToString(*ServerUdpAddr);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetS2C_S2C_CreateUdpSocketAck_Args
  {
    // arguments.
    bool bOk;
    fun::NamedInetAddress ServerUdpAddr;

    // Construction
    inline CNetS2C_S2C_CreateUdpSocketAck_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(fun::FlexFormat::ReadBool(Input__, bOk));
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, ServerUdpAddr));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"bOk\":") << fun::ToString(bOk);
      result << TEXT("\",ServerUdpAddr\":") << fun::ToString(ServerUdpAddr);
      result << TEXT("}");
      return result;
    }
  };

  struct CNetS2C_S2C_CreateUdpSocketAck_PArgs
  {
    // arguments.
    const bool* bOk;
    const fun::NamedInetAddress* ServerUdpAddr;

    // Construction
    inline CNetS2C_S2C_CreateUdpSocketAck_PArgs(const bool* bOk_, const fun::NamedInetAddress* ServerUdpAddr_)
      : bOk(bOk_)
      , ServerUdpAddr(ServerUdpAddr_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      fun::FlexFormat::WriteBool(Output__, *bOk);
      EngineTypes_UserTypeHandlers::Write(Output__, *ServerUdpAddr);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"bOk\":") << fun::ToString(*bOk);
      result << TEXT("\",ServerUdpAddr\":") << fun::ToString(*ServerUdpAddr);
      result << TEXT("}");
      return result;
    }
  };
} // end of namespace NetS2C


} // end of namespace fun

#undef IDL_BEGIN_GLOBAL_NAMESPACE
#undef IDL_END_GLOBAL_NAMESPACE
