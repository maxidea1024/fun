/**
 * Auto-generated by IDL Compiler (2.1.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#pragma once

#include "FUN.h"
#include "agent_types.h"

#define IDL_BEGIN_GLOBAL_NAMESPACE }
#define IDL_END_GLOBAL_NAMESPACE namespace fun {

namespace fun {

//==============================================================================
// Service AgentC2S
//==============================================================================

namespace AgentC2S
{
  struct CAgentC2S_RequestCredential_Args
  {
    // arguments.
    fun::int32 Cookie;

    // Construction
    inline CAgentC2S_RequestCredential_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(fun::FlexFormat::ReadInt32(Input__, Cookie));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"Cookie\":") << fun::ToString(Cookie);
      result << TEXT("}");
      return result;
    }
  };

  struct CAgentC2S_RequestCredential_PArgs
  {
    // arguments.
    const fun::int32* Cookie;

    // Construction
    inline CAgentC2S_RequestCredential_PArgs(const fun::int32* Cookie_)
      : Cookie(Cookie_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      fun::FlexFormat::WriteInt32(Output__, *Cookie);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"Cookie\":") << fun::ToString(*Cookie);
      result << TEXT("}");
      return result;
    }
  };

  struct CAgentC2S_ReportStatusBegin_Args
  {
    // arguments.
    fun::uint8 Type;
    fun::String text;

    // Construction
    inline CAgentC2S_ReportStatusBegin_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(fun::FlexFormat::ReadFixed8(Input__, Type));
      DO_CHECKED__(fun::FlexFormat::ReadString(Input__, text));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"Type\":") << fun::ToString(Type);
      result << TEXT("\",text\":\"") << fun::ToString(text) << TEXT("\"");
      result << TEXT("}");
      return result;
    }
  };

  struct CAgentC2S_ReportStatusBegin_PArgs
  {
    // arguments.
    const fun::uint8* Type;
    const fun::String* text;

    // Construction
    inline CAgentC2S_ReportStatusBegin_PArgs(const fun::uint8* Type_, const fun::String* Text_)
      : Type(Type_)
      , text(Text_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      fun::FlexFormat::WriteFixed8(Output__, *Type);
      fun::FlexFormat::WriteString(Output__, *text);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"Type\":") << fun::ToString(*Type);
      result << TEXT("\",text\":\"") << fun::ToString(*text) << TEXT("\"");
      result << TEXT("}");
      return result;
    }
  };

  struct CAgentC2S_ReportStatusValue_Args
  {
    // arguments.
    fun::String Key;
    fun::String Value;

    // Construction
    inline CAgentC2S_ReportStatusValue_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(fun::FlexFormat::ReadString(Input__, Key));
      DO_CHECKED__(fun::FlexFormat::ReadString(Input__, Value));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"Key\":\"") << fun::ToString(Key) << TEXT("\"");
      result << TEXT("\",Value\":\"") << fun::ToString(Value) << TEXT("\"");
      result << TEXT("}");
      return result;
    }
  };

  struct CAgentC2S_ReportStatusValue_PArgs
  {
    // arguments.
    const fun::String* Key;
    const fun::String* Value;

    // Construction
    inline CAgentC2S_ReportStatusValue_PArgs(const fun::String* Key_, const fun::String* Value_)
      : Key(Key_)
      , Value(Value_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      fun::FlexFormat::WriteString(Output__, *Key);
      fun::FlexFormat::WriteString(Output__, *Value);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"Key\":\"") << fun::ToString(*Key) << TEXT("\"");
      result << TEXT("\",Value\":\"") << fun::ToString(*Value) << TEXT("\"");
      result << TEXT("}");
      return result;
    }
  };

  struct CAgentC2S_ReportServerAppState_Args
  {
    // arguments.
    float CpuUserTime;
    float CpuKerenlTime;
    fun::int32 MemorySize;

    // Construction
    inline CAgentC2S_ReportServerAppState_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(fun::FlexFormat::ReadFloat(Input__, CpuUserTime));
      DO_CHECKED__(fun::FlexFormat::ReadFloat(Input__, CpuKerenlTime));
      DO_CHECKED__(fun::FlexFormat::ReadSInt32(Input__, MemorySize));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"CpuUserTime\":") << fun::ToString(CpuUserTime);
      result << TEXT("\",CpuKerenlTime\":") << fun::ToString(CpuKerenlTime);
      result << TEXT("\",MemorySize\":") << fun::ToString(MemorySize);
      result << TEXT("}");
      return result;
    }
  };

  struct CAgentC2S_ReportServerAppState_PArgs
  {
    // arguments.
    const float* CpuUserTime;
    const float* CpuKerenlTime;
    const fun::int32* MemorySize;

    // Construction
    inline CAgentC2S_ReportServerAppState_PArgs(const float* CpuUserTime_, const float* CpuKerenlTime_, const fun::int32* MemorySize_)
      : CpuUserTime(CpuUserTime_)
      , CpuKerenlTime(CpuKerenlTime_)
      , MemorySize(MemorySize_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      fun::FlexFormat::WriteFloat(Output__, *CpuUserTime);
      fun::FlexFormat::WriteFloat(Output__, *CpuKerenlTime);
      fun::FlexFormat::WriteSInt32(Output__, *MemorySize);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"CpuUserTime\":") << fun::ToString(*CpuUserTime);
      result << TEXT("\",CpuKerenlTime\":") << fun::ToString(*CpuKerenlTime);
      result << TEXT("\",MemorySize\":") << fun::ToString(*MemorySize);
      result << TEXT("}");
      return result;
    }
  };

  struct CAgentC2S_EventLog_Args
  {
    // arguments.
    fun::LogCategory Category;
    fun::String text;

    // Construction
    inline CAgentC2S_EventLog_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(Input__, Category));
      DO_CHECKED__(fun::FlexFormat::ReadString(Input__, text));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"Category\":") << fun::ToString(Category);
      result << TEXT("\",text\":\"") << fun::ToString(text) << TEXT("\"");
      result << TEXT("}");
      return result;
    }
  };

  struct CAgentC2S_EventLog_PArgs
  {
    // arguments.
    const fun::LogCategory* Category;
    const fun::String* text;

    // Construction
    inline CAgentC2S_EventLog_PArgs(const fun::LogCategory* Category_, const fun::String* Text_)
      : Category(Category_)
      , text(Text_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      EngineTypes_UserTypeHandlers::Write(Output__, *Category);
      fun::FlexFormat::WriteString(Output__, *text);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"Category\":") << fun::ToString(*Category);
      result << TEXT("\",text\":\"") << fun::ToString(*text) << TEXT("\"");
      result << TEXT("}");
      return result;
    }
  };
} // end of namespace AgentC2S


//==============================================================================
// Service AgentS2C
//==============================================================================

namespace AgentS2C
{
  struct CAgentS2C_NotifyCredential_Args
  {
    // arguments.
    bool bAuthentication;

    // Construction
    inline CAgentS2C_NotifyCredential_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(fun::FlexFormat::ReadBool(Input__, bAuthentication));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"bAuthentication\":") << fun::ToString(bAuthentication);
      result << TEXT("}");
      return result;
    }
  };

  struct CAgentS2C_NotifyCredential_PArgs
  {
    // arguments.
    const bool* bAuthentication;

    // Construction
    inline CAgentS2C_NotifyCredential_PArgs(const bool* bAuthentication_)
      : bAuthentication(bAuthentication_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      fun::FlexFormat::WriteBool(Output__, *bAuthentication);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"bAuthentication\":") << fun::ToString(*bAuthentication);
      result << TEXT("}");
      return result;
    }
  };
} // end of namespace AgentS2C


} // end of namespace fun

#undef IDL_BEGIN_GLOBAL_NAMESPACE
#undef IDL_END_GLOBAL_NAMESPACE
