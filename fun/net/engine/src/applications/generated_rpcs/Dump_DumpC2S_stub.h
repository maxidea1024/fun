/**
 * Auto-generated by IDL Compiler (1.0.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#pragma once

#include "FUN.h"
#include "Dump_defs.h"
#include "Dump_types.h"

namespace fun {
namespace DumpC2S
{
  struct Stub : public fun::RpcStub
  {
    fun::int32 GetDeclaredRpcCount() const override { return DumpC2S::NumRpcFunctions; }
    const fun::RpcId* GetDeclaredRpcIds() const override { return DumpC2S::RpcIds::RpcIdList(); }
    const char** GetDeclaredRpcNames() const override { return DumpC2S::RpcNames::RpcNameList(); }

    // Start
    virtual bool Start(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) { return false; }
    #define DECLARE_RPCSTUB_DumpC2S_Start bool Start(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) override;
    #define IMPLEMENT_RPCSTUB_DumpC2S_Start(TClass) bool TClass::Start(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)> StartFunctionType;
    StartFunctionType OnStart;

    // Chunk
    virtual bool Chunk(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::ByteArray& Chunk) { return false; }
    #define DECLARE_RPCSTUB_DumpC2S_Chunk bool Chunk(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::ByteArray& Chunk) override;
    #define IMPLEMENT_RPCSTUB_DumpC2S_Chunk(TClass) bool TClass::Chunk(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::ByteArray& Chunk)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::ByteArray& /* Chunk */)> ChunkFunctionType;
    ChunkFunctionType OnChunk;

    // End
    virtual bool End(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) { return false; }
    #define DECLARE_RPCSTUB_DumpC2S_End bool End(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) override;
    #define IMPLEMENT_RPCSTUB_DumpC2S_End(TClass) bool TClass::End(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)> EndFunctionType;
    EndFunctionType OnEnd;

    // RpcStub interface
    bool ProcessReceivedMessage(fun::ReceivedMessage& received_msg, void* host_tag) override;
  };

} // end of namespace DumpC2S

} // end of namespace fun
