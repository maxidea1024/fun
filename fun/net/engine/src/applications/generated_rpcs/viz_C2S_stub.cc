/**
 * Auto-generated by IDL Compiler (1.0.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "viz_C2S_stub.h"
#include "viz.h" // _Args, _PArgs

namespace fun { namespace Viz {
namespace C2S
{
  bool Stub::ProcessReceivedMessage(fun::ReceivedMessage& received_msg, void* host_tag)
  {
    #define DO_CHECKED__(Expr) { if (!(Expr)) goto Failure__; }

    const fun::HostId RemoteId__ = received_msg.remote_id;
    fun::IMessageIn& ImmutableMessage__ = received_msg.unsafe_message;
    const fun::int32 SavedReadPosition__ = ImmutableMessage__.GetPosition();

    fun::RpcHint RpcHint__;
    RpcHint__.relayed = received_msg.relayed;
    RpcHint__.host_tag = host_tag;

    fun::RpcId RpcId__;
    fun::RpcHeader RpcHeader__;
    DO_CHECKED__(fun::LiteFormat::Read(ImmutableMessage__, RpcId__));
    DO_CHECKED__(RpcHeader__.Read(ImmutableMessage__));

    RpcHint__.result_code = RpcHeader__.result_code;
    RpcHint__.error_message = RpcHeader__.error_message;

    switch ((fun::uint32)RpcId__)
    {
      case (fun::uint32)RpcIds::RequestLogin:
      {
          // Declare arguments.
          fun::String AuthenticationKey;
          fun::HostId VizOwnerId = fun::HostId_None;

          // Read arguments.
          if (RpcHint__.result_code == 0)
          {
            DO_CHECKED__(fun::FlexFormat::ReadString(ImmutableMessage__, AuthenticationKey));
            DO_CHECKED__(fun::EngineTypes_UserTypeHandlers::Read(ImmutableMessage__, VizOwnerId));
          }

          Core->PostCheckReadMessage(ImmutableMessage__, RpcIds::RequestLogin, RpcNames::RequestLogin());

          // NotifyCallFromStub
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            fun::String ArgsStr__ = TEXT("{");
            ArgsStr__ += TEXT("\"AuthenticationKey\":") + fun::ToString(AuthenticationKey);
            ArgsStr__ += TEXT(",\"VizOwnerId\":") + fun::ToString(VizOwnerId);
            ArgsStr__ += TEXT("}");

            Core->NotifyCallFromStub(RpcIds::RequestLogin, RpcNames::RequestLogin(), ArgsStr__);
          }

          // Before RPC invocation.
          fun::uint32 InvocationTime__ = 0;
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->BeforeRpcInvocation(fun::BeforeRpcSummary(RpcIds::RequestLogin, RpcNames::RequestLogin(), RemoteId__, host_tag));
            InvocationTime__ = fun::Clock::Milliseconds();
          }

          bool bIsImplemented__ = false;
          // First, try function object.
          if ((bool)OnRequestLogin)
          {
            bIsImplemented__ = OnRequestLogin(RemoteId__, RpcHint__, AuthenticationKey, VizOwnerId);
          }
          // Second, call derived stub function.
          else
          {
            bIsImplemented__ = RequestLogin(RemoteId__, RpcHint__, AuthenticationKey, VizOwnerId);
          }

          if (!bIsImplemented__)
          {
            Core->ShowNotImplementedRpcWarning(RpcIds::RequestLogin, RpcNames::RequestLogin());
          }

          // After RPC invocation.
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->AfterRpcInvocation(fun::AfterRpcSummary(RpcIds::RequestLogin, RpcNames::RequestLogin(), RemoteId__, host_tag, fun::Clock::Milliseconds() - InvocationTime__));
          }

          return true;
      }

      case (fun::uint32)RpcIds::NotifyCommon_SendRpc:
      {
          // Declare arguments.
          fun::HostIdArray send_to = fun::HostIdArray();
          fun::VizMessageSummary summary = fun::VizMessageSummary();

          // Read arguments.
          if (RpcHint__.result_code == 0)
          {
            DO_CHECKED__(fun::EngineTypes_UserTypeHandlers::Read(ImmutableMessage__, send_to));
            DO_CHECKED__(fun::EngineTypes_UserTypeHandlers::Read(ImmutableMessage__, summary));
          }

          Core->PostCheckReadMessage(ImmutableMessage__, RpcIds::NotifyCommon_SendRpc, RpcNames::NotifyCommon_SendRpc());

          // NotifyCallFromStub
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            fun::String ArgsStr__ = TEXT("{");
            ArgsStr__ += TEXT("\"send_to\":") + fun::ToString(send_to);
            ArgsStr__ += TEXT(",\"summary\":") + fun::ToString(summary);
            ArgsStr__ += TEXT("}");

            Core->NotifyCallFromStub(RpcIds::NotifyCommon_SendRpc, RpcNames::NotifyCommon_SendRpc(), ArgsStr__);
          }

          // Before RPC invocation.
          fun::uint32 InvocationTime__ = 0;
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->BeforeRpcInvocation(fun::BeforeRpcSummary(RpcIds::NotifyCommon_SendRpc, RpcNames::NotifyCommon_SendRpc(), RemoteId__, host_tag));
            InvocationTime__ = fun::Clock::Milliseconds();
          }

          bool bIsImplemented__ = false;
          // First, try function object.
          if ((bool)OnNotifyCommon_SendRpc)
          {
            bIsImplemented__ = OnNotifyCommon_SendRpc(RemoteId__, RpcHint__, send_to, summary);
          }
          // Second, call derived stub function.
          else
          {
            bIsImplemented__ = NotifyCommon_SendRpc(RemoteId__, RpcHint__, send_to, summary);
          }

          if (!bIsImplemented__)
          {
            Core->ShowNotImplementedRpcWarning(RpcIds::NotifyCommon_SendRpc, RpcNames::NotifyCommon_SendRpc());
          }

          // After RPC invocation.
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->AfterRpcInvocation(fun::AfterRpcSummary(RpcIds::NotifyCommon_SendRpc, RpcNames::NotifyCommon_SendRpc(), RemoteId__, host_tag, fun::Clock::Milliseconds() - InvocationTime__));
          }

          return true;
      }

      case (fun::uint32)RpcIds::NotifyCommon_ReceiveRpc:
      {
          // Declare arguments.
          fun::HostId RecvFrom = fun::HostId_None;
          fun::String rpc_name;
          fun::RpcId rpc_id = (fun::RpcId)0;

          // Read arguments.
          if (RpcHint__.result_code == 0)
          {
            DO_CHECKED__(fun::EngineTypes_UserTypeHandlers::Read(ImmutableMessage__, RecvFrom));
            DO_CHECKED__(fun::FlexFormat::ReadString(ImmutableMessage__, rpc_name));
            DO_CHECKED__(fun::EngineTypes_UserTypeHandlers::Read(ImmutableMessage__, rpc_id));
          }

          Core->PostCheckReadMessage(ImmutableMessage__, RpcIds::NotifyCommon_ReceiveRpc, RpcNames::NotifyCommon_ReceiveRpc());

          // NotifyCallFromStub
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            fun::String ArgsStr__ = TEXT("{");
            ArgsStr__ += TEXT("\"RecvFrom\":") + fun::ToString(RecvFrom);
            ArgsStr__ += TEXT(",\"rpc_name\":") + fun::ToString(rpc_name);
            ArgsStr__ += TEXT(",\"rpc_id\":") + fun::ToString(rpc_id);
            ArgsStr__ += TEXT("}");

            Core->NotifyCallFromStub(RpcIds::NotifyCommon_ReceiveRpc, RpcNames::NotifyCommon_ReceiveRpc(), ArgsStr__);
          }

          // Before RPC invocation.
          fun::uint32 InvocationTime__ = 0;
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->BeforeRpcInvocation(fun::BeforeRpcSummary(RpcIds::NotifyCommon_ReceiveRpc, RpcNames::NotifyCommon_ReceiveRpc(), RemoteId__, host_tag));
            InvocationTime__ = fun::Clock::Milliseconds();
          }

          bool bIsImplemented__ = false;
          // First, try function object.
          if ((bool)OnNotifyCommon_ReceiveRpc)
          {
            bIsImplemented__ = OnNotifyCommon_ReceiveRpc(RemoteId__, RpcHint__, RecvFrom, rpc_name, rpc_id);
          }
          // Second, call derived stub function.
          else
          {
            bIsImplemented__ = NotifyCommon_ReceiveRpc(RemoteId__, RpcHint__, RecvFrom, rpc_name, rpc_id);
          }

          if (!bIsImplemented__)
          {
            Core->ShowNotImplementedRpcWarning(RpcIds::NotifyCommon_ReceiveRpc, RpcNames::NotifyCommon_ReceiveRpc());
          }

          // After RPC invocation.
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->AfterRpcInvocation(fun::AfterRpcSummary(RpcIds::NotifyCommon_ReceiveRpc, RpcNames::NotifyCommon_ReceiveRpc(), RemoteId__, host_tag, fun::Clock::Milliseconds() - InvocationTime__));
          }

          return true;
      }

      case (fun::uint32)RpcIds::NotifyCli_ConnectionState:
      {
          // Declare arguments.
          fun::ConnectionState ConnectionState = (fun::ConnectionState)0;

          // Read arguments.
          if (RpcHint__.result_code == 0)
          {
            DO_CHECKED__(fun::EngineTypes_UserTypeHandlers::Read(ImmutableMessage__, ConnectionState));
          }

          Core->PostCheckReadMessage(ImmutableMessage__, RpcIds::NotifyCli_ConnectionState, RpcNames::NotifyCli_ConnectionState());

          // NotifyCallFromStub
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            fun::String ArgsStr__ = TEXT("{");
            ArgsStr__ += TEXT("\"ConnectionState\":") + fun::ToString(ConnectionState);
            ArgsStr__ += TEXT("}");

            Core->NotifyCallFromStub(RpcIds::NotifyCli_ConnectionState, RpcNames::NotifyCli_ConnectionState(), ArgsStr__);
          }

          // Before RPC invocation.
          fun::uint32 InvocationTime__ = 0;
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->BeforeRpcInvocation(fun::BeforeRpcSummary(RpcIds::NotifyCli_ConnectionState, RpcNames::NotifyCli_ConnectionState(), RemoteId__, host_tag));
            InvocationTime__ = fun::Clock::Milliseconds();
          }

          bool bIsImplemented__ = false;
          // First, try function object.
          if ((bool)OnNotifyCli_ConnectionState)
          {
            bIsImplemented__ = OnNotifyCli_ConnectionState(RemoteId__, RpcHint__, ConnectionState);
          }
          // Second, call derived stub function.
          else
          {
            bIsImplemented__ = NotifyCli_ConnectionState(RemoteId__, RpcHint__, ConnectionState);
          }

          if (!bIsImplemented__)
          {
            Core->ShowNotImplementedRpcWarning(RpcIds::NotifyCli_ConnectionState, RpcNames::NotifyCli_ConnectionState());
          }

          // After RPC invocation.
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->AfterRpcInvocation(fun::AfterRpcSummary(RpcIds::NotifyCli_ConnectionState, RpcNames::NotifyCli_ConnectionState(), RemoteId__, host_tag, fun::Clock::Milliseconds() - InvocationTime__));
          }

          return true;
      }

      case (fun::uint32)RpcIds::NotifyCli_Peers_Clear:
      {
          // No arguments.

          Core->PostCheckReadMessage(ImmutableMessage__, RpcIds::NotifyCli_Peers_Clear, RpcNames::NotifyCli_Peers_Clear());

          // NotifyCallFromStub
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->NotifyCallFromStub(RpcIds::NotifyCli_Peers_Clear, RpcNames::NotifyCli_Peers_Clear(), TEXT("{}"));
          }

          // Before RPC invocation.
          fun::uint32 InvocationTime__ = 0;
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->BeforeRpcInvocation(fun::BeforeRpcSummary(RpcIds::NotifyCli_Peers_Clear, RpcNames::NotifyCli_Peers_Clear(), RemoteId__, host_tag));
            InvocationTime__ = fun::Clock::Milliseconds();
          }

          bool bIsImplemented__ = false;
          // First, try function object.
          if ((bool)OnNotifyCli_Peers_Clear)
          {
            bIsImplemented__ = OnNotifyCli_Peers_Clear(RemoteId__, RpcHint__);
          }
          // Second, call derived stub function.
          else
          {
            bIsImplemented__ = NotifyCli_Peers_Clear(RemoteId__, RpcHint__);
          }

          if (!bIsImplemented__)
          {
            Core->ShowNotImplementedRpcWarning(RpcIds::NotifyCli_Peers_Clear, RpcNames::NotifyCli_Peers_Clear());
          }

          // After RPC invocation.
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->AfterRpcInvocation(fun::AfterRpcSummary(RpcIds::NotifyCli_Peers_Clear, RpcNames::NotifyCli_Peers_Clear(), RemoteId__, host_tag, fun::Clock::Milliseconds() - InvocationTime__));
          }

          return true;
      }

      case (fun::uint32)RpcIds::NotifyCli_Peers_AddOrEdit:
      {
          // Declare arguments.
          fun::HostId peer_id = fun::HostId_None;

          // Read arguments.
          if (RpcHint__.result_code == 0)
          {
            DO_CHECKED__(fun::EngineTypes_UserTypeHandlers::Read(ImmutableMessage__, peer_id));
          }

          Core->PostCheckReadMessage(ImmutableMessage__, RpcIds::NotifyCli_Peers_AddOrEdit, RpcNames::NotifyCli_Peers_AddOrEdit());

          // NotifyCallFromStub
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            fun::String ArgsStr__ = TEXT("{");
            ArgsStr__ += TEXT("\"peer_id\":") + fun::ToString(peer_id);
            ArgsStr__ += TEXT("}");

            Core->NotifyCallFromStub(RpcIds::NotifyCli_Peers_AddOrEdit, RpcNames::NotifyCli_Peers_AddOrEdit(), ArgsStr__);
          }

          // Before RPC invocation.
          fun::uint32 InvocationTime__ = 0;
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->BeforeRpcInvocation(fun::BeforeRpcSummary(RpcIds::NotifyCli_Peers_AddOrEdit, RpcNames::NotifyCli_Peers_AddOrEdit(), RemoteId__, host_tag));
            InvocationTime__ = fun::Clock::Milliseconds();
          }

          bool bIsImplemented__ = false;
          // First, try function object.
          if ((bool)OnNotifyCli_Peers_AddOrEdit)
          {
            bIsImplemented__ = OnNotifyCli_Peers_AddOrEdit(RemoteId__, RpcHint__, peer_id);
          }
          // Second, call derived stub function.
          else
          {
            bIsImplemented__ = NotifyCli_Peers_AddOrEdit(RemoteId__, RpcHint__, peer_id);
          }

          if (!bIsImplemented__)
          {
            Core->ShowNotImplementedRpcWarning(RpcIds::NotifyCli_Peers_AddOrEdit, RpcNames::NotifyCli_Peers_AddOrEdit());
          }

          // After RPC invocation.
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->AfterRpcInvocation(fun::AfterRpcSummary(RpcIds::NotifyCli_Peers_AddOrEdit, RpcNames::NotifyCli_Peers_AddOrEdit(), RemoteId__, host_tag, fun::Clock::Milliseconds() - InvocationTime__));
          }

          return true;
      }

      case (fun::uint32)RpcIds::NotifySrv_ClientEmpty:
      {
          // No arguments.

          Core->PostCheckReadMessage(ImmutableMessage__, RpcIds::NotifySrv_ClientEmpty, RpcNames::NotifySrv_ClientEmpty());

          // NotifyCallFromStub
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->NotifyCallFromStub(RpcIds::NotifySrv_ClientEmpty, RpcNames::NotifySrv_ClientEmpty(), TEXT("{}"));
          }

          // Before RPC invocation.
          fun::uint32 InvocationTime__ = 0;
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->BeforeRpcInvocation(fun::BeforeRpcSummary(RpcIds::NotifySrv_ClientEmpty, RpcNames::NotifySrv_ClientEmpty(), RemoteId__, host_tag));
            InvocationTime__ = fun::Clock::Milliseconds();
          }

          bool bIsImplemented__ = false;
          // First, try function object.
          if ((bool)OnNotifySrv_ClientEmpty)
          {
            bIsImplemented__ = OnNotifySrv_ClientEmpty(RemoteId__, RpcHint__);
          }
          // Second, call derived stub function.
          else
          {
            bIsImplemented__ = NotifySrv_ClientEmpty(RemoteId__, RpcHint__);
          }

          if (!bIsImplemented__)
          {
            Core->ShowNotImplementedRpcWarning(RpcIds::NotifySrv_ClientEmpty, RpcNames::NotifySrv_ClientEmpty());
          }

          // After RPC invocation.
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->AfterRpcInvocation(fun::AfterRpcSummary(RpcIds::NotifySrv_ClientEmpty, RpcNames::NotifySrv_ClientEmpty(), RemoteId__, host_tag, fun::Clock::Milliseconds() - InvocationTime__));
          }

          return true;
      }

      case (fun::uint32)RpcIds::NotifySrv_Clients_AddOrEdit:
      {
          // Declare arguments.
          fun::HostId client_id = fun::HostId_None;

          // Read arguments.
          if (RpcHint__.result_code == 0)
          {
            DO_CHECKED__(fun::EngineTypes_UserTypeHandlers::Read(ImmutableMessage__, client_id));
          }

          Core->PostCheckReadMessage(ImmutableMessage__, RpcIds::NotifySrv_Clients_AddOrEdit, RpcNames::NotifySrv_Clients_AddOrEdit());

          // NotifyCallFromStub
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            fun::String ArgsStr__ = TEXT("{");
            ArgsStr__ += TEXT("\"client_id\":") + fun::ToString(client_id);
            ArgsStr__ += TEXT("}");

            Core->NotifyCallFromStub(RpcIds::NotifySrv_Clients_AddOrEdit, RpcNames::NotifySrv_Clients_AddOrEdit(), ArgsStr__);
          }

          // Before RPC invocation.
          fun::uint32 InvocationTime__ = 0;
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->BeforeRpcInvocation(fun::BeforeRpcSummary(RpcIds::NotifySrv_Clients_AddOrEdit, RpcNames::NotifySrv_Clients_AddOrEdit(), RemoteId__, host_tag));
            InvocationTime__ = fun::Clock::Milliseconds();
          }

          bool bIsImplemented__ = false;
          // First, try function object.
          if ((bool)OnNotifySrv_Clients_AddOrEdit)
          {
            bIsImplemented__ = OnNotifySrv_Clients_AddOrEdit(RemoteId__, RpcHint__, client_id);
          }
          // Second, call derived stub function.
          else
          {
            bIsImplemented__ = NotifySrv_Clients_AddOrEdit(RemoteId__, RpcHint__, client_id);
          }

          if (!bIsImplemented__)
          {
            Core->ShowNotImplementedRpcWarning(RpcIds::NotifySrv_Clients_AddOrEdit, RpcNames::NotifySrv_Clients_AddOrEdit());
          }

          // After RPC invocation.
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->AfterRpcInvocation(fun::AfterRpcSummary(RpcIds::NotifySrv_Clients_AddOrEdit, RpcNames::NotifySrv_Clients_AddOrEdit(), RemoteId__, host_tag, fun::Clock::Milliseconds() - InvocationTime__));
          }

          return true;
      }

      case (fun::uint32)RpcIds::NotifySrv_Clients_Remove:
      {
          // Declare arguments.
          fun::HostId client_id = fun::HostId_None;

          // Read arguments.
          if (RpcHint__.result_code == 0)
          {
            DO_CHECKED__(fun::EngineTypes_UserTypeHandlers::Read(ImmutableMessage__, client_id));
          }

          Core->PostCheckReadMessage(ImmutableMessage__, RpcIds::NotifySrv_Clients_Remove, RpcNames::NotifySrv_Clients_Remove());

          // NotifyCallFromStub
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            fun::String ArgsStr__ = TEXT("{");
            ArgsStr__ += TEXT("\"client_id\":") + fun::ToString(client_id);
            ArgsStr__ += TEXT("}");

            Core->NotifyCallFromStub(RpcIds::NotifySrv_Clients_Remove, RpcNames::NotifySrv_Clients_Remove(), ArgsStr__);
          }

          // Before RPC invocation.
          fun::uint32 InvocationTime__ = 0;
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->BeforeRpcInvocation(fun::BeforeRpcSummary(RpcIds::NotifySrv_Clients_Remove, RpcNames::NotifySrv_Clients_Remove(), RemoteId__, host_tag));
            InvocationTime__ = fun::Clock::Milliseconds();
          }

          bool bIsImplemented__ = false;
          // First, try function object.
          if ((bool)OnNotifySrv_Clients_Remove)
          {
            bIsImplemented__ = OnNotifySrv_Clients_Remove(RemoteId__, RpcHint__, client_id);
          }
          // Second, call derived stub function.
          else
          {
            bIsImplemented__ = NotifySrv_Clients_Remove(RemoteId__, RpcHint__, client_id);
          }

          if (!bIsImplemented__)
          {
            Core->ShowNotImplementedRpcWarning(RpcIds::NotifySrv_Clients_Remove, RpcNames::NotifySrv_Clients_Remove());
          }

          // After RPC invocation.
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->AfterRpcInvocation(fun::AfterRpcSummary(RpcIds::NotifySrv_Clients_Remove, RpcNames::NotifySrv_Clients_Remove(), RemoteId__, host_tag, fun::Clock::Milliseconds() - InvocationTime__));
          }

          return true;
      }
    }

    Failure__: ImmutableMessage__.SetPosition(SavedReadPosition__); return false;
    #undef DO_CHECKED__
  }
} // end of namespace C2S

}} // end of namespace fun::Viz
