/**
 * Auto-generated by IDL Compiler (1.0.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "Agent_AgentC2S_stub.h"
#include "Agent.h" // _Args, _PArgs

namespace fun {
namespace AgentC2S
{
  bool Stub::ProcessReceivedMessage(fun::ReceivedMessage& received_msg, void* host_tag)
  {
    #define DO_CHECKED__(Expr) { if (!(Expr)) goto Failure__; }

    const fun::HostId RemoteId__ = received_msg.remote_id;
    fun::IMessageIn& ImmutableMessage__ = received_msg.unsafe_message;
    const fun::int32 SavedReadPosition__ = ImmutableMessage__.GetPosition();

    fun::RpcHint RpcHint__;
    RpcHint__.relayed = received_msg.relayed;
    RpcHint__.host_tag = host_tag;

    fun::RpcId RpcId__;
    fun::RpcHeader RpcHeader__;
    DO_CHECKED__(fun::LiteFormat::Read(ImmutableMessage__, RpcId__));
    DO_CHECKED__(RpcHeader__.Read(ImmutableMessage__));

    RpcHint__.result_code = RpcHeader__.result_code;
    RpcHint__.error_message = RpcHeader__.error_message;

    switch ((fun::uint32)RpcId__)
    {
      case (fun::uint32)RpcIds::RequestCredential:
      {
          // Declare arguments.
          fun::int32 Cookie = 0;

          // Read arguments.
          if (RpcHint__.result_code == 0)
          {
            DO_CHECKED__(fun::FlexFormat::ReadInt32(ImmutableMessage__, Cookie));
          }

          Core->PostCheckReadMessage(ImmutableMessage__, RpcIds::RequestCredential, RpcNames::RequestCredential());

          // NotifyCallFromStub
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            fun::String ArgsStr__ = TEXT("{");
            ArgsStr__ += TEXT("\"Cookie\":") + fun::ToString(Cookie);
            ArgsStr__ += TEXT("}");

            Core->NotifyCallFromStub(RpcIds::RequestCredential, RpcNames::RequestCredential(), ArgsStr__);
          }

          // Before RPC invocation.
          fun::uint32 InvocationTime__ = 0;
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->BeforeRpcInvocation(fun::BeforeRpcSummary(RpcIds::RequestCredential, RpcNames::RequestCredential(), RemoteId__, host_tag));
            InvocationTime__ = fun::Clock::Milliseconds();
          }

          bool bIsImplemented__ = false;
          // First, try function object.
          if ((bool)OnRequestCredential)
          {
            bIsImplemented__ = OnRequestCredential(RemoteId__, RpcHint__, Cookie);
          }
          // Second, call derived stub function.
          else
          {
            bIsImplemented__ = RequestCredential(RemoteId__, RpcHint__, Cookie);
          }

          if (!bIsImplemented__)
          {
            Core->ShowNotImplementedRpcWarning(RpcIds::RequestCredential, RpcNames::RequestCredential());
          }

          // After RPC invocation.
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->AfterRpcInvocation(fun::AfterRpcSummary(RpcIds::RequestCredential, RpcNames::RequestCredential(), RemoteId__, host_tag, fun::Clock::Milliseconds() - InvocationTime__));
          }

          return true;
      }

      case (fun::uint32)RpcIds::ReportStatusBegin:
      {
          // Declare arguments.
          fun::uint8 Type = 0;
          fun::String text;

          // Read arguments.
          if (RpcHint__.result_code == 0)
          {
            DO_CHECKED__(fun::FlexFormat::ReadFixed8(ImmutableMessage__, Type));
            DO_CHECKED__(fun::FlexFormat::ReadString(ImmutableMessage__, text));
          }

          Core->PostCheckReadMessage(ImmutableMessage__, RpcIds::ReportStatusBegin, RpcNames::ReportStatusBegin());

          // NotifyCallFromStub
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            fun::String ArgsStr__ = TEXT("{");
            ArgsStr__ += TEXT("\"Type\":") + fun::ToString(Type);
            ArgsStr__ += TEXT(",\"text\":") + fun::ToString(text);
            ArgsStr__ += TEXT("}");

            Core->NotifyCallFromStub(RpcIds::ReportStatusBegin, RpcNames::ReportStatusBegin(), ArgsStr__);
          }

          // Before RPC invocation.
          fun::uint32 InvocationTime__ = 0;
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->BeforeRpcInvocation(fun::BeforeRpcSummary(RpcIds::ReportStatusBegin, RpcNames::ReportStatusBegin(), RemoteId__, host_tag));
            InvocationTime__ = fun::Clock::Milliseconds();
          }

          bool bIsImplemented__ = false;
          // First, try function object.
          if ((bool)OnReportStatusBegin)
          {
            bIsImplemented__ = OnReportStatusBegin(RemoteId__, RpcHint__, Type, text);
          }
          // Second, call derived stub function.
          else
          {
            bIsImplemented__ = ReportStatusBegin(RemoteId__, RpcHint__, Type, text);
          }

          if (!bIsImplemented__)
          {
            Core->ShowNotImplementedRpcWarning(RpcIds::ReportStatusBegin, RpcNames::ReportStatusBegin());
          }

          // After RPC invocation.
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->AfterRpcInvocation(fun::AfterRpcSummary(RpcIds::ReportStatusBegin, RpcNames::ReportStatusBegin(), RemoteId__, host_tag, fun::Clock::Milliseconds() - InvocationTime__));
          }

          return true;
      }

      case (fun::uint32)RpcIds::ReportStatusValue:
      {
          // Declare arguments.
          fun::String Key;
          fun::String Value;

          // Read arguments.
          if (RpcHint__.result_code == 0)
          {
            DO_CHECKED__(fun::FlexFormat::ReadString(ImmutableMessage__, Key));
            DO_CHECKED__(fun::FlexFormat::ReadString(ImmutableMessage__, Value));
          }

          Core->PostCheckReadMessage(ImmutableMessage__, RpcIds::ReportStatusValue, RpcNames::ReportStatusValue());

          // NotifyCallFromStub
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            fun::String ArgsStr__ = TEXT("{");
            ArgsStr__ += TEXT("\"Key\":") + fun::ToString(Key);
            ArgsStr__ += TEXT(",\"Value\":") + fun::ToString(Value);
            ArgsStr__ += TEXT("}");

            Core->NotifyCallFromStub(RpcIds::ReportStatusValue, RpcNames::ReportStatusValue(), ArgsStr__);
          }

          // Before RPC invocation.
          fun::uint32 InvocationTime__ = 0;
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->BeforeRpcInvocation(fun::BeforeRpcSummary(RpcIds::ReportStatusValue, RpcNames::ReportStatusValue(), RemoteId__, host_tag));
            InvocationTime__ = fun::Clock::Milliseconds();
          }

          bool bIsImplemented__ = false;
          // First, try function object.
          if ((bool)OnReportStatusValue)
          {
            bIsImplemented__ = OnReportStatusValue(RemoteId__, RpcHint__, Key, Value);
          }
          // Second, call derived stub function.
          else
          {
            bIsImplemented__ = ReportStatusValue(RemoteId__, RpcHint__, Key, Value);
          }

          if (!bIsImplemented__)
          {
            Core->ShowNotImplementedRpcWarning(RpcIds::ReportStatusValue, RpcNames::ReportStatusValue());
          }

          // After RPC invocation.
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->AfterRpcInvocation(fun::AfterRpcSummary(RpcIds::ReportStatusValue, RpcNames::ReportStatusValue(), RemoteId__, host_tag, fun::Clock::Milliseconds() - InvocationTime__));
          }

          return true;
      }

      case (fun::uint32)RpcIds::ReportStatusEnd:
      {
          // No arguments.

          Core->PostCheckReadMessage(ImmutableMessage__, RpcIds::ReportStatusEnd, RpcNames::ReportStatusEnd());

          // NotifyCallFromStub
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->NotifyCallFromStub(RpcIds::ReportStatusEnd, RpcNames::ReportStatusEnd(), TEXT("{}"));
          }

          // Before RPC invocation.
          fun::uint32 InvocationTime__ = 0;
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->BeforeRpcInvocation(fun::BeforeRpcSummary(RpcIds::ReportStatusEnd, RpcNames::ReportStatusEnd(), RemoteId__, host_tag));
            InvocationTime__ = fun::Clock::Milliseconds();
          }

          bool bIsImplemented__ = false;
          // First, try function object.
          if ((bool)OnReportStatusEnd)
          {
            bIsImplemented__ = OnReportStatusEnd(RemoteId__, RpcHint__);
          }
          // Second, call derived stub function.
          else
          {
            bIsImplemented__ = ReportStatusEnd(RemoteId__, RpcHint__);
          }

          if (!bIsImplemented__)
          {
            Core->ShowNotImplementedRpcWarning(RpcIds::ReportStatusEnd, RpcNames::ReportStatusEnd());
          }

          // After RPC invocation.
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->AfterRpcInvocation(fun::AfterRpcSummary(RpcIds::ReportStatusEnd, RpcNames::ReportStatusEnd(), RemoteId__, host_tag, fun::Clock::Milliseconds() - InvocationTime__));
          }

          return true;
      }

      case (fun::uint32)RpcIds::ReportServerAppState:
      {
          // Declare arguments.
          float CpuUserTime = 0.0f;
          float CpuKerenlTime = 0.0f;
          fun::int32 MemorySize = 0;

          // Read arguments.
          if (RpcHint__.result_code == 0)
          {
            DO_CHECKED__(fun::FlexFormat::ReadFloat(ImmutableMessage__, CpuUserTime));
            DO_CHECKED__(fun::FlexFormat::ReadFloat(ImmutableMessage__, CpuKerenlTime));
            DO_CHECKED__(fun::FlexFormat::ReadSInt32(ImmutableMessage__, MemorySize));
          }

          Core->PostCheckReadMessage(ImmutableMessage__, RpcIds::ReportServerAppState, RpcNames::ReportServerAppState());

          // NotifyCallFromStub
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            fun::String ArgsStr__ = TEXT("{");
            ArgsStr__ += TEXT("\"CpuUserTime\":") + fun::ToString(CpuUserTime);
            ArgsStr__ += TEXT(",\"CpuKerenlTime\":") + fun::ToString(CpuKerenlTime);
            ArgsStr__ += TEXT(",\"MemorySize\":") + fun::ToString(MemorySize);
            ArgsStr__ += TEXT("}");

            Core->NotifyCallFromStub(RpcIds::ReportServerAppState, RpcNames::ReportServerAppState(), ArgsStr__);
          }

          // Before RPC invocation.
          fun::uint32 InvocationTime__ = 0;
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->BeforeRpcInvocation(fun::BeforeRpcSummary(RpcIds::ReportServerAppState, RpcNames::ReportServerAppState(), RemoteId__, host_tag));
            InvocationTime__ = fun::Clock::Milliseconds();
          }

          bool bIsImplemented__ = false;
          // First, try function object.
          if ((bool)OnReportServerAppState)
          {
            bIsImplemented__ = OnReportServerAppState(RemoteId__, RpcHint__, CpuUserTime, CpuKerenlTime, MemorySize);
          }
          // Second, call derived stub function.
          else
          {
            bIsImplemented__ = ReportServerAppState(RemoteId__, RpcHint__, CpuUserTime, CpuKerenlTime, MemorySize);
          }

          if (!bIsImplemented__)
          {
            Core->ShowNotImplementedRpcWarning(RpcIds::ReportServerAppState, RpcNames::ReportServerAppState());
          }

          // After RPC invocation.
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->AfterRpcInvocation(fun::AfterRpcSummary(RpcIds::ReportServerAppState, RpcNames::ReportServerAppState(), RemoteId__, host_tag, fun::Clock::Milliseconds() - InvocationTime__));
          }

          return true;
      }

      case (fun::uint32)RpcIds::EventLog:
      {
          // Declare arguments.
          fun::LogCategory Category = (fun::LogCategory)0;
          fun::String text;

          // Read arguments.
          if (RpcHint__.result_code == 0)
          {
            DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(ImmutableMessage__, Category));
            DO_CHECKED__(fun::FlexFormat::ReadString(ImmutableMessage__, text));
          }

          Core->PostCheckReadMessage(ImmutableMessage__, RpcIds::EventLog, RpcNames::EventLog());

          // NotifyCallFromStub
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            fun::String ArgsStr__ = TEXT("{");
            ArgsStr__ += TEXT("\"Category\":") + fun::ToString(Category);
            ArgsStr__ += TEXT(",\"text\":") + fun::ToString(text);
            ArgsStr__ += TEXT("}");

            Core->NotifyCallFromStub(RpcIds::EventLog, RpcNames::EventLog(), ArgsStr__);
          }

          // Before RPC invocation.
          fun::uint32 InvocationTime__ = 0;
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->BeforeRpcInvocation(fun::BeforeRpcSummary(RpcIds::EventLog, RpcNames::EventLog(), RemoteId__, host_tag));
            InvocationTime__ = fun::Clock::Milliseconds();
          }

          bool bIsImplemented__ = false;
          // First, try function object.
          if ((bool)OnEventLog)
          {
            bIsImplemented__ = OnEventLog(RemoteId__, RpcHint__, Category, text);
          }
          // Second, call derived stub function.
          else
          {
            bIsImplemented__ = EventLog(RemoteId__, RpcHint__, Category, text);
          }

          if (!bIsImplemented__)
          {
            Core->ShowNotImplementedRpcWarning(RpcIds::EventLog, RpcNames::EventLog());
          }

          // After RPC invocation.
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->AfterRpcInvocation(fun::AfterRpcSummary(RpcIds::EventLog, RpcNames::EventLog(), RemoteId__, host_tag, fun::Clock::Milliseconds() - InvocationTime__));
          }

          return true;
      }
    }

    Failure__: ImmutableMessage__.SetPosition(SavedReadPosition__); return false;
    #undef DO_CHECKED__
  }
} // end of namespace AgentC2S

} // end of namespace fun
