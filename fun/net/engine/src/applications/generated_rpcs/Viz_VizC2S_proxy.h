/**
 * Auto-generated by IDL Compiler (1.0.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#pragma once

#include "FUN.h"
#include "Viz_defs.h"
#include "Viz_types.h"

namespace fun {
namespace VizC2S
{
  struct Proxy : public fun::RpcProxy
  {
    fun::int32 GetDeclaredRpcCount() const override { return VizC2S::NumRpcFunctions; }
    const fun::RpcId* GetDeclaredRpcIds() const override { return VizC2S::RpcIds::RpcIdList(); }
    const char** GetDeclaredRpcNames() const override { return VizC2S::RpcNames::RpcNameList(); }

    inline bool RequestLogin(fun::HostId rpc_recvfrom, const fun::String& AuthenticationKey, const fun::HostId& VizOwnerId) { return RequestLogin(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, AuthenticationKey, VizOwnerId); }
    inline bool RequestLogin(fun::HostId rpc_recvfrom, const fun::RpcCallOption& RpcCallOption, const fun::String& AuthenticationKey, const fun::HostId& VizOwnerId) { return RequestLogin(&rpc_recvfrom, 1, RpcCallOption, AuthenticationKey, VizOwnerId); }
    template <typename Allocator>
    inline bool RequestLogin(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::String& AuthenticationKey, const fun::HostId& VizOwnerId) { return RequestLogin(RpcRemoteIds, fun::RpcCallOption::Reliable, AuthenticationKey, VizOwnerId); }
    template <typename Allocator>
    inline bool RequestLogin(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& RpcCallOption, const fun::String& AuthenticationKey, const fun::HostId& VizOwnerId) { return RequestLogin(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), RpcCallOption, AuthenticationKey, VizOwnerId); }
    inline bool RequestLogin(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::String& AuthenticationKey, const fun::HostId& VizOwnerId) { return RequestLogin(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, AuthenticationKey, VizOwnerId); }
    bool RequestLogin(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& RpcCallOption, const fun::String& AuthenticationKey, const fun::HostId& VizOwnerId);

    inline bool NotifyCommon_SendRpc(fun::HostId rpc_recvfrom, const fun::HostIdArray& send_to, const fun::VizMessageSummary& summary) { return NotifyCommon_SendRpc(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, send_to, summary); }
    inline bool NotifyCommon_SendRpc(fun::HostId rpc_recvfrom, const fun::RpcCallOption& RpcCallOption, const fun::HostIdArray& send_to, const fun::VizMessageSummary& summary) { return NotifyCommon_SendRpc(&rpc_recvfrom, 1, RpcCallOption, send_to, summary); }
    template <typename Allocator>
    inline bool NotifyCommon_SendRpc(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::HostIdArray& send_to, const fun::VizMessageSummary& summary) { return NotifyCommon_SendRpc(RpcRemoteIds, fun::RpcCallOption::Reliable, send_to, summary); }
    template <typename Allocator>
    inline bool NotifyCommon_SendRpc(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& RpcCallOption, const fun::HostIdArray& send_to, const fun::VizMessageSummary& summary) { return NotifyCommon_SendRpc(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), RpcCallOption, send_to, summary); }
    inline bool NotifyCommon_SendRpc(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::HostIdArray& send_to, const fun::VizMessageSummary& summary) { return NotifyCommon_SendRpc(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, send_to, summary); }
    bool NotifyCommon_SendRpc(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& RpcCallOption, const fun::HostIdArray& send_to, const fun::VizMessageSummary& summary);

    inline bool NotifyCommon_ReceiveRpc(fun::HostId rpc_recvfrom, const fun::HostId& RecvFrom, const fun::String& rpc_name, const fun::RpcId& rpc_id) { return NotifyCommon_ReceiveRpc(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, RecvFrom, rpc_name, rpc_id); }
    inline bool NotifyCommon_ReceiveRpc(fun::HostId rpc_recvfrom, const fun::RpcCallOption& RpcCallOption, const fun::HostId& RecvFrom, const fun::String& rpc_name, const fun::RpcId& rpc_id) { return NotifyCommon_ReceiveRpc(&rpc_recvfrom, 1, RpcCallOption, RecvFrom, rpc_name, rpc_id); }
    template <typename Allocator>
    inline bool NotifyCommon_ReceiveRpc(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::HostId& RecvFrom, const fun::String& rpc_name, const fun::RpcId& rpc_id) { return NotifyCommon_ReceiveRpc(RpcRemoteIds, fun::RpcCallOption::Reliable, RecvFrom, rpc_name, rpc_id); }
    template <typename Allocator>
    inline bool NotifyCommon_ReceiveRpc(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& RpcCallOption, const fun::HostId& RecvFrom, const fun::String& rpc_name, const fun::RpcId& rpc_id) { return NotifyCommon_ReceiveRpc(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), RpcCallOption, RecvFrom, rpc_name, rpc_id); }
    inline bool NotifyCommon_ReceiveRpc(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::HostId& RecvFrom, const fun::String& rpc_name, const fun::RpcId& rpc_id) { return NotifyCommon_ReceiveRpc(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, RecvFrom, rpc_name, rpc_id); }
    bool NotifyCommon_ReceiveRpc(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& RpcCallOption, const fun::HostId& RecvFrom, const fun::String& rpc_name, const fun::RpcId& rpc_id);

    inline bool NotifyCli_ConnectionState(fun::HostId rpc_recvfrom, const fun::ConnectionState& ConnectionState) { return NotifyCli_ConnectionState(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, ConnectionState); }
    inline bool NotifyCli_ConnectionState(fun::HostId rpc_recvfrom, const fun::RpcCallOption& RpcCallOption, const fun::ConnectionState& ConnectionState) { return NotifyCli_ConnectionState(&rpc_recvfrom, 1, RpcCallOption, ConnectionState); }
    template <typename Allocator>
    inline bool NotifyCli_ConnectionState(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::ConnectionState& ConnectionState) { return NotifyCli_ConnectionState(RpcRemoteIds, fun::RpcCallOption::Reliable, ConnectionState); }
    template <typename Allocator>
    inline bool NotifyCli_ConnectionState(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& RpcCallOption, const fun::ConnectionState& ConnectionState) { return NotifyCli_ConnectionState(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), RpcCallOption, ConnectionState); }
    inline bool NotifyCli_ConnectionState(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::ConnectionState& ConnectionState) { return NotifyCli_ConnectionState(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, ConnectionState); }
    bool NotifyCli_ConnectionState(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& RpcCallOption, const fun::ConnectionState& ConnectionState);

    inline bool NotifyCli_Peers_Clear(fun::HostId rpc_recvfrom) { return NotifyCli_Peers_Clear(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable); }
    inline bool NotifyCli_Peers_Clear(fun::HostId rpc_recvfrom, const fun::RpcCallOption& RpcCallOption) { return NotifyCli_Peers_Clear(&rpc_recvfrom, 1, RpcCallOption); }
    template <typename Allocator>
    inline bool NotifyCli_Peers_Clear(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds) { return NotifyCli_Peers_Clear(RpcRemoteIds, fun::RpcCallOption::Reliable); }
    template <typename Allocator>
    inline bool NotifyCli_Peers_Clear(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& RpcCallOption) { return NotifyCli_Peers_Clear(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), RpcCallOption); }
    inline bool NotifyCli_Peers_Clear(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount) { return NotifyCli_Peers_Clear(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable); }
    bool NotifyCli_Peers_Clear(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& RpcCallOption);

    inline bool NotifyCli_Peers_AddOrEdit(fun::HostId rpc_recvfrom, const fun::HostId& peer_id) { return NotifyCli_Peers_AddOrEdit(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, peer_id); }
    inline bool NotifyCli_Peers_AddOrEdit(fun::HostId rpc_recvfrom, const fun::RpcCallOption& RpcCallOption, const fun::HostId& peer_id) { return NotifyCli_Peers_AddOrEdit(&rpc_recvfrom, 1, RpcCallOption, peer_id); }
    template <typename Allocator>
    inline bool NotifyCli_Peers_AddOrEdit(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::HostId& peer_id) { return NotifyCli_Peers_AddOrEdit(RpcRemoteIds, fun::RpcCallOption::Reliable, peer_id); }
    template <typename Allocator>
    inline bool NotifyCli_Peers_AddOrEdit(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& RpcCallOption, const fun::HostId& peer_id) { return NotifyCli_Peers_AddOrEdit(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), RpcCallOption, peer_id); }
    inline bool NotifyCli_Peers_AddOrEdit(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::HostId& peer_id) { return NotifyCli_Peers_AddOrEdit(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, peer_id); }
    bool NotifyCli_Peers_AddOrEdit(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& RpcCallOption, const fun::HostId& peer_id);

    inline bool NotifySrv_ClientEmpty(fun::HostId rpc_recvfrom) { return NotifySrv_ClientEmpty(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable); }
    inline bool NotifySrv_ClientEmpty(fun::HostId rpc_recvfrom, const fun::RpcCallOption& RpcCallOption) { return NotifySrv_ClientEmpty(&rpc_recvfrom, 1, RpcCallOption); }
    template <typename Allocator>
    inline bool NotifySrv_ClientEmpty(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds) { return NotifySrv_ClientEmpty(RpcRemoteIds, fun::RpcCallOption::Reliable); }
    template <typename Allocator>
    inline bool NotifySrv_ClientEmpty(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& RpcCallOption) { return NotifySrv_ClientEmpty(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), RpcCallOption); }
    inline bool NotifySrv_ClientEmpty(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount) { return NotifySrv_ClientEmpty(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable); }
    bool NotifySrv_ClientEmpty(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& RpcCallOption);

    inline bool NotifySrv_Clients_AddOrEdit(fun::HostId rpc_recvfrom, const fun::HostId& client_id) { return NotifySrv_Clients_AddOrEdit(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, client_id); }
    inline bool NotifySrv_Clients_AddOrEdit(fun::HostId rpc_recvfrom, const fun::RpcCallOption& RpcCallOption, const fun::HostId& client_id) { return NotifySrv_Clients_AddOrEdit(&rpc_recvfrom, 1, RpcCallOption, client_id); }
    template <typename Allocator>
    inline bool NotifySrv_Clients_AddOrEdit(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::HostId& client_id) { return NotifySrv_Clients_AddOrEdit(RpcRemoteIds, fun::RpcCallOption::Reliable, client_id); }
    template <typename Allocator>
    inline bool NotifySrv_Clients_AddOrEdit(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& RpcCallOption, const fun::HostId& client_id) { return NotifySrv_Clients_AddOrEdit(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), RpcCallOption, client_id); }
    inline bool NotifySrv_Clients_AddOrEdit(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::HostId& client_id) { return NotifySrv_Clients_AddOrEdit(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, client_id); }
    bool NotifySrv_Clients_AddOrEdit(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& RpcCallOption, const fun::HostId& client_id);

    inline bool NotifySrv_Clients_Remove(fun::HostId rpc_recvfrom, const fun::HostId& client_id) { return NotifySrv_Clients_Remove(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, client_id); }
    inline bool NotifySrv_Clients_Remove(fun::HostId rpc_recvfrom, const fun::RpcCallOption& RpcCallOption, const fun::HostId& client_id) { return NotifySrv_Clients_Remove(&rpc_recvfrom, 1, RpcCallOption, client_id); }
    template <typename Allocator>
    inline bool NotifySrv_Clients_Remove(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::HostId& client_id) { return NotifySrv_Clients_Remove(RpcRemoteIds, fun::RpcCallOption::Reliable, client_id); }
    template <typename Allocator>
    inline bool NotifySrv_Clients_Remove(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& RpcCallOption, const fun::HostId& client_id) { return NotifySrv_Clients_Remove(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), RpcCallOption, client_id); }
    inline bool NotifySrv_Clients_Remove(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::HostId& client_id) { return NotifySrv_Clients_Remove(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, client_id); }
    bool NotifySrv_Clients_Remove(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& RpcCallOption, const fun::HostId& client_id);
  };
} // end of namespace VizC2S

} // end of namespace fun
