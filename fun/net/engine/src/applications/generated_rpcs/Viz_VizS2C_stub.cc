/**
 * Auto-generated by IDL Compiler (1.0.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "Viz_VizS2C_stub.h"
#include "Viz.h" // _Args, _PArgs

namespace fun {
namespace VizS2C
{
  bool Stub::ProcessReceivedMessage(fun::ReceivedMessage& received_msg, void* host_tag)
  {
    #define DO_CHECKED__(Expr) { if (!(Expr)) goto Failure__; }

    const fun::HostId RemoteId__ = received_msg.remote_id;
    fun::IMessageIn& ImmutableMessage__ = received_msg.unsafe_message;
    const fun::int32 SavedReadPosition__ = ImmutableMessage__.GetPosition();

    fun::RpcHint RpcHint__;
    RpcHint__.relayed = received_msg.relayed;
    RpcHint__.host_tag = host_tag;

    fun::RpcId RpcId__;
    fun::RpcHeader RpcHeader__;
    DO_CHECKED__(fun::LiteFormat::Read(ImmutableMessage__, RpcId__));
    DO_CHECKED__(RpcHeader__.Read(ImmutableMessage__));

    RpcHint__.result_code = RpcHeader__.result_code;
    RpcHint__.error_message = RpcHeader__.error_message;

    switch ((fun::uint32)RpcId__)
    {
      case (fun::uint32)RpcIds::NotifyLoginOk:
      {
          // No arguments.

          Core->PostCheckReadMessage(ImmutableMessage__, RpcIds::NotifyLoginOk, RpcNames::NotifyLoginOk());

          // NotifyCallFromStub
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->NotifyCallFromStub(RpcIds::NotifyLoginOk, RpcNames::NotifyLoginOk(), TEXT("{}"));
          }

          // Before RPC invocation.
          fun::uint32 InvocationTime__ = 0;
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->BeforeRpcInvocation(fun::BeforeRpcSummary(RpcIds::NotifyLoginOk, RpcNames::NotifyLoginOk(), RemoteId__, host_tag));
            InvocationTime__ = fun::Clock::Milliseconds();
          }

          bool bIsImplemented__ = false;
          // First, try function object.
          if ((bool)OnNotifyLoginOk)
          {
            bIsImplemented__ = OnNotifyLoginOk(RemoteId__, RpcHint__);
          }
          // Second, call derived stub function.
          else
          {
            bIsImplemented__ = NotifyLoginOk(RemoteId__, RpcHint__);
          }

          if (!bIsImplemented__)
          {
            Core->ShowNotImplementedRpcWarning(RpcIds::NotifyLoginOk, RpcNames::NotifyLoginOk());
          }

          // After RPC invocation.
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->AfterRpcInvocation(fun::AfterRpcSummary(RpcIds::NotifyLoginOk, RpcNames::NotifyLoginOk(), RemoteId__, host_tag, fun::Clock::Milliseconds() - InvocationTime__));
          }

          return true;
      }

      case (fun::uint32)RpcIds::NotifyLoginFailed:
      {
          // Declare arguments.
          fun::ResultCode reason = (fun::ResultCode)0;

          // Read arguments.
          if (RpcHint__.result_code == 0)
          {
            DO_CHECKED__(EngineTypes_UserTypeHandlers::Read(ImmutableMessage__, reason));
          }

          Core->PostCheckReadMessage(ImmutableMessage__, RpcIds::NotifyLoginFailed, RpcNames::NotifyLoginFailed());

          // NotifyCallFromStub
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            fun::String ArgsStr__ = TEXT("{");
            ArgsStr__ += TEXT("\"reason\":") + fun::ToString(reason);
            ArgsStr__ += TEXT("}");

            Core->NotifyCallFromStub(RpcIds::NotifyLoginFailed, RpcNames::NotifyLoginFailed(), ArgsStr__);
          }

          // Before RPC invocation.
          fun::uint32 InvocationTime__ = 0;
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->BeforeRpcInvocation(fun::BeforeRpcSummary(RpcIds::NotifyLoginFailed, RpcNames::NotifyLoginFailed(), RemoteId__, host_tag));
            InvocationTime__ = fun::Clock::Milliseconds();
          }

          bool bIsImplemented__ = false;
          // First, try function object.
          if ((bool)OnNotifyLoginFailed)
          {
            bIsImplemented__ = OnNotifyLoginFailed(RemoteId__, RpcHint__, reason);
          }
          // Second, call derived stub function.
          else
          {
            bIsImplemented__ = NotifyLoginFailed(RemoteId__, RpcHint__, reason);
          }

          if (!bIsImplemented__)
          {
            Core->ShowNotImplementedRpcWarning(RpcIds::NotifyLoginFailed, RpcNames::NotifyLoginFailed());
          }

          // After RPC invocation.
          if (notify_call_from_stub_enabled_ && !engine_specific_only_)
          {
            Core->AfterRpcInvocation(fun::AfterRpcSummary(RpcIds::NotifyLoginFailed, RpcNames::NotifyLoginFailed(), RemoteId__, host_tag, fun::Clock::Milliseconds() - InvocationTime__));
          }

          return true;
      }
    }

    Failure__: ImmutableMessage__.SetPosition(SavedReadPosition__); return false;
    #undef DO_CHECKED__
  }
} // end of namespace VizS2C

} // end of namespace fun
