/**
 * Auto-generated by IDL Compiler (1.0.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#pragma once

#include "FUN.h"
#include "Agent_defs.h"
#include "Agent_types.h"

namespace fun {
namespace AgentC2S
{
  struct Proxy : public fun::RpcProxy
  {
    fun::int32 GetDeclaredRpcCount() const override { return AgentC2S::NumRpcFunctions; }
    const fun::RpcId* GetDeclaredRpcIds() const override { return AgentC2S::RpcIds::RpcIdList(); }
    const char** GetDeclaredRpcNames() const override { return AgentC2S::RpcNames::RpcNameList(); }

    inline bool RequestCredential(fun::HostId rpc_recvfrom, const fun::int32 Cookie) { return RequestCredential(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, Cookie); }
    inline bool RequestCredential(fun::HostId rpc_recvfrom, const fun::RpcCallOption& RpcCallOption, const fun::int32 Cookie) { return RequestCredential(&rpc_recvfrom, 1, RpcCallOption, Cookie); }
    template <typename Allocator>
    inline bool RequestCredential(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::int32 Cookie) { return RequestCredential(RpcRemoteIds, fun::RpcCallOption::Reliable, Cookie); }
    template <typename Allocator>
    inline bool RequestCredential(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& RpcCallOption, const fun::int32 Cookie) { return RequestCredential(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), RpcCallOption, Cookie); }
    inline bool RequestCredential(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::int32 Cookie) { return RequestCredential(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, Cookie); }
    bool RequestCredential(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& RpcCallOption, const fun::int32 Cookie);

    inline bool ReportStatusBegin(fun::HostId rpc_recvfrom, const fun::uint8 Type, const fun::String& text) { return ReportStatusBegin(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, Type, text); }
    inline bool ReportStatusBegin(fun::HostId rpc_recvfrom, const fun::RpcCallOption& RpcCallOption, const fun::uint8 Type, const fun::String& text) { return ReportStatusBegin(&rpc_recvfrom, 1, RpcCallOption, Type, text); }
    template <typename Allocator>
    inline bool ReportStatusBegin(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::uint8 Type, const fun::String& text) { return ReportStatusBegin(RpcRemoteIds, fun::RpcCallOption::Reliable, Type, text); }
    template <typename Allocator>
    inline bool ReportStatusBegin(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& RpcCallOption, const fun::uint8 Type, const fun::String& text) { return ReportStatusBegin(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), RpcCallOption, Type, text); }
    inline bool ReportStatusBegin(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::uint8 Type, const fun::String& text) { return ReportStatusBegin(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, Type, text); }
    bool ReportStatusBegin(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& RpcCallOption, const fun::uint8 Type, const fun::String& text);

    inline bool ReportStatusValue(fun::HostId rpc_recvfrom, const fun::String& Key, const fun::String& Value) { return ReportStatusValue(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, Key, Value); }
    inline bool ReportStatusValue(fun::HostId rpc_recvfrom, const fun::RpcCallOption& RpcCallOption, const fun::String& Key, const fun::String& Value) { return ReportStatusValue(&rpc_recvfrom, 1, RpcCallOption, Key, Value); }
    template <typename Allocator>
    inline bool ReportStatusValue(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::String& Key, const fun::String& Value) { return ReportStatusValue(RpcRemoteIds, fun::RpcCallOption::Reliable, Key, Value); }
    template <typename Allocator>
    inline bool ReportStatusValue(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& RpcCallOption, const fun::String& Key, const fun::String& Value) { return ReportStatusValue(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), RpcCallOption, Key, Value); }
    inline bool ReportStatusValue(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::String& Key, const fun::String& Value) { return ReportStatusValue(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, Key, Value); }
    bool ReportStatusValue(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& RpcCallOption, const fun::String& Key, const fun::String& Value);

    inline bool ReportStatusEnd(fun::HostId rpc_recvfrom) { return ReportStatusEnd(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable); }
    inline bool ReportStatusEnd(fun::HostId rpc_recvfrom, const fun::RpcCallOption& RpcCallOption) { return ReportStatusEnd(&rpc_recvfrom, 1, RpcCallOption); }
    template <typename Allocator>
    inline bool ReportStatusEnd(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds) { return ReportStatusEnd(RpcRemoteIds, fun::RpcCallOption::Reliable); }
    template <typename Allocator>
    inline bool ReportStatusEnd(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& RpcCallOption) { return ReportStatusEnd(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), RpcCallOption); }
    inline bool ReportStatusEnd(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount) { return ReportStatusEnd(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable); }
    bool ReportStatusEnd(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& RpcCallOption);

    inline bool ReportServerAppState(fun::HostId rpc_recvfrom, const float CpuUserTime, const float CpuKerenlTime, const fun::int32 MemorySize) { return ReportServerAppState(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, CpuUserTime, CpuKerenlTime, MemorySize); }
    inline bool ReportServerAppState(fun::HostId rpc_recvfrom, const fun::RpcCallOption& RpcCallOption, const float CpuUserTime, const float CpuKerenlTime, const fun::int32 MemorySize) { return ReportServerAppState(&rpc_recvfrom, 1, RpcCallOption, CpuUserTime, CpuKerenlTime, MemorySize); }
    template <typename Allocator>
    inline bool ReportServerAppState(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const float CpuUserTime, const float CpuKerenlTime, const fun::int32 MemorySize) { return ReportServerAppState(RpcRemoteIds, fun::RpcCallOption::Reliable, CpuUserTime, CpuKerenlTime, MemorySize); }
    template <typename Allocator>
    inline bool ReportServerAppState(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& RpcCallOption, const float CpuUserTime, const float CpuKerenlTime, const fun::int32 MemorySize) { return ReportServerAppState(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), RpcCallOption, CpuUserTime, CpuKerenlTime, MemorySize); }
    inline bool ReportServerAppState(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const float CpuUserTime, const float CpuKerenlTime, const fun::int32 MemorySize) { return ReportServerAppState(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, CpuUserTime, CpuKerenlTime, MemorySize); }
    bool ReportServerAppState(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& RpcCallOption, const float CpuUserTime, const float CpuKerenlTime, const fun::int32 MemorySize);

    inline bool EventLog(fun::HostId rpc_recvfrom, const fun::LogCategory& Category, const fun::String& text) { return EventLog(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, Category, text); }
    inline bool EventLog(fun::HostId rpc_recvfrom, const fun::RpcCallOption& RpcCallOption, const fun::LogCategory& Category, const fun::String& text) { return EventLog(&rpc_recvfrom, 1, RpcCallOption, Category, text); }
    template <typename Allocator>
    inline bool EventLog(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::LogCategory& Category, const fun::String& text) { return EventLog(RpcRemoteIds, fun::RpcCallOption::Reliable, Category, text); }
    template <typename Allocator>
    inline bool EventLog(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& RpcCallOption, const fun::LogCategory& Category, const fun::String& text) { return EventLog(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), RpcCallOption, Category, text); }
    inline bool EventLog(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::LogCategory& Category, const fun::String& text) { return EventLog(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, Category, text); }
    bool EventLog(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& RpcCallOption, const fun::LogCategory& Category, const fun::String& text);
  };
} // end of namespace AgentC2S

} // end of namespace fun
