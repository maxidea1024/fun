/**
 * Auto-generated by IDL Compiler (1.0.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#pragma once

#include "FUN.h"
#include "emergency_defs.h"
#include "emergency_types.h"

namespace fun { namespace Emergency {
namespace C2S
{
  struct Proxy : public fun::RpcProxy
  {
    fun::int32 GetDeclaredRpcCount() const override { return C2S::NumRpcFunctions; }
    const fun::RpcId* GetDeclaredRpcIds() const override { return C2S::RpcIds::RpcIdList(); }
    const char** GetDeclaredRpcNames() const override { return C2S::RpcNames::RpcNameList(); }

    inline bool EmergencyLogData_Begin(fun::HostId rpc_recvfrom, const fun::DateTime& logon_time, const fun::int32 connect_count, const fun::int32 remote_peer_count, const fun::int32 direct_p2p_enable_peer_count, const fun::String& nat_device_name, const fun::HostId& peer_id, const fun::int32 Iopendingcount, const fun::int32 total_tcp_issued_send_bytes_) { return EmergencyLogData_Begin(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, logon_time, connect_count, remote_peer_count, direct_p2p_enable_peer_count, nat_device_name, peer_id, Iopendingcount, total_tcp_issued_send_bytes_); }
    inline bool EmergencyLogData_Begin(fun::HostId rpc_recvfrom, const fun::RpcCallOption& RpcCallOption, const fun::DateTime& logon_time, const fun::int32 connect_count, const fun::int32 remote_peer_count, const fun::int32 direct_p2p_enable_peer_count, const fun::String& nat_device_name, const fun::HostId& peer_id, const fun::int32 Iopendingcount, const fun::int32 total_tcp_issued_send_bytes_) { return EmergencyLogData_Begin(&rpc_recvfrom, 1, RpcCallOption, logon_time, connect_count, remote_peer_count, direct_p2p_enable_peer_count, nat_device_name, peer_id, Iopendingcount, total_tcp_issued_send_bytes_); }
    template <typename Allocator>
    inline bool EmergencyLogData_Begin(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::DateTime& logon_time, const fun::int32 connect_count, const fun::int32 remote_peer_count, const fun::int32 direct_p2p_enable_peer_count, const fun::String& nat_device_name, const fun::HostId& peer_id, const fun::int32 Iopendingcount, const fun::int32 total_tcp_issued_send_bytes_) { return EmergencyLogData_Begin(RpcRemoteIds, fun::RpcCallOption::Reliable, logon_time, connect_count, remote_peer_count, direct_p2p_enable_peer_count, nat_device_name, peer_id, Iopendingcount, total_tcp_issued_send_bytes_); }
    template <typename Allocator>
    inline bool EmergencyLogData_Begin(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& RpcCallOption, const fun::DateTime& logon_time, const fun::int32 connect_count, const fun::int32 remote_peer_count, const fun::int32 direct_p2p_enable_peer_count, const fun::String& nat_device_name, const fun::HostId& peer_id, const fun::int32 Iopendingcount, const fun::int32 total_tcp_issued_send_bytes_) { return EmergencyLogData_Begin(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), RpcCallOption, logon_time, connect_count, remote_peer_count, direct_p2p_enable_peer_count, nat_device_name, peer_id, Iopendingcount, total_tcp_issued_send_bytes_); }
    inline bool EmergencyLogData_Begin(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::DateTime& logon_time, const fun::int32 connect_count, const fun::int32 remote_peer_count, const fun::int32 direct_p2p_enable_peer_count, const fun::String& nat_device_name, const fun::HostId& peer_id, const fun::int32 Iopendingcount, const fun::int32 total_tcp_issued_send_bytes_) { return EmergencyLogData_Begin(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, logon_time, connect_count, remote_peer_count, direct_p2p_enable_peer_count, nat_device_name, peer_id, Iopendingcount, total_tcp_issued_send_bytes_); }
    bool EmergencyLogData_Begin(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& RpcCallOption, const fun::DateTime& logon_time, const fun::int32 connect_count, const fun::int32 remote_peer_count, const fun::int32 direct_p2p_enable_peer_count, const fun::String& nat_device_name, const fun::HostId& peer_id, const fun::int32 Iopendingcount, const fun::int32 total_tcp_issued_send_bytes_);

    inline bool EmergencyLogData_Error(fun::HostId rpc_recvfrom, const fun::int32 msg_size_error_count, const fun::int32 net_reset_error_count, const fun::int32 conn_reset_error_count, const fun::int32 last_error_completion_length) { return EmergencyLogData_Error(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, msg_size_error_count, net_reset_error_count, conn_reset_error_count, last_error_completion_length); }
    inline bool EmergencyLogData_Error(fun::HostId rpc_recvfrom, const fun::RpcCallOption& RpcCallOption, const fun::int32 msg_size_error_count, const fun::int32 net_reset_error_count, const fun::int32 conn_reset_error_count, const fun::int32 last_error_completion_length) { return EmergencyLogData_Error(&rpc_recvfrom, 1, RpcCallOption, msg_size_error_count, net_reset_error_count, conn_reset_error_count, last_error_completion_length); }
    template <typename Allocator>
    inline bool EmergencyLogData_Error(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::int32 msg_size_error_count, const fun::int32 net_reset_error_count, const fun::int32 conn_reset_error_count, const fun::int32 last_error_completion_length) { return EmergencyLogData_Error(RpcRemoteIds, fun::RpcCallOption::Reliable, msg_size_error_count, net_reset_error_count, conn_reset_error_count, last_error_completion_length); }
    template <typename Allocator>
    inline bool EmergencyLogData_Error(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& RpcCallOption, const fun::int32 msg_size_error_count, const fun::int32 net_reset_error_count, const fun::int32 conn_reset_error_count, const fun::int32 last_error_completion_length) { return EmergencyLogData_Error(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), RpcCallOption, msg_size_error_count, net_reset_error_count, conn_reset_error_count, last_error_completion_length); }
    inline bool EmergencyLogData_Error(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::int32 msg_size_error_count, const fun::int32 net_reset_error_count, const fun::int32 conn_reset_error_count, const fun::int32 last_error_completion_length) { return EmergencyLogData_Error(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, msg_size_error_count, net_reset_error_count, conn_reset_error_count, last_error_completion_length); }
    bool EmergencyLogData_Error(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& RpcCallOption, const fun::int32 msg_size_error_count, const fun::int32 net_reset_error_count, const fun::int32 conn_reset_error_count, const fun::int32 last_error_completion_length);

    inline bool EmergencyLogData_Stats(fun::HostId rpc_recvfrom, const fun::int64 total_tcp_recv_bytes, const fun::int64 total_tcp_send_bytes, const fun::int64 total_udp_send_count, const fun::int64 total_udp_send_bytes, const fun::int64 total_udp_recv_count, const fun::int64 total_udp_recv_bytes) { return EmergencyLogData_Stats(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, total_tcp_recv_bytes, total_tcp_send_bytes, total_udp_send_count, total_udp_send_bytes, total_udp_recv_count, total_udp_recv_bytes); }
    inline bool EmergencyLogData_Stats(fun::HostId rpc_recvfrom, const fun::RpcCallOption& RpcCallOption, const fun::int64 total_tcp_recv_bytes, const fun::int64 total_tcp_send_bytes, const fun::int64 total_udp_send_count, const fun::int64 total_udp_send_bytes, const fun::int64 total_udp_recv_count, const fun::int64 total_udp_recv_bytes) { return EmergencyLogData_Stats(&rpc_recvfrom, 1, RpcCallOption, total_tcp_recv_bytes, total_tcp_send_bytes, total_udp_send_count, total_udp_send_bytes, total_udp_recv_count, total_udp_recv_bytes); }
    template <typename Allocator>
    inline bool EmergencyLogData_Stats(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::int64 total_tcp_recv_bytes, const fun::int64 total_tcp_send_bytes, const fun::int64 total_udp_send_count, const fun::int64 total_udp_send_bytes, const fun::int64 total_udp_recv_count, const fun::int64 total_udp_recv_bytes) { return EmergencyLogData_Stats(RpcRemoteIds, fun::RpcCallOption::Reliable, total_tcp_recv_bytes, total_tcp_send_bytes, total_udp_send_count, total_udp_send_bytes, total_udp_recv_count, total_udp_recv_bytes); }
    template <typename Allocator>
    inline bool EmergencyLogData_Stats(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& RpcCallOption, const fun::int64 total_tcp_recv_bytes, const fun::int64 total_tcp_send_bytes, const fun::int64 total_udp_send_count, const fun::int64 total_udp_send_bytes, const fun::int64 total_udp_recv_count, const fun::int64 total_udp_recv_bytes) { return EmergencyLogData_Stats(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), RpcCallOption, total_tcp_recv_bytes, total_tcp_send_bytes, total_udp_send_count, total_udp_send_bytes, total_udp_recv_count, total_udp_recv_bytes); }
    inline bool EmergencyLogData_Stats(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::int64 total_tcp_recv_bytes, const fun::int64 total_tcp_send_bytes, const fun::int64 total_udp_send_count, const fun::int64 total_udp_send_bytes, const fun::int64 total_udp_recv_count, const fun::int64 total_udp_recv_bytes) { return EmergencyLogData_Stats(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, total_tcp_recv_bytes, total_tcp_send_bytes, total_udp_send_count, total_udp_send_bytes, total_udp_recv_count, total_udp_recv_bytes); }
    bool EmergencyLogData_Stats(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& RpcCallOption, const fun::int64 total_tcp_recv_bytes, const fun::int64 total_tcp_send_bytes, const fun::int64 total_udp_send_count, const fun::int64 total_udp_send_bytes, const fun::int64 total_udp_recv_count, const fun::int64 total_udp_recv_bytes);

    inline bool EmergencyLogData_OSVersion(fun::HostId rpc_recvfrom, const fun::uint32 os_major_version, const fun::uint32 os_minor_version, const fun::uint8 product_type, const fun::uint16 processor_architecture) { return EmergencyLogData_OSVersion(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, os_major_version, os_minor_version, product_type, processor_architecture); }
    inline bool EmergencyLogData_OSVersion(fun::HostId rpc_recvfrom, const fun::RpcCallOption& RpcCallOption, const fun::uint32 os_major_version, const fun::uint32 os_minor_version, const fun::uint8 product_type, const fun::uint16 processor_architecture) { return EmergencyLogData_OSVersion(&rpc_recvfrom, 1, RpcCallOption, os_major_version, os_minor_version, product_type, processor_architecture); }
    template <typename Allocator>
    inline bool EmergencyLogData_OSVersion(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::uint32 os_major_version, const fun::uint32 os_minor_version, const fun::uint8 product_type, const fun::uint16 processor_architecture) { return EmergencyLogData_OSVersion(RpcRemoteIds, fun::RpcCallOption::Reliable, os_major_version, os_minor_version, product_type, processor_architecture); }
    template <typename Allocator>
    inline bool EmergencyLogData_OSVersion(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& RpcCallOption, const fun::uint32 os_major_version, const fun::uint32 os_minor_version, const fun::uint8 product_type, const fun::uint16 processor_architecture) { return EmergencyLogData_OSVersion(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), RpcCallOption, os_major_version, os_minor_version, product_type, processor_architecture); }
    inline bool EmergencyLogData_OSVersion(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::uint32 os_major_version, const fun::uint32 os_minor_version, const fun::uint8 product_type, const fun::uint16 processor_architecture) { return EmergencyLogData_OSVersion(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, os_major_version, os_minor_version, product_type, processor_architecture); }
    bool EmergencyLogData_OSVersion(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& RpcCallOption, const fun::uint32 os_major_version, const fun::uint32 os_minor_version, const fun::uint8 product_type, const fun::uint16 processor_architecture);

    inline bool EmergencyLogData_LogEvent(fun::HostId rpc_recvfrom, const fun::LogCategory& Category, const fun::DateTime& added_time, const fun::String& text) { return EmergencyLogData_LogEvent(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, Category, added_time, text); }
    inline bool EmergencyLogData_LogEvent(fun::HostId rpc_recvfrom, const fun::RpcCallOption& RpcCallOption, const fun::LogCategory& Category, const fun::DateTime& added_time, const fun::String& text) { return EmergencyLogData_LogEvent(&rpc_recvfrom, 1, RpcCallOption, Category, added_time, text); }
    template <typename Allocator>
    inline bool EmergencyLogData_LogEvent(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::LogCategory& Category, const fun::DateTime& added_time, const fun::String& text) { return EmergencyLogData_LogEvent(RpcRemoteIds, fun::RpcCallOption::Reliable, Category, added_time, text); }
    template <typename Allocator>
    inline bool EmergencyLogData_LogEvent(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& RpcCallOption, const fun::LogCategory& Category, const fun::DateTime& added_time, const fun::String& text) { return EmergencyLogData_LogEvent(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), RpcCallOption, Category, added_time, text); }
    inline bool EmergencyLogData_LogEvent(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::LogCategory& Category, const fun::DateTime& added_time, const fun::String& text) { return EmergencyLogData_LogEvent(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, Category, added_time, text); }
    bool EmergencyLogData_LogEvent(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& RpcCallOption, const fun::LogCategory& Category, const fun::DateTime& added_time, const fun::String& text);

    inline bool EmergencyLogData_End(fun::HostId rpc_recvfrom, const fun::int32 server_udp_addr_count, const fun::int32 remote_udp_addr_count) { return EmergencyLogData_End(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable, server_udp_addr_count, remote_udp_addr_count); }
    inline bool EmergencyLogData_End(fun::HostId rpc_recvfrom, const fun::RpcCallOption& RpcCallOption, const fun::int32 server_udp_addr_count, const fun::int32 remote_udp_addr_count) { return EmergencyLogData_End(&rpc_recvfrom, 1, RpcCallOption, server_udp_addr_count, remote_udp_addr_count); }
    template <typename Allocator>
    inline bool EmergencyLogData_End(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::int32 server_udp_addr_count, const fun::int32 remote_udp_addr_count) { return EmergencyLogData_End(RpcRemoteIds, fun::RpcCallOption::Reliable, server_udp_addr_count, remote_udp_addr_count); }
    template <typename Allocator>
    inline bool EmergencyLogData_End(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& RpcCallOption, const fun::int32 server_udp_addr_count, const fun::int32 remote_udp_addr_count) { return EmergencyLogData_End(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), RpcCallOption, server_udp_addr_count, remote_udp_addr_count); }
    inline bool EmergencyLogData_End(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::int32 server_udp_addr_count, const fun::int32 remote_udp_addr_count) { return EmergencyLogData_End(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable, server_udp_addr_count, remote_udp_addr_count); }
    bool EmergencyLogData_End(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& RpcCallOption, const fun::int32 server_udp_addr_count, const fun::int32 remote_udp_addr_count);
  };
} // end of namespace C2S

}} // end of namespace fun::Emergency
