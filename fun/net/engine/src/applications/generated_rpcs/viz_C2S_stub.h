/**
 * Auto-generated by IDL Compiler (1.0.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#pragma once

#include "FUN.h"
#include "viz_defs.h"
#include "viz_types.h"

namespace fun { namespace Viz {
namespace C2S
{
  struct Stub : public fun::RpcStub
  {
    fun::int32 GetDeclaredRpcCount() const override { return C2S::NumRpcFunctions; }
    const fun::RpcId* GetDeclaredRpcIds() const override { return C2S::RpcIds::RpcIdList(); }
    const char** GetDeclaredRpcNames() const override { return C2S::RpcNames::RpcNameList(); }

    // RequestLogin
    virtual bool RequestLogin(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::String& AuthenticationKey, const fun::HostId& VizOwnerId) { return false; }
    #define DECLARE_RPCSTUB_C2S_RequestLogin bool RequestLogin(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::String& AuthenticationKey, const fun::HostId& VizOwnerId) override;
    #define IMPLEMENT_RPCSTUB_C2S_RequestLogin(TClass) bool TClass::RequestLogin(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::String& AuthenticationKey, const fun::HostId& VizOwnerId)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::String& /* AuthenticationKey */, const fun::HostId& /* VizOwnerId */)> RequestLoginFunctionType;
    RequestLoginFunctionType OnRequestLogin;

    // NotifyCommon_SendRpc
    virtual bool NotifyCommon_SendRpc(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostIdArray& send_to, const fun::VizMessageSummary& summary) { return false; }
    #define DECLARE_RPCSTUB_C2S_NotifyCommon_SendRpc bool NotifyCommon_SendRpc(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostIdArray& send_to, const fun::VizMessageSummary& summary) override;
    #define IMPLEMENT_RPCSTUB_C2S_NotifyCommon_SendRpc(TClass) bool TClass::NotifyCommon_SendRpc(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostIdArray& send_to, const fun::VizMessageSummary& summary)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostIdArray& /* send_to */, const fun::VizMessageSummary& /* summary */)> NotifyCommon_SendRpcFunctionType;
    NotifyCommon_SendRpcFunctionType OnNotifyCommon_SendRpc;

    // NotifyCommon_ReceiveRpc
    virtual bool NotifyCommon_ReceiveRpc(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& RecvFrom, const fun::String& rpc_name, const fun::RpcId& rpc_id) { return false; }
    #define DECLARE_RPCSTUB_C2S_NotifyCommon_ReceiveRpc bool NotifyCommon_ReceiveRpc(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& RecvFrom, const fun::String& rpc_name, const fun::RpcId& rpc_id) override;
    #define IMPLEMENT_RPCSTUB_C2S_NotifyCommon_ReceiveRpc(TClass) bool TClass::NotifyCommon_ReceiveRpc(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& RecvFrom, const fun::String& rpc_name, const fun::RpcId& rpc_id)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& /* RecvFrom */, const fun::String& /* rpc_name */, const fun::RpcId& /* rpc_id */)> NotifyCommon_ReceiveRpcFunctionType;
    NotifyCommon_ReceiveRpcFunctionType OnNotifyCommon_ReceiveRpc;

    // NotifyCli_ConnectionState
    virtual bool NotifyCli_ConnectionState(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::ConnectionState& ConnectionState) { return false; }
    #define DECLARE_RPCSTUB_C2S_NotifyCli_ConnectionState bool NotifyCli_ConnectionState(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::ConnectionState& ConnectionState) override;
    #define IMPLEMENT_RPCSTUB_C2S_NotifyCli_ConnectionState(TClass) bool TClass::NotifyCli_ConnectionState(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::ConnectionState& ConnectionState)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::ConnectionState& /* ConnectionState */)> NotifyCli_ConnectionStateFunctionType;
    NotifyCli_ConnectionStateFunctionType OnNotifyCli_ConnectionState;

    // NotifyCli_Peers_Clear
    virtual bool NotifyCli_Peers_Clear(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) { return false; }
    #define DECLARE_RPCSTUB_C2S_NotifyCli_Peers_Clear bool NotifyCli_Peers_Clear(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) override;
    #define IMPLEMENT_RPCSTUB_C2S_NotifyCli_Peers_Clear(TClass) bool TClass::NotifyCli_Peers_Clear(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)> NotifyCli_Peers_ClearFunctionType;
    NotifyCli_Peers_ClearFunctionType OnNotifyCli_Peers_Clear;

    // NotifyCli_Peers_AddOrEdit
    virtual bool NotifyCli_Peers_AddOrEdit(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& peer_id) { return false; }
    #define DECLARE_RPCSTUB_C2S_NotifyCli_Peers_AddOrEdit bool NotifyCli_Peers_AddOrEdit(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& peer_id) override;
    #define IMPLEMENT_RPCSTUB_C2S_NotifyCli_Peers_AddOrEdit(TClass) bool TClass::NotifyCli_Peers_AddOrEdit(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& peer_id)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& /* peer_id */)> NotifyCli_Peers_AddOrEditFunctionType;
    NotifyCli_Peers_AddOrEditFunctionType OnNotifyCli_Peers_AddOrEdit;

    // NotifySrv_ClientEmpty
    virtual bool NotifySrv_ClientEmpty(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) { return false; }
    #define DECLARE_RPCSTUB_C2S_NotifySrv_ClientEmpty bool NotifySrv_ClientEmpty(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint) override;
    #define IMPLEMENT_RPCSTUB_C2S_NotifySrv_ClientEmpty(TClass) bool TClass::NotifySrv_ClientEmpty(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint)> NotifySrv_ClientEmptyFunctionType;
    NotifySrv_ClientEmptyFunctionType OnNotifySrv_ClientEmpty;

    // NotifySrv_Clients_AddOrEdit
    virtual bool NotifySrv_Clients_AddOrEdit(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& client_id) { return false; }
    #define DECLARE_RPCSTUB_C2S_NotifySrv_Clients_AddOrEdit bool NotifySrv_Clients_AddOrEdit(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& client_id) override;
    #define IMPLEMENT_RPCSTUB_C2S_NotifySrv_Clients_AddOrEdit(TClass) bool TClass::NotifySrv_Clients_AddOrEdit(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& client_id)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& /* client_id */)> NotifySrv_Clients_AddOrEditFunctionType;
    NotifySrv_Clients_AddOrEditFunctionType OnNotifySrv_Clients_AddOrEdit;

    // NotifySrv_Clients_Remove
    virtual bool NotifySrv_Clients_Remove(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& client_id) { return false; }
    #define DECLARE_RPCSTUB_C2S_NotifySrv_Clients_Remove bool NotifySrv_Clients_Remove(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& client_id) override;
    #define IMPLEMENT_RPCSTUB_C2S_NotifySrv_Clients_Remove(TClass) bool TClass::NotifySrv_Clients_Remove(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& client_id)
    typedef fun::Function<bool(const fun::HostId rpc_recvfrom, const fun::RpcHint& RpcHint, const fun::HostId& /* client_id */)> NotifySrv_Clients_RemoveFunctionType;
    NotifySrv_Clients_RemoveFunctionType OnNotifySrv_Clients_Remove;

    // RpcStub interface
    bool ProcessReceivedMessage(fun::ReceivedMessage& received_msg, void* host_tag) override;
  };

} // end of namespace C2S

}} // end of namespace fun::Viz
