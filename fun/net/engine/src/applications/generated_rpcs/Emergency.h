/**
 * Auto-generated by IDL Compiler (1.0.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#pragma once

#include "FUN.h"
#include "emergency_types.h"

#define IDL_BEGIN_GLOBAL_NAMESPACE }}
#define IDL_END_GLOBAL_NAMESPACE namespace fun { namespace Emergency {

namespace fun { namespace Emergency {

//==============================================================================
// Service C2S
//==============================================================================

namespace C2S
{
  struct CC2S_EmergencyLogData_Begin_Args
  {
    // arguments.
    fun::DateTime logon_time;
    fun::int32 connect_count;
    fun::int32 remote_peer_count;
    fun::int32 direct_p2p_enable_peer_count;
    fun::String nat_device_name;
    fun::HostId peer_id;
    fun::int32 Iopendingcount;
    fun::int32 total_tcp_issued_send_bytes_;

    // Construction
    inline CC2S_EmergencyLogData_Begin_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(fun::FlexFormat::ReadDateTime(Input__, logon_time));
      DO_CHECKED__(fun::FlexFormat::ReadSInt32(Input__, connect_count));
      DO_CHECKED__(fun::FlexFormat::ReadSInt32(Input__, remote_peer_count));
      DO_CHECKED__(fun::FlexFormat::ReadSInt32(Input__, direct_p2p_enable_peer_count));
      DO_CHECKED__(fun::FlexFormat::ReadString(Input__, nat_device_name));
      DO_CHECKED__(fun::EngineTypes_UserTypeHandlers::Read(Input__, peer_id));
      DO_CHECKED__(fun::FlexFormat::ReadSInt32(Input__, Iopendingcount));
      DO_CHECKED__(fun::FlexFormat::ReadSInt32(Input__, total_tcp_issued_send_bytes_));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"logon_time\":") << fun::ToString(logon_time);
      result << TEXT("\",connect_count\":") << fun::ToString(connect_count);
      result << TEXT("\",remote_peer_count\":") << fun::ToString(remote_peer_count);
      result << TEXT("\",direct_p2p_enable_peer_count\":") << fun::ToString(direct_p2p_enable_peer_count);
      result << TEXT("\",nat_device_name\":\"") << fun::ToString(nat_device_name) << TEXT("\"");
      result << TEXT("\",peer_id\":") << fun::ToString(peer_id);
      result << TEXT("\",Iopendingcount\":") << fun::ToString(Iopendingcount);
      result << TEXT("\",total_tcp_issued_send_bytes_\":") << fun::ToString(total_tcp_issued_send_bytes_);
      result << TEXT("}");
      return result;
    }
  };

  struct CC2S_EmergencyLogData_Begin_PArgs
  {
    // arguments.
    const fun::DateTime* logon_time;
    const fun::int32* connect_count;
    const fun::int32* remote_peer_count;
    const fun::int32* direct_p2p_enable_peer_count;
    const fun::String* nat_device_name;
    const fun::HostId* peer_id;
    const fun::int32* Iopendingcount;
    const fun::int32* total_tcp_issued_send_bytes_;

    // Construction
    inline CC2S_EmergencyLogData_Begin_PArgs(const fun::DateTime* LoggingTime_, const fun::int32* ConnectCount_, const fun::int32* RemotePeerCount_, const fun::int32* DirectP2PEnablePeerCount_, const fun::String* NatDeviceName_, const fun::HostId* PeerId_, const fun::int32* Iopendingcount_, const fun::int32* TotalTcpIssueSendBytes_)
      : logon_time(LoggingTime_)
      , connect_count(ConnectCount_)
      , remote_peer_count(RemotePeerCount_)
      , direct_p2p_enable_peer_count(DirectP2PEnablePeerCount_)
      , nat_device_name(NatDeviceName_)
      , peer_id(PeerId_)
      , Iopendingcount(Iopendingcount_)
      , total_tcp_issued_send_bytes_(TotalTcpIssueSendBytes_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      fun::FlexFormat::WriteDateTime(Output__, *logon_time);
      fun::FlexFormat::WriteSInt32(Output__, *connect_count);
      fun::FlexFormat::WriteSInt32(Output__, *remote_peer_count);
      fun::FlexFormat::WriteSInt32(Output__, *direct_p2p_enable_peer_count);
      fun::FlexFormat::WriteString(Output__, *nat_device_name);
      fun::EngineTypes_UserTypeHandlers::Write(Output__, *peer_id);
      fun::FlexFormat::WriteSInt32(Output__, *Iopendingcount);
      fun::FlexFormat::WriteSInt32(Output__, *total_tcp_issued_send_bytes_);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"logon_time\":") << fun::ToString(*logon_time);
      result << TEXT("\",connect_count\":") << fun::ToString(*connect_count);
      result << TEXT("\",remote_peer_count\":") << fun::ToString(*remote_peer_count);
      result << TEXT("\",direct_p2p_enable_peer_count\":") << fun::ToString(*direct_p2p_enable_peer_count);
      result << TEXT("\",nat_device_name\":\"") << fun::ToString(*nat_device_name) << TEXT("\"");
      result << TEXT("\",peer_id\":") << fun::ToString(*peer_id);
      result << TEXT("\",Iopendingcount\":") << fun::ToString(*Iopendingcount);
      result << TEXT("\",total_tcp_issued_send_bytes_\":") << fun::ToString(*total_tcp_issued_send_bytes_);
      result << TEXT("}");
      return result;
    }
  };

  struct CC2S_EmergencyLogData_Error_Args
  {
    // arguments.
    fun::int32 msg_size_error_count;
    fun::int32 net_reset_error_count;
    fun::int32 conn_reset_error_count;
    fun::int32 last_error_completion_length;

    // Construction
    inline CC2S_EmergencyLogData_Error_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(fun::FlexFormat::ReadSInt32(Input__, msg_size_error_count));
      DO_CHECKED__(fun::FlexFormat::ReadSInt32(Input__, net_reset_error_count));
      DO_CHECKED__(fun::FlexFormat::ReadSInt32(Input__, conn_reset_error_count));
      DO_CHECKED__(fun::FlexFormat::ReadSInt32(Input__, last_error_completion_length));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"msg_size_error_count\":") << fun::ToString(msg_size_error_count);
      result << TEXT("\",net_reset_error_count\":") << fun::ToString(net_reset_error_count);
      result << TEXT("\",conn_reset_error_count\":") << fun::ToString(conn_reset_error_count);
      result << TEXT("\",last_error_completion_length\":") << fun::ToString(last_error_completion_length);
      result << TEXT("}");
      return result;
    }
  };

  struct CC2S_EmergencyLogData_Error_PArgs
  {
    // arguments.
    const fun::int32* msg_size_error_count;
    const fun::int32* net_reset_error_count;
    const fun::int32* conn_reset_error_count;
    const fun::int32* last_error_completion_length;

    // Construction
    inline CC2S_EmergencyLogData_Error_PArgs(const fun::int32* MsgSizeErrorCount_, const fun::int32* NetResetErrorCount_, const fun::int32* ConnResetErrorCount_, const fun::int32* LastErrorCompletionLength_)
      : msg_size_error_count(MsgSizeErrorCount_)
      , net_reset_error_count(NetResetErrorCount_)
      , conn_reset_error_count(ConnResetErrorCount_)
      , last_error_completion_length(LastErrorCompletionLength_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      fun::FlexFormat::WriteSInt32(Output__, *msg_size_error_count);
      fun::FlexFormat::WriteSInt32(Output__, *net_reset_error_count);
      fun::FlexFormat::WriteSInt32(Output__, *conn_reset_error_count);
      fun::FlexFormat::WriteSInt32(Output__, *last_error_completion_length);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"msg_size_error_count\":") << fun::ToString(*msg_size_error_count);
      result << TEXT("\",net_reset_error_count\":") << fun::ToString(*net_reset_error_count);
      result << TEXT("\",conn_reset_error_count\":") << fun::ToString(*conn_reset_error_count);
      result << TEXT("\",last_error_completion_length\":") << fun::ToString(*last_error_completion_length);
      result << TEXT("}");
      return result;
    }
  };

  struct CC2S_EmergencyLogData_Stats_Args
  {
    // arguments.
    fun::int64 total_tcp_recv_bytes;
    fun::int64 total_tcp_send_bytes;
    fun::int64 total_udp_send_count;
    fun::int64 total_udp_send_bytes;
    fun::int64 total_udp_recv_count;
    fun::int64 total_udp_recv_bytes;

    // Construction
    inline CC2S_EmergencyLogData_Stats_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(fun::FlexFormat::ReadSInt64(Input__, total_tcp_recv_bytes));
      DO_CHECKED__(fun::FlexFormat::ReadSInt64(Input__, total_tcp_send_bytes));
      DO_CHECKED__(fun::FlexFormat::ReadSInt64(Input__, total_udp_send_count));
      DO_CHECKED__(fun::FlexFormat::ReadSInt64(Input__, total_udp_send_bytes));
      DO_CHECKED__(fun::FlexFormat::ReadSInt64(Input__, total_udp_recv_count));
      DO_CHECKED__(fun::FlexFormat::ReadSInt64(Input__, total_udp_recv_bytes));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"total_tcp_recv_bytes\":") << fun::ToString(total_tcp_recv_bytes);
      result << TEXT("\",total_tcp_send_bytes\":") << fun::ToString(total_tcp_send_bytes);
      result << TEXT("\",total_udp_send_count\":") << fun::ToString(total_udp_send_count);
      result << TEXT("\",total_udp_send_bytes\":") << fun::ToString(total_udp_send_bytes);
      result << TEXT("\",total_udp_recv_count\":") << fun::ToString(total_udp_recv_count);
      result << TEXT("\",total_udp_recv_bytes\":") << fun::ToString(total_udp_recv_bytes);
      result << TEXT("}");
      return result;
    }
  };

  struct CC2S_EmergencyLogData_Stats_PArgs
  {
    // arguments.
    const fun::int64* total_tcp_recv_bytes;
    const fun::int64* total_tcp_send_bytes;
    const fun::int64* total_udp_send_count;
    const fun::int64* total_udp_send_bytes;
    const fun::int64* total_udp_recv_count;
    const fun::int64* total_udp_recv_bytes;

    // Construction
    inline CC2S_EmergencyLogData_Stats_PArgs(const fun::int64* TotalTcpReceiveBytes_, const fun::int64* TotalTcpSendBytes_, const fun::int64* TotalUdpSendCount_, const fun::int64* TotalUdpSendBytes_, const fun::int64* TotalUdpReceiveCount_, const fun::int64* TotalUdpReceiveBytes_)
      : total_tcp_recv_bytes(TotalTcpReceiveBytes_)
      , total_tcp_send_bytes(TotalTcpSendBytes_)
      , total_udp_send_count(TotalUdpSendCount_)
      , total_udp_send_bytes(TotalUdpSendBytes_)
      , total_udp_recv_count(TotalUdpReceiveCount_)
      , total_udp_recv_bytes(TotalUdpReceiveBytes_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      fun::FlexFormat::WriteSInt64(Output__, *total_tcp_recv_bytes);
      fun::FlexFormat::WriteSInt64(Output__, *total_tcp_send_bytes);
      fun::FlexFormat::WriteSInt64(Output__, *total_udp_send_count);
      fun::FlexFormat::WriteSInt64(Output__, *total_udp_send_bytes);
      fun::FlexFormat::WriteSInt64(Output__, *total_udp_recv_count);
      fun::FlexFormat::WriteSInt64(Output__, *total_udp_recv_bytes);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"total_tcp_recv_bytes\":") << fun::ToString(*total_tcp_recv_bytes);
      result << TEXT("\",total_tcp_send_bytes\":") << fun::ToString(*total_tcp_send_bytes);
      result << TEXT("\",total_udp_send_count\":") << fun::ToString(*total_udp_send_count);
      result << TEXT("\",total_udp_send_bytes\":") << fun::ToString(*total_udp_send_bytes);
      result << TEXT("\",total_udp_recv_count\":") << fun::ToString(*total_udp_recv_count);
      result << TEXT("\",total_udp_recv_bytes\":") << fun::ToString(*total_udp_recv_bytes);
      result << TEXT("}");
      return result;
    }
  };

  struct CC2S_EmergencyLogData_OSVersion_Args
  {
    // arguments.
    fun::uint32 os_major_version;
    fun::uint32 os_minor_version;
    fun::uint8 product_type;
    fun::uint16 processor_architecture;

    // Construction
    inline CC2S_EmergencyLogData_OSVersion_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(fun::FlexFormat::ReadUInt32(Input__, os_major_version));
      DO_CHECKED__(fun::FlexFormat::ReadUInt32(Input__, os_minor_version));
      DO_CHECKED__(fun::FlexFormat::ReadFixed8(Input__, product_type));
      DO_CHECKED__(fun::FlexFormat::ReadFixed16(Input__, processor_architecture));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"os_major_version\":") << fun::ToString(os_major_version);
      result << TEXT("\",os_minor_version\":") << fun::ToString(os_minor_version);
      result << TEXT("\",product_type\":") << fun::ToString(product_type);
      result << TEXT("\",processor_architecture\":") << fun::ToString(processor_architecture);
      result << TEXT("}");
      return result;
    }
  };

  struct CC2S_EmergencyLogData_OSVersion_PArgs
  {
    // arguments.
    const fun::uint32* os_major_version;
    const fun::uint32* os_minor_version;
    const fun::uint8* product_type;
    const fun::uint16* processor_architecture;

    // Construction
    inline CC2S_EmergencyLogData_OSVersion_PArgs(const fun::uint32* OsMajorVersion_, const fun::uint32* OsMinorVersion_, const fun::uint8* ProductType_, const fun::uint16* ProcessorArchitecture_)
      : os_major_version(OsMajorVersion_)
      , os_minor_version(OsMinorVersion_)
      , product_type(ProductType_)
      , processor_architecture(ProcessorArchitecture_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      fun::FlexFormat::WriteUInt32(Output__, *os_major_version);
      fun::FlexFormat::WriteUInt32(Output__, *os_minor_version);
      fun::FlexFormat::WriteFixed8(Output__, *product_type);
      fun::FlexFormat::WriteFixed16(Output__, *processor_architecture);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"os_major_version\":") << fun::ToString(*os_major_version);
      result << TEXT("\",os_minor_version\":") << fun::ToString(*os_minor_version);
      result << TEXT("\",product_type\":") << fun::ToString(*product_type);
      result << TEXT("\",processor_architecture\":") << fun::ToString(*processor_architecture);
      result << TEXT("}");
      return result;
    }
  };

  struct CC2S_EmergencyLogData_LogEvent_Args
  {
    // arguments.
    fun::LogCategory Category;
    fun::DateTime added_time;
    fun::String text;

    // Construction
    inline CC2S_EmergencyLogData_LogEvent_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(fun::EngineTypes_UserTypeHandlers::Read(Input__, Category));
      DO_CHECKED__(fun::FlexFormat::ReadDateTime(Input__, added_time));
      DO_CHECKED__(fun::FlexFormat::ReadString(Input__, text));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"Category\":") << fun::ToString(Category);
      result << TEXT("\",added_time\":") << fun::ToString(added_time);
      result << TEXT("\",text\":\"") << fun::ToString(text) << TEXT("\"");
      result << TEXT("}");
      return result;
    }
  };

  struct CC2S_EmergencyLogData_LogEvent_PArgs
  {
    // arguments.
    const fun::LogCategory* Category;
    const fun::DateTime* added_time;
    const fun::String* text;

    // Construction
    inline CC2S_EmergencyLogData_LogEvent_PArgs(const fun::LogCategory* Category_, const fun::DateTime* AddedTime_, const fun::String* Text_)
      : Category(Category_)
      , added_time(AddedTime_)
      , text(Text_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      fun::EngineTypes_UserTypeHandlers::Write(Output__, *Category);
      fun::FlexFormat::WriteDateTime(Output__, *added_time);
      fun::FlexFormat::WriteString(Output__, *text);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"Category\":") << fun::ToString(*Category);
      result << TEXT("\",added_time\":") << fun::ToString(*added_time);
      result << TEXT("\",text\":\"") << fun::ToString(*text) << TEXT("\"");
      result << TEXT("}");
      return result;
    }
  };

  struct CC2S_EmergencyLogData_End_Args
  {
    // arguments.
    fun::int32 server_udp_addr_count;
    fun::int32 remote_udp_addr_count;

    // Construction
    inline CC2S_EmergencyLogData_End_Args() {}

    // Reader
    bool Read(fun::IMessageIn& Input__)
    {
      #define DO_CHECKED__(Expr) { if (!(Expr)) return false; }
      DO_CHECKED__(fun::FlexFormat::ReadSInt32(Input__, server_udp_addr_count));
      DO_CHECKED__(fun::FlexFormat::ReadSInt32(Input__, remote_udp_addr_count));
      return true;
      #undef DO_CHECKED__
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"server_udp_addr_count\":") << fun::ToString(server_udp_addr_count);
      result << TEXT("\",remote_udp_addr_count\":") << fun::ToString(remote_udp_addr_count);
      result << TEXT("}");
      return result;
    }
  };

  struct CC2S_EmergencyLogData_End_PArgs
  {
    // arguments.
    const fun::int32* server_udp_addr_count;
    const fun::int32* remote_udp_addr_count;

    // Construction
    inline CC2S_EmergencyLogData_End_PArgs(const fun::int32* ServerUdpAddrCount_, const fun::int32* RemoteUdpAddrCount_)
      : server_udp_addr_count(ServerUdpAddrCount_)
      , remote_udp_addr_count(RemoteUdpAddrCount_)
    {}

    // Writer
    inline void Write(fun::IMessageOut& Output__)
    {
      fun::FlexFormat::WriteSInt32(Output__, *server_udp_addr_count);
      fun::FlexFormat::WriteSInt32(Output__, *remote_udp_addr_count);
    }

    // ToString(Json style for diagnostics)
    inline fun::String ToString() const
    {
      fun::String result = TEXT("{");
      result << TEXT("\"server_udp_addr_count\":") << fun::ToString(*server_udp_addr_count);
      result << TEXT("\",remote_udp_addr_count\":") << fun::ToString(*remote_udp_addr_count);
      result << TEXT("}");
      return result;
    }
  };
} // end of namespace C2S


//==============================================================================
// Service S2C
//==============================================================================

namespace S2C
{
} // end of namespace S2C


}} // end of namespace fun::Emergency

#undef IDL_BEGIN_GLOBAL_NAMESPACE
#undef IDL_END_GLOBAL_NAMESPACE
