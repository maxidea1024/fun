/**
 * Auto-generated by IDL Compiler (1.0.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#pragma once

#include "FUN.h"
#include "Dump_defs.h"
#include "Dump_types.h"

namespace fun {
namespace DumpS2C
{
  struct Proxy : public fun::RpcProxy
  {
    fun::int32 GetDeclaredRpcCount() const override { return DumpS2C::NumRpcFunctions; }
    const fun::RpcId* GetDeclaredRpcIds() const override { return DumpS2C::RpcIds::RpcIdList(); }
    const char** GetDeclaredRpcNames() const override { return DumpS2C::RpcNames::RpcNameList(); }

    inline bool ChunkAck(fun::HostId rpc_recvfrom) { return ChunkAck(&rpc_recvfrom, 1, fun::RpcCallOption::Reliable); }
    inline bool ChunkAck(fun::HostId rpc_recvfrom, const fun::RpcCallOption& RpcCallOption) { return ChunkAck(&rpc_recvfrom, 1, RpcCallOption); }
    template <typename Allocator>
    inline bool ChunkAck(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds) { return ChunkAck(RpcRemoteIds, fun::RpcCallOption::Reliable); }
    template <typename Allocator>
    inline bool ChunkAck(const fun::Array<fun::HostId,Allocator>& RpcRemoteIds, const fun::RpcCallOption& RpcCallOption) { return ChunkAck(RpcRemoteIds.ConstData(), RpcRemoteIds.Count(), RpcCallOption); }
    inline bool ChunkAck(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount) { return ChunkAck(RpcRemoteIds, RpcRemoteIdCount, fun::RpcCallOption::Reliable); }
    bool ChunkAck(const fun::HostId* RpcRemoteIds, fun::int32 RpcRemoteIdCount, const fun::RpcCallOption& RpcCallOption);
  };
} // end of namespace DumpS2C

} // end of namespace fun
